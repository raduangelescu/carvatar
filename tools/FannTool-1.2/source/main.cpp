//
// FannTool, GUI tool for ANN by using FANN library
// Programmed by BlueKid
// http://derindelimavi.blogspot.com/
// Send me any suggestion, modification or bugs.
// Don't hesitate to contact  me for any question,
// I will be very grateful with your feedbacks.
// bluekid70@gmail.com
// Copyright (C) 2008  BlueKid
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or  any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//

// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "main.h"
#ifdef WIN32
#include "fanntoolrc.h"
extern HINSTANCE fl_display;
#elif !defined(__APPLE__)
#include <X11/xpm.h>
#include "fanntool_icon.xpm"
extern Display *fl_display;
#endif
static int Act[13]={
	  FANN_LINEAR,
	  FANN_SIGMOID,
	  FANN_SIGMOID_STEPWISE,
	  FANN_SIGMOID_SYMMETRIC,
	  FANN_SIGMOID_SYMMETRIC_STEPWISE,
	  FANN_GAUSSIAN,
	  FANN_GAUSSIAN_SYMMETRIC,
	  FANN_ELLIOT,
	  FANN_ELLIOT_SYMMETRIC,
	  FANN_LINEAR_PIECE,
	  FANN_LINEAR_PIECE_SYMMETRIC,
	  FANN_SIN_SYMMETRIC,
	  FANN_COS_SYMMETRIC
    };
static int Line;
// MinMSE and MinANN
// Min Training MSE
// Min Testing MSE
// Min OPS MSE
// Latest MSE
// both Training and Testing MSE

static struct fann* MinANN[4];
static double MinTrainingMSE[4];
static double MinTestingMSE[4];
static FannTool ft;
static bool cascadeFirst;
static DataProcess *rdp;
static TimeSeri *tdp;
static DataItem *itmp;
static std::deque<float> cX;
static std::deque<float> cY;
static char fNameBuf[2048];

Fl_Double_Window *window_main=(Fl_Double_Window *)0;

static void cb_Open(Fl_Menu_*, void*) {
  ft.LoadTrainData();
}

static void cb_Open1(Fl_Menu_*, void*) {
  ft.LoadTestData();
}

static void cb_Open2(Fl_Menu_*, void*) {
  ft.LoadLog();
}

static void cb_Save(Fl_Menu_*, void*) {
  ft.SaveLog();
}

static void cb_Clear(Fl_Menu_*, void*) {
  ft.ClearLog();
}

static void cb_Exit(Fl_Menu_*, void*) {
  Exit_CB(0,0);
//exit(0);
}

static void cb_Optimum(Fl_Menu_*, void*) {
  ft.OptimumAlgorithm();
}

static void cb_Optimum1(Fl_Menu_*, void*) {
  ft.OptimumActivations();
}

static void cb_Normal(Fl_Menu_*, void*) {
  ft.TrainNormal();
}

static void cb_Cascade(Fl_Menu_*, void*) {
  ft.TrainCascade();
}

static void cb_Test(Fl_Menu_*, void*) {
  ft.Test();
}

static void cb_Normal1(Fl_Menu_*, void*) {
  ft.RunNormal();
}

static void cb_with(Fl_Menu_*, void*) {
  ft.RunwithFile();
}

static void cb_as(Fl_Menu_*, void*) {
  ft.RunAsTS();
}

static void cb_as1(Fl_Menu_*, void*) {
  ft.RunAsClassifier();
}

static void cb_Info(Fl_Menu_*, void*) {
  ft.NeuralNetworkInfo();
}

static void cb_Data(Fl_Menu_*, void*) {
  ft.DataProcessing();
}

static void cb_About(Fl_Menu_*, void*) {
  ft.About();
}

Fl_Menu_Item menu_[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Open Training Data", 0,  (Fl_Callback*)cb_Open, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Open Test Data", 0,  (Fl_Callback*)cb_Open1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Open Log", 0,  (Fl_Callback*)cb_Open2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Log", 0,  (Fl_Callback*)cb_Save, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Clear Log", 0,  (Fl_Callback*)cb_Clear, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0,  (Fl_Callback*)cb_Exit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Neural Network", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Detect", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Optimum Training Algorithm", 0,  (Fl_Callback*)cb_Optimum, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Optimum Activation Functions", 0,  (Fl_Callback*)cb_Optimum1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Train", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Normal", 0,  (Fl_Callback*)cb_Normal, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Cascade", 0,  (Fl_Callback*)cb_Cascade, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Test", 0,  (Fl_Callback*)cb_Test, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Run", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Normal", 0,  (Fl_Callback*)cb_Normal1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"with File", 0,  (Fl_Callback*)cb_with, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"as a Time Series", 0,  (Fl_Callback*)cb_as, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"as a Classifier", 0,  (Fl_Callback*)cb_as1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Info", 0,  (Fl_Callback*)cb_Info, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Data Processing", 0,  (Fl_Callback*)cb_Data, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"About FannTool", 0,  (Fl_Callback*)cb_About, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Input *DataFile=(Fl_Input *)0;

Fl_Input *TestFile=(Fl_Input *)0;

static void cb_(Fl_Repeat_Button*, void*) {
  // GetTrainData
ft.LoadTrainData();
}

static void cb_1(Fl_Repeat_Button*, void*) {
  // GetTestData
ft.LoadTestData();
}

Fl_Value_Output *Input=(Fl_Value_Output *)0;

Fl_Value_Output *Output=(Fl_Value_Output *)0;

Fl_Spinner *Layer=(Fl_Spinner *)0;

static void cb_Layer(Fl_Spinner*, void*) {
  if(Layer->value()==3){
 Hid2->deactivate();
 Hid3->deactivate();
}
else if(Layer->value()==4){
 Hid2->activate();
 Hid3->deactivate();
}
else if(Layer->value()==5){
 Hid2->activate();
 Hid3->activate();
}
SetHiddens();
}

Fl_Spinner *Hid1=(Fl_Spinner *)0;

Fl_Spinner *Hid2=(Fl_Spinner *)0;

Fl_Spinner *Hid3=(Fl_Spinner *)0;

Fl_Choice *Method=(Fl_Choice *)0;

Fl_Choice *HiddenActivationF=(Fl_Choice *)0;

Fl_Choice *OutputActivationF=(Fl_Choice *)0;

Fl_Choice *StopFunction=(Fl_Choice *)0;

Fl_Value_Input *EReports=(Fl_Value_Input *)0;

Fl_Value_Input *MaxEpoch=(Fl_Value_Input *)0;

static void cb_MaxEpoch(Fl_Value_Input*, void*) {
  /*
if(MaxEpoch->value()>=1000)
  MaxEpoch->step(100);
if(MaxEpoch->value()>=10000)
  MaxEpoch->step(1000);
if(MaxEpoch->value()>=100000)
  MaxEpoch->step(10000);

*/;
}

Fl_Tabs *Tabs=(Fl_Tabs *)0;

Fl_Group *LogG=(Fl_Group *)0;

Fl_Browser *Out=(Fl_Browser *)0;

Fl_Group *GraphG=(Fl_Group *)0;

Fl_PlotXY *Graph=(Fl_PlotXY *)0;

Fl_Value_Output *Ep=(Fl_Value_Output *)0;

Fl_Value_Output *Mse=(Fl_Value_Output *)0;

Fl_Spinner *nVData=(Fl_Spinner *)0;

Fl_Value_Output *BitFailOut=(Fl_Value_Output *)0;

Fl_Value_Output *TestMse=(Fl_Value_Output *)0;

Fl_Value_Input *DesiredError=(Fl_Value_Input *)0;

Fl_Value_Input *BitFail=(Fl_Value_Input *)0;

Fl_Choice *ErrorFunction=(Fl_Choice *)0;

Fl_Value_Input *HiddenStepness=(Fl_Value_Input *)0;

Fl_Value_Input *OutputStepness=(Fl_Value_Input *)0;

Fl_Value_Input *DecayFactor=(Fl_Value_Input *)0;

Fl_Value_Input *MuFactor=(Fl_Value_Input *)0;

Fl_Value_Input *IncreaseFactor=(Fl_Value_Input *)0;

Fl_Value_Input *DecreaseFactor=(Fl_Value_Input *)0;

Fl_Value_Input *DeltaMin=(Fl_Value_Input *)0;

Fl_Value_Input *DeltaMax=(Fl_Value_Input *)0;

Fl_Counter *ConnectionRate=(Fl_Counter *)0;

Fl_Counter *Momentum=(Fl_Counter *)0;

Fl_Check_Button *Shuffle=(Fl_Check_Button *)0;

Fl_Check_Button *InitWghts=(Fl_Check_Button *)0;

Fl_Check_Button *OverTraining=(Fl_Check_Button *)0;

static void cb_OverTraining(Fl_Check_Button*, void*) {
  if(OverTraining->value()){
  ft.overtraining=true;
  TestMse->activate();
}
else{
  ft.overtraining=false;
  TestMse->value(0);
  TestMse->deactivate();

};
}

Fl_Spinner *LearningRate=(Fl_Spinner *)0;

Fl_Value_Input *OutputChange=(Fl_Value_Input *)0;

Fl_Value_Input *OutputStag=(Fl_Value_Input *)0;

Fl_Value_Input *CandidateChange=(Fl_Value_Input *)0;

Fl_Value_Input *CandidateStag=(Fl_Value_Input *)0;

Fl_Value_Input *WeighMultiplier=(Fl_Value_Input *)0;

Fl_Value_Input *CandidateLimit=(Fl_Value_Input *)0;

Fl_Value_Input *MaxOutEpoch=(Fl_Value_Input *)0;

Fl_Value_Input *MaxCasndidatetEpoch=(Fl_Value_Input *)0;

Fl_Value_Input *NumCandidateGroups=(Fl_Value_Input *)0;

Fl_Value_Input *MaxCascade=(Fl_Value_Input *)0;

Fl_Button *But_Alg=(Fl_Button *)0;

static void cb_But_Alg(Fl_Button*, void*) {
  ft.OptimumAlgorithm();
}

#include <FL/Fl_Image.H>
static unsigned char idata_alg[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,123,214,255,33,123,214,255,33,
123,214,255,33,123,214,255,33,123,214,255,33,123,214,255,33,123,214,255,0,99,
206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,123,214,255,255,
255,255,255,255,255,255,255,255,255,255,255,214,239,255,255,181,222,255,255,165,
214,255,255,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,
123,214,255,239,247,255,255,239,247,255,255,214,239,255,255,214,239,255,255,181,
222,255,255,165,214,255,255,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,99,206,255,0,99,206,255,0,99,206,255,0,99,206,255,0,99,206,255,
0,99,206,255,0,99,206,255,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,123,214,255,33,123,
214,255,33,123,214,255,33,123,214,255,33,123,214,255,33,123,214,255,33,123,214,
255,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,123,
214,255,255,255,255,255,255,255,255,255,255,255,255,255,214,239,255,255,181,222,
255,255,165,214,255,255,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,206,255,0,99,206,255,0,99,206,255,
0,99,206,255,0,99,206,255,0,99,206,255,33,123,214,255,239,247,255,255,239,247,
255,255,214,239,255,255,214,239,255,255,181,222,255,255,165,214,255,255,0,99,
206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,206,255,0,
99,206,255,0,99,206,255,0,99,206,255,0,99,206,255,0,99,206,255,0,99,206,255,0,
99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,206,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,123,214,255,33,123,214,255,33,123,214,255,33,
123,214,255,33,123,214,255,33,123,214,255,33,123,214,255,0,99,206,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,
206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,123,214,255,255,255,255,255,
255,255,255,255,255,255,255,255,214,239,255,255,181,222,255,255,165,214,255,255,
0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,99,206,255,0,99,206,255,0,99,206,255,0,99,206,255,0,99,206,
255,0,99,206,255,33,123,214,255,239,247,255,255,239,247,255,255,214,239,255,255,
214,239,255,255,181,222,255,255,165,214,255,255,0,99,206,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,206,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,206,255,0,99,206,255,0,99,206,255,
0,99,206,255,0,99,206,255,0,99,206,255,0,99,206,255,0,99,206,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,206,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,33,123,214,255,33,123,214,255,33,123,214,255,33,123,214,255,33,123,214,
255,33,123,214,255,33,123,214,255,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,206,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,33,123,214,255,255,255,255,255,255,255,255,255,255,
255,255,255,214,239,255,255,181,222,255,255,165,214,255,255,0,99,206,255,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
99,206,255,0,99,206,255,0,99,206,255,0,99,206,255,0,99,206,255,0,99,206,255,33,
123,214,255,239,247,255,255,239,247,255,255,214,239,255,255,214,239,255,255,181,
222,255,255,165,214,255,255,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,99,206,255,0,99,206,255,0,99,206,255,0,99,206,255,0,99,
206,255,0,99,206,255,0,99,206,255,0,99,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,206,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_alg(idata_alg, 24, 24, 4, 0);

Fl_Button *But_Act=(Fl_Button *)0;

static void cb_But_Act(Fl_Button*, void*) {
  ft.OptimumActivations();
}

static unsigned char idata_act[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,123,123,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,123,123,123,255,123,123,123,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,123,123,255,181,181,181,
255,115,115,115,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,123,123,255,181,181,181,255,115,115,115,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,123,123,123,255,181,181,181,255,115,115,115,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,123,123,123,255,140,140,140,255,140,140,140,255,140,140,140,
255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,
255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,123,123,123,
255,99,99,99,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,123,123,123,255,198,198,198,255,198,198,198,255,198,198,198,255,198,
198,198,255,198,198,198,255,198,198,198,255,198,198,198,255,198,198,198,255,198,
198,198,255,198,198,198,255,198,198,198,255,140,140,140,255,99,99,99,255,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,
123,123,255,198,198,198,255,115,115,115,255,115,115,115,255,115,115,115,255,115,
115,115,255,115,115,115,255,115,115,115,255,115,115,115,255,115,115,115,255,115,
115,115,255,115,115,115,255,99,99,99,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,115,115,255,165,165,165,
255,115,115,115,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,66,66,255,82,82,82,255,
66,66,66,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,115,115,255,165,165,165,255,
99,99,99,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,82,82,255,140,140,140,255,82,
82,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,115,115,255,148,148,148,255,
99,99,99,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,82,82,255,140,140,140,255,74,
74,74,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,99,99,255,148,148,148,255,82,
82,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,82,82,255,123,123,123,255,66,66,
66,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,82,82,82,255,74,74,74,255,74,74,74,255,99,99,99,255,140,140,
140,255,82,82,82,255,66,66,66,255,74,74,74,255,74,74,74,255,74,74,74,255,82,82,
82,255,123,123,123,255,66,66,66,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,82,82,255,123,123,123,255,123,123,
123,255,123,123,123,255,82,82,82,255,140,140,140,255,82,82,82,255,74,74,74,255,
123,123,123,255,123,123,123,255,123,123,123,255,123,123,123,255,123,123,123,255,
66,66,66,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,82,82,82,255,66,66,66,255,66,66,66,255,66,66,66,255,66,66,66,255,82,82,
82,255,140,140,140,255,74,74,74,255,66,66,66,255,66,66,66,255,66,66,66,255,66,
66,66,255,66,66,66,255,66,66,66,255,66,66,66,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,74,74,74,255,123,123,123,255,66,66,66,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,66,66,255,123,
123,123,255,66,66,66,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,66,66,255,74,74,74,255,123,123,123,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,66,66,66,255,123,123,123,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,123,123,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_act(idata_act, 24, 24, 4, 0);

Fl_Menu_Button *But_Trn=(Fl_Menu_Button *)0;

static void cb_But_Trn(Fl_Menu_Button*, void*) {
  if(But_Trn->value()==0)
  ft.TrainNormal();
else if(But_Trn->value()==1)
  ft.TrainCascade();
}

static unsigned char idata_train[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,16,0,255,231,16,0,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,181,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,156,107,74,255,239,156,41,255,247,115,41,255,189,57,49,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,90,181,255,0,90,181,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
140,148,156,255,181,206,231,255,123,99,41,255,247,115,41,255,189,57,49,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,181,255,222,222,255,255,0,90,181,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,90,107,132,255,255,255,255,255,231,239,247,255,82,99,115,255,74,33,33,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,181,255,222,222,255,255,165,173,
247,255,0,90,181,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,214,165,16,255,222,165,66,255,123,132,140,255,123,132,132,255,
49,49,49,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,181,255,222,
222,255,255,198,198,255,255,165,173,247,255,0,90,181,255,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,165,16,255,247,231,66,255,247,115,41,
255,189,57,49,255,49,49,49,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,90,181,255,222,222,255,255,198,198,255,255,198,198,255,255,165,173,
247,255,0,90,181,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,165,16,255,247,
231,66,255,247,115,41,255,247,115,41,255,99,66,8,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,181,255,222,222,255,255,198,198,
255,255,198,198,255,255,198,198,255,255,165,173,247,255,0,90,181,255,0,0,0,0,0,
0,0,0,0,0,0,0,214,165,16,255,247,231,66,255,247,115,41,255,247,115,41,255,107,
82,33,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,90,181,255,222,222,255,255,198,198,255,255,198,198,255,255,198,198,255,
255,198,198,255,255,165,173,247,255,0,90,181,255,0,0,0,0,214,165,16,255,247,231,
66,255,247,115,41,255,247,115,41,255,90,66,24,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,181,255,222,222,255,
255,198,198,255,255,0,90,181,255,198,198,255,255,198,198,255,255,198,198,255,
255,132,132,132,255,214,165,16,255,247,231,66,255,247,115,41,255,247,115,41,255,
107,82,33,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,90,181,255,222,222,255,255,198,198,255,255,0,99,206,
255,0,90,181,255,198,198,255,255,198,198,255,255,255,198,107,255,255,247,140,
255,247,115,41,255,247,115,41,255,99,66,8,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,181,255,
222,222,255,255,198,198,255,255,0,99,206,255,0,0,0,0,0,90,181,255,214,214,214,
255,198,181,140,255,255,247,140,255,247,115,41,255,107,82,33,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,90,181,255,222,222,255,255,198,198,255,255,0,90,181,255,0,90,
181,255,0,90,181,255,74,90,123,255,24,41,57,255,123,99,41,255,107,99,82,255,165,
173,247,255,0,90,181,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,181,255,222,222,255,255,198,
198,255,255,198,198,255,255,198,198,255,255,198,198,255,255,49,49,49,255,107,99,
82,255,156,156,156,255,198,198,255,255,198,198,255,255,165,173,247,255,0,90,
181,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,90,181,255,222,222,255,255,165,173,247,255,165,173,247,255,
165,173,247,255,165,173,247,255,165,173,247,255,165,173,247,255,165,173,247,255,
165,173,247,255,165,173,247,255,165,173,247,255,165,173,247,255,0,90,181,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,
0,90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,
0,90,181,255,0,90,181,255,0,90,181,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,231,255,0,115,231,
255,0,115,231,255,0,115,231,255,0,115,231,255,0,115,231,255,0,115,231,255,0,115,
231,255,0,115,231,255,0,115,231,255,0,115,231,255,0,115,231,255,0,115,231,255,0,
115,231,255,0,115,231,255,0,115,231,255,0,115,231,255,0,115,231,255,0,115,231,
255,0,115,231,255,0,115,231,255,0,115,231,255,0,0,0,0,0,0,0,0,0,115,231,255,222,
222,255,255,132,132,132,255,222,222,255,255,222,222,255,255,132,132,132,255,222,
222,255,255,222,222,255,255,132,132,132,255,222,222,255,255,222,222,255,255,132,
132,132,255,222,222,255,255,222,222,255,255,132,132,132,255,222,222,255,255,222,
222,255,255,132,132,132,255,222,222,255,255,222,222,255,255,132,132,132,255,0,
115,231,255,0,0,0,0,0,0,0,0,0,99,206,255,198,198,255,255,198,198,255,255,198,
198,255,255,198,198,255,255,132,132,132,255,198,198,255,255,198,198,255,255,198,
198,255,255,198,198,255,255,198,198,255,255,132,132,132,255,198,198,255,255,198,
198,255,255,198,198,255,255,198,198,255,255,198,198,255,255,132,132,132,255,198,
198,255,255,198,198,255,255,198,198,255,255,0,99,206,255,0,0,0,0,0,0,0,0,0,90,
181,255,165,173,247,255,165,173,247,255,165,173,247,255,165,173,247,255,165,173,
247,255,165,173,247,255,165,173,247,255,165,173,247,255,165,173,247,255,165,173,
247,255,165,173,247,255,165,173,247,255,165,173,247,255,165,173,247,255,165,173,
247,255,165,173,247,255,165,173,247,255,165,173,247,255,165,173,247,255,165,173,
247,255,0,90,181,255,0,0,0,0,0,0,0,0,0,90,181,255,0,90,181,255,0,90,181,255,0,
90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,0,
90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,0,
90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,0,90,181,255,0,
90,181,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_train(idata_train, 24, 24, 4, 0);

Fl_Button *But_Test=(Fl_Button *)0;

static void cb_But_Test(Fl_Button*, void*) {
  ft.Test();
}

static unsigned char idata_test[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,
16,0,255,231,16,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,107,74,255,239,156,41,255,247,115,41,
255,189,57,49,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,181,181,255,181,
181,181,255,181,181,181,255,181,181,181,255,181,181,181,255,181,181,181,255,181,
181,181,255,181,181,181,255,181,181,181,255,181,181,181,255,181,181,181,255,181,
181,181,255,181,181,181,255,181,181,181,255,140,148,156,255,181,206,231,255,123,
99,41,255,247,115,41,255,189,57,49,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
181,181,181,255,214,214,214,255,214,214,214,255,214,214,214,255,214,214,214,255,
214,214,214,255,214,214,214,255,214,214,214,255,214,214,214,255,214,214,214,255,
214,214,214,255,214,214,214,255,214,214,214,255,90,107,132,255,255,255,255,255,
231,239,247,255,82,99,115,255,74,33,33,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,181,181,173,255,222,222,222,255,33,156,239,255,33,156,239,255,33,
156,239,255,33,156,239,255,33,156,239,255,33,156,239,255,33,156,239,255,33,156,
239,255,33,156,239,255,33,156,239,255,214,165,16,255,222,165,66,255,123,132,140,
255,123,132,132,255,49,49,49,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,173,173,173,255,231,231,231,255,33,156,239,255,231,231,231,255,231,
231,231,255,231,231,231,255,33,156,239,255,231,231,231,255,231,231,231,255,231,
231,231,255,33,156,239,255,214,165,16,255,247,231,66,255,247,115,41,255,189,57,
49,255,49,49,49,255,173,173,173,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,173,173,173,255,231,231,231,255,33,156,239,255,231,231,231,255,
231,231,231,255,231,231,231,255,33,156,239,255,231,231,231,255,231,231,231,255,
231,231,231,255,214,165,16,255,247,231,66,255,247,115,41,255,247,115,41,255,99,
66,8,255,231,231,231,255,173,173,173,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,173,173,173,255,239,239,239,255,33,156,239,255,239,239,239,
255,239,239,239,255,239,239,239,255,33,156,239,255,239,239,239,255,239,239,239,
255,214,165,16,255,247,231,66,255,247,115,41,255,247,115,41,255,107,82,33,255,
33,156,239,255,239,239,239,255,173,173,173,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,165,165,165,255,247,247,247,255,33,156,239,255,33,156,
239,255,33,156,239,255,33,156,239,255,33,156,239,255,33,156,239,255,214,165,16,
255,247,231,66,255,247,115,41,255,247,115,41,255,90,66,24,255,33,156,239,255,33,
156,239,255,239,239,239,255,165,165,165,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,165,165,165,255,247,247,247,255,33,156,239,255,247,247,
247,255,247,247,247,255,247,247,247,255,33,156,239,255,214,165,16,255,247,231,
66,255,247,115,41,255,247,115,41,255,107,82,33,255,247,247,247,255,247,247,247,
255,33,156,239,255,247,247,247,255,165,165,165,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,165,165,255,255,255,255,255,90,165,247,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,198,107,255,255,247,140,255,
247,115,41,255,247,115,41,255,99,66,8,255,255,255,255,255,255,255,255,255,255,
255,255,255,90,165,247,255,255,255,255,255,165,165,165,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,156,156,255,255,255,255,255,90,165,
247,255,255,255,255,255,255,255,255,255,214,214,214,255,198,181,140,255,255,247,
140,255,247,115,41,255,107,82,33,255,90,165,247,255,255,255,255,255,255,255,255,
255,255,255,255,255,90,165,247,255,255,255,255,255,156,156,156,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,156,156,255,255,255,255,255,
90,165,247,255,90,165,247,255,90,165,247,255,74,90,123,255,24,41,57,255,123,99,
41,255,107,99,82,255,90,165,247,255,90,165,247,255,90,165,247,255,90,165,247,
255,90,165,247,255,90,165,247,255,255,255,255,255,148,156,156,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,148,148,255,255,255,255,255,107,
181,255,255,255,255,255,255,255,255,255,255,49,49,49,255,57,99,165,255,181,181,
181,255,255,255,255,255,255,255,255,255,107,181,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,107,181,255,255,255,255,255,255,148,148,148,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,148,148,255,255,255,255,
255,107,181,255,255,255,255,255,255,255,255,255,255,255,255,255,255,107,181,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,107,181,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,107,181,255,255,255,255,255,255,148,148,148,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,148,148,255,255,
255,255,255,107,181,255,255,255,255,255,255,255,255,255,255,255,255,255,255,107,
181,255,255,255,255,255,255,255,255,255,255,255,255,255,255,107,181,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,107,181,255,255,255,255,255,255,148,
148,148,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,148,148,
255,255,255,255,255,107,181,255,255,107,181,255,255,107,181,255,255,107,181,255,
255,107,181,255,255,107,181,255,255,107,181,255,255,107,181,255,255,107,181,255,
255,107,181,255,255,107,181,255,255,107,181,255,255,107,181,255,255,255,255,255,
255,148,148,148,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,
140,140,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,140,140,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,107,107,99,255,107,107,99,255,107,107,99,255,107,107,99,255,107,107,99,
255,107,107,99,255,107,107,99,255,107,107,99,255,107,107,99,255,107,107,99,255,
107,107,99,255,107,107,99,255,107,107,99,255,107,107,99,255,107,107,99,255,107,
107,99,255,107,107,99,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0};
static Fl_RGB_Image image_test(idata_test, 24, 24, 4, 0);

Fl_Menu_Button *But_Run=(Fl_Menu_Button *)0;

static void cb_But_Run(Fl_Menu_Button*, void*) {
  if(But_Run->value()==0)
  ft.RunNormal();
else if(But_Run->value()==1)
  ft.RunwithFile();
else if(But_Run->value()==2)
  ft.RunAsTS();
else
  ft.RunAsClassifier();
}

static unsigned char idata_Run[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
198,123,82,255,198,123,82,255,198,123,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,198,123,82,255,255,181,
132,255,255,198,107,255,255,165,82,255,198,123,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,198,123,82,255,255,181,132,255,255,222,
66,255,255,214,16,255,255,181,0,255,255,165,90,255,198,123,82,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,198,123,82,255,255,181,132,255,255,222,
41,255,255,239,0,255,255,222,0,255,255,181,0,255,255,165,0,255,255,181,132,255,
198,123,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,198,123,82,255,198,123,82,255,255,181,
132,255,255,231,24,255,255,247,0,255,255,239,0,255,255,206,0,255,255,173,0,255,
255,165,0,255,255,165,16,255,198,123,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,198,123,82,255,255,
181,132,255,255,214,49,255,255,247,8,255,255,255,0,255,255,255,0,255,255,247,0,
255,255,214,0,255,255,189,0,255,255,181,0,255,247,165,24,255,198,123,82,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,123,
82,255,198,123,82,255,255,181,132,255,255,222,24,255,255,247,8,255,255,255,8,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
247,0,255,255,239,0,255,247,222,24,255,247,222,99,255,198,123,82,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,255,181,107,255,
255,198,8,255,255,231,24,255,255,231,57,255,255,239,74,255,255,247,90,255,255,
247,66,255,255,255,24,255,255,255,8,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,8,255,255,255,33,255,255,214,16,255,198,123,82,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,255,165,57,255,255,198,
0,255,255,222,0,255,255,239,0,255,255,247,0,255,255,247,0,255,255,239,0,255,
255,222,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,33,255,255,239,
57,255,255,198,8,255,255,156,0,255,198,123,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,255,173,49,255,255,198,0,255,255,
222,0,255,255,247,0,255,255,255,0,255,255,247,0,255,255,231,0,255,255,247,0,255,
255,255,0,255,255,255,8,255,255,255,57,255,255,222,41,255,255,181,0,255,255,165,
0,255,255,148,0,255,198,123,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,198,123,82,255,255,173,41,255,255,198,0,255,255,222,0,255,255,
239,0,255,255,247,0,255,255,231,0,255,255,247,0,255,255,255,0,255,255,255,33,
255,255,239,74,255,255,206,24,255,255,173,0,255,255,165,0,255,255,156,0,255,198,
123,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,
123,82,255,198,123,82,255,198,123,82,255,198,123,82,255,198,123,82,255,198,123,
82,255,255,239,0,255,255,255,8,255,255,247,49,255,255,231,57,255,255,189,16,
255,255,173,0,255,255,165,0,255,247,148,8,255,198,123,82,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,198,123,82,255,255,247,8,255,255,247,41,255,255,214,33,255,
255,181,0,255,255,165,0,255,255,165,0,255,198,123,82,255,181,123,74,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,255,231,0,255,255,222,24,255,255,189,
8,255,255,173,0,255,255,165,0,255,255,156,0,255,198,123,82,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,255,214,0,255,255,198,8,255,255,
165,0,255,255,156,0,255,255,156,0,255,247,148,8,255,198,123,82,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,255,198,0,255,255,181,0,255,255,
148,0,255,255,156,0,255,255,156,0,255,239,132,16,255,198,123,82,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,255,181,0,255,255,156,0,255,255,
140,0,255,255,148,0,255,247,148,8,255,198,123,82,255,198,123,82,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,255,156,0,255,255,140,0,255,255,
140,0,255,255,140,0,255,247,132,8,255,198,123,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,255,132,0,255,255,132,0,255,255,132,0,
255,255,132,0,255,239,123,16,255,198,123,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,255,115,0,255,255,123,0,255,247,115,
0,255,214,107,24,255,198,123,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,198,123,82,255,255,115,0,255,247,115,0,255,198,107,41,
255,198,123,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,198,123,82,255,247,115,24,255,198,123,82,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,
123,82,255,198,123,82,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_Run(idata_Run, 24, 24, 4, 0);

static void cb_2(Fl_Button*, void*) {
  ft.ClearLog();
}

static unsigned char idata_clear[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,107,74,255,148,74,57,
255,148,74,57,255,148,74,57,255,148,74,57,255,148,74,57,255,148,74,57,255,148,
74,57,255,148,74,57,255,156,107,74,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,74,57,255,
231,206,173,255,231,206,173,255,231,206,173,255,231,206,173,255,231,206,173,255,
231,206,173,255,231,206,173,255,231,206,173,255,231,206,173,255,231,206,173,255,
148,74,57,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,148,74,57,255,231,206,173,255,231,206,173,255,231,206,
173,255,231,206,173,255,231,206,173,255,231,206,173,255,231,206,173,255,231,206,
173,255,231,206,173,255,231,206,173,255,148,74,57,255,148,74,57,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,74,57,
255,231,206,173,255,231,206,173,255,231,206,173,255,231,206,173,255,231,206,173,
255,231,206,173,255,231,206,173,255,231,206,173,255,231,206,173,255,231,206,173,
255,148,74,57,255,156,107,74,255,148,74,57,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,74,57,255,231,206,173,255,231,206,
173,255,231,206,173,255,231,206,173,255,231,206,173,255,231,206,173,255,231,206,
173,255,231,206,173,255,231,206,173,255,231,206,173,255,148,74,57,255,156,107,
74,255,198,148,123,255,148,74,57,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,148,74,57,255,231,206,173,255,231,206,173,255,231,206,
173,255,231,206,173,255,231,206,173,255,231,206,173,255,231,206,173,255,231,206,
173,255,231,206,173,255,231,206,173,255,148,74,57,255,156,107,74,255,198,148,
123,255,198,148,123,255,148,74,57,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,41,90,156,255,115,165,231,255,115,165,231,255,115,165,231,255,
115,165,231,255,115,165,231,255,115,165,231,255,115,165,231,255,115,165,231,255,
115,165,231,255,115,165,231,255,148,74,57,255,156,107,74,255,198,148,123,255,
198,148,123,255,156,107,74,255,148,74,57,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,41,90,156,255,115,165,231,255,115,165,231,255,115,165,231,255,
115,165,231,255,115,165,231,255,115,165,231,255,115,165,231,255,115,165,231,255,
115,165,231,255,115,165,231,255,41,90,156,255,156,107,74,255,198,148,123,255,
198,148,123,255,156,107,74,255,148,74,57,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,41,90,156,255,115,165,231,255,115,165,231,255,115,165,231,255,
115,165,231,255,115,165,231,255,115,165,231,255,115,165,231,255,115,165,231,255,
115,165,231,255,115,165,231,255,41,90,156,255,41,115,181,255,198,148,123,255,
198,148,123,255,156,107,74,255,148,74,57,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,41,90,156,255,115,165,231,255,115,165,231,255,115,165,231,255,
115,165,231,255,115,165,231,255,115,165,231,255,115,165,231,255,115,165,231,255,
115,165,231,255,115,165,231,255,41,90,156,255,41,115,181,255,41,115,181,255,198,
148,123,255,156,107,74,255,148,74,57,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,41,90,156,255,181,206,231,255,181,206,231,255,181,206,231,255,181,
206,231,255,181,206,231,255,181,206,231,255,214,231,247,255,214,231,247,255,231,
231,231,255,181,206,231,255,41,90,156,255,41,115,181,255,41,115,181,255,41,115,
181,255,156,107,74,255,148,74,57,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,41,90,156,255,148,148,148,255,181,206,231,255,115,156,222,255,115,156,
222,255,115,156,222,255,115,156,222,255,115,156,222,255,115,156,222,255,115,156,
222,255,214,231,247,255,148,148,148,255,41,90,156,255,41,115,181,255,41,115,181,
255,41,115,181,255,148,74,57,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,41,90,156,255,181,206,231,255,74,123,189,255,74,123,189,255,74,123,
189,255,74,123,189,255,74,123,189,255,74,123,189,255,74,123,189,255,74,123,189,
255,214,231,247,255,41,90,156,255,41,115,181,255,41,115,181,255,41,115,181,255,
41,90,156,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
41,90,156,255,181,206,231,255,74,123,189,255,74,123,189,255,74,123,189,255,74,
123,189,255,74,123,189,255,74,123,189,255,74,123,189,255,74,123,189,255,214,231,
247,255,41,90,156,255,41,115,181,255,41,115,181,255,41,90,156,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,90,156,255,181,
206,231,255,41,115,181,255,41,115,181,255,41,115,181,255,41,115,181,255,41,115,
181,255,41,115,181,255,41,115,181,255,41,115,181,255,214,231,247,255,41,90,156,
255,41,115,181,255,41,90,156,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,90,156,255,41,90,156,255,41,90,156,255,
41,90,156,255,41,90,156,255,41,90,156,255,41,90,156,255,41,90,156,255,41,90,
156,255,41,90,156,255,41,90,156,255,41,90,156,255,41,90,156,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0};
static Fl_RGB_Image image_clear(idata_clear, 24, 24, 4, 0);

static void cb_3(Fl_Button*, void*) {
  ft.SaveLog();
}

static unsigned char idata_save[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,66,173,255,
156,156,206,255,206,206,198,255,198,198,198,255,198,198,198,255,198,198,198,255,
198,198,198,255,198,198,198,255,198,198,198,255,198,198,198,255,198,198,198,255,
198,198,198,255,198,198,198,255,198,198,198,255,198,198,198,255,198,198,198,255,
198,198,198,255,140,140,198,255,82,82,181,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
115,132,181,255,66,66,173,255,165,165,206,255,255,255,255,255,247,247,255,255,
247,247,255,255,247,247,255,255,247,247,255,255,247,247,255,255,247,247,255,255,
247,247,255,255,247,247,255,255,247,247,255,255,247,247,255,255,247,247,255,255,
247,247,255,255,247,247,255,255,231,231,239,255,140,140,206,255,90,90,198,255,
74,74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,115,132,181,255,66,66,173,255,165,165,
206,255,255,255,255,255,231,231,231,255,206,206,206,255,206,206,214,255,206,206,
214,255,206,206,214,255,206,206,214,255,206,206,214,255,206,206,214,255,206,206,
214,255,206,206,214,255,206,206,214,255,206,206,206,255,231,231,231,255,231,231,
239,255,140,140,206,255,90,90,189,255,74,74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,115,
132,181,255,66,66,173,255,165,165,206,255,255,255,255,255,231,239,239,255,222,
222,231,255,222,222,231,255,222,222,231,255,222,222,231,255,222,222,231,255,222,
222,231,255,222,222,231,255,222,222,231,255,222,222,231,255,222,222,231,255,222,
222,231,255,239,239,239,255,231,231,239,255,140,140,206,255,90,90,189,255,74,74,
156,255,0,0,0,0,0,0,0,0,0,0,0,0,115,132,181,255,66,66,173,255,165,165,206,255,
255,255,255,255,231,239,239,255,222,222,231,255,222,222,231,255,222,222,231,255,
222,222,231,255,222,222,231,255,222,222,231,255,222,222,231,255,222,222,231,255,
222,222,231,255,222,222,231,255,222,222,231,255,239,239,239,255,231,231,239,255,
140,140,206,255,90,90,189,255,74,74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,115,132,181,
255,66,66,173,255,165,165,206,255,255,255,255,255,231,231,239,255,206,206,214,
255,206,206,214,255,206,206,214,255,206,206,214,255,206,206,214,255,206,206,214,
255,206,206,214,255,206,206,214,255,206,206,214,255,206,206,214,255,206,206,206,
255,231,231,231,255,231,231,239,255,140,140,206,255,90,90,189,255,74,74,156,255,
0,0,0,0,0,0,0,0,0,0,0,0,115,132,181,255,66,66,173,255,165,165,206,255,255,255,
255,255,239,239,247,255,231,231,239,255,231,231,239,255,231,231,239,255,231,231,
239,255,231,231,239,255,231,231,239,255,231,231,239,255,231,231,239,255,231,231,
239,255,231,231,239,255,231,231,239,255,239,239,247,255,231,231,239,255,140,140,
206,255,90,90,189,255,74,74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,115,132,181,255,66,
66,173,255,165,165,206,255,255,255,255,255,231,231,231,255,198,198,206,255,206,
206,206,255,206,206,206,255,206,206,206,255,206,206,206,255,206,206,206,255,206,
206,206,255,206,206,206,255,206,206,206,255,206,206,206,255,198,198,198,255,222,
222,231,255,231,231,239,255,140,140,206,255,90,90,189,255,74,74,156,255,0,0,0,0,
0,0,0,0,0,0,0,0,115,132,181,255,66,66,173,255,165,165,206,255,255,255,255,255,
239,239,247,255,239,239,247,255,239,239,247,255,239,239,247,255,239,239,247,255,
239,239,247,255,239,239,247,255,239,239,247,255,239,239,247,255,239,239,247,255,
239,239,247,255,239,239,247,255,247,247,247,255,231,231,239,255,140,140,206,255,
90,90,189,255,74,74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,115,132,181,255,66,66,173,
255,165,165,206,255,255,255,255,255,247,247,247,255,247,247,247,255,247,247,247,
255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,
255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,255,
255,231,231,239,255,140,140,206,255,90,90,189,255,74,74,156,255,0,0,0,0,0,0,0,0,
0,0,0,0,115,132,181,255,66,66,173,255,156,156,206,255,239,247,247,255,239,239,
247,255,239,239,247,255,239,239,247,255,239,239,247,255,239,239,247,255,239,239,
247,255,239,239,247,255,239,239,247,255,239,239,247,255,239,239,247,255,239,239,
247,255,239,239,247,255,239,239,247,255,231,231,239,255,140,140,206,255,90,90,
198,255,74,74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,115,132,181,255,74,74,173,255,66,
74,165,255,107,107,181,255,140,140,198,255,173,173,206,255,189,189,214,255,189,
189,214,255,189,189,214,255,189,189,214,255,189,189,214,255,189,189,214,255,189,
189,214,255,189,189,214,255,189,189,214,255,189,189,214,255,189,189,214,255,198,
198,222,255,140,140,206,255,99,99,206,255,74,74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,
115,132,181,255,107,107,198,255,90,90,189,255,99,99,198,255,107,107,198,255,115,
115,206,255,115,115,206,255,115,115,206,255,115,115,206,255,115,115,206,255,115,
115,206,255,115,115,206,255,115,115,206,255,115,115,206,255,115,115,206,255,115,
115,206,255,115,115,206,255,123,123,206,255,107,107,206,255,99,99,206,255,74,74,
156,255,0,0,0,0,0,0,0,0,0,0,0,0,115,132,181,255,107,107,198,255,99,99,206,255,
99,99,206,255,99,99,206,255,99,99,206,255,99,99,206,255,99,99,206,255,99,99,
206,255,99,99,206,255,99,99,206,255,99,99,206,255,99,99,198,255,99,99,198,255,
99,99,198,255,99,99,206,255,99,99,206,255,99,99,206,255,99,99,206,255,99,99,
206,255,74,74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,115,132,181,255,107,107,198,255,
99,99,206,255,99,99,206,255,90,90,189,255,115,115,181,255,165,165,214,255,156,
156,198,255,156,156,189,255,148,148,189,255,140,140,173,255,140,140,173,255,156,
156,198,255,173,173,214,255,198,198,231,255,115,115,198,255,66,66,165,255,66,66,
173,255,74,74,173,255,99,99,198,255,74,74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,115,
132,181,255,107,107,198,255,99,99,206,255,99,99,206,255,82,82,181,255,123,123,
173,255,173,173,198,255,99,99,165,255,99,99,165,255,99,99,156,255,156,156,156,
255,181,181,181,255,214,214,214,255,239,239,239,255,255,255,255,255,132,132,198,
255,41,41,148,255,49,49,148,255,57,57,156,255,90,90,189,255,74,74,156,255,0,0,0,
0,0,0,0,0,0,0,0,0,115,132,181,255,107,107,198,255,99,99,206,255,99,99,206,255,
82,82,181,255,123,123,173,255,140,140,181,255,41,41,148,255,41,41,148,255,49,
49,148,255,165,165,173,255,206,206,206,255,222,231,231,255,239,239,247,255,255,
255,255,255,132,132,198,255,41,41,148,255,49,49,148,255,57,57,156,255,90,90,198,
255,74,74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,115,132,181,255,107,107,198,255,99,99,
206,255,99,99,206,255,90,90,189,255,115,115,165,255,140,140,173,255,49,49,148,
255,49,49,148,255,74,74,156,255,198,198,198,255,222,231,231,255,239,239,239,255,
247,247,255,255,255,255,255,255,123,123,198,255,41,41,148,255,49,49,148,255,57,
57,156,255,90,90,198,255,74,74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,115,132,181,255,
107,107,198,255,99,99,206,255,99,99,206,255,90,90,189,255,115,115,165,255,132,
132,165,255,49,49,148,255,66,66,156,255,115,115,181,255,214,222,222,255,239,239,
239,255,247,247,247,255,247,247,255,255,247,247,247,255,123,123,189,255,41,41,
148,255,49,49,148,255,57,57,156,255,90,90,198,255,74,74,156,255,0,0,0,0,0,0,0,0,
0,0,0,0,115,132,181,255,107,107,198,255,99,99,206,255,99,99,206,255,90,90,189,
255,115,115,156,255,123,123,165,255,57,57,156,255,107,115,181,255,156,156,198,
255,231,231,239,255,247,247,247,255,247,247,255,255,239,247,247,255,239,239,239,
255,123,123,189,255,41,41,148,255,49,49,148,255,57,57,156,255,90,90,198,255,74,
74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,115,132,181,255,107,107,198,255,99,99,206,
255,99,99,206,255,90,90,189,255,107,107,156,255,140,140,165,255,132,132,181,255,
173,173,206,255,206,206,222,255,239,247,247,255,247,255,255,255,247,247,247,255,
231,239,239,255,231,231,231,255,115,115,181,255,41,41,148,255,49,49,148,255,57,
57,156,255,90,90,198,255,74,74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,107,
198,255,99,99,198,255,99,99,206,255,82,82,181,255,107,107,156,255,181,181,181,
255,181,181,181,255,181,181,181,255,181,181,181,255,181,181,181,255,181,181,181,
255,181,181,181,255,181,181,181,255,181,181,181,255,115,115,181,255,41,41,148,
255,49,49,148,255,57,57,156,255,74,74,156,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_save(idata_save, 24, 24, 4, 0);

Fl_Button *Stop=(Fl_Button *)0;

static void cb_Stop(Fl_Button*, void*) {
  ft.StopProcess();
}

static unsigned char idata_stop[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,181,231,
255,132,173,222,255,132,173,222,255,132,173,222,255,132,173,222,255,132,173,222,
255,132,173,222,255,132,173,222,255,132,173,222,255,132,173,222,255,132,173,222,
255,132,173,222,255,132,173,222,255,132,173,222,255,115,132,181,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,181,231,255,
255,255,255,255,255,255,255,255,255,255,255,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,239,239,239,255,239,239,239,255,
239,239,239,255,231,239,239,255,231,239,239,255,115,132,181,255,132,165,214,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,181,231,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,247,255,255,
255,247,255,255,255,239,247,255,255,239,247,255,255,115,132,181,255,132,173,231,
255,132,156,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,
173,222,255,247,247,247,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,247,255,255,255,247,
255,255,255,239,247,255,255,239,247,255,255,239,247,255,255,115,132,181,255,90,
189,255,255,107,165,231,255,132,156,206,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,140,173,222,255,247,247,247,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,247,255,255,255,
247,255,255,255,239,247,255,255,239,247,255,255,231,247,255,255,231,247,255,255,
115,132,181,255,115,132,181,255,115,132,181,255,115,132,181,255,90,90,140,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,173,222,255,247,247,247,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,247,255,
255,255,247,255,255,255,239,247,255,255,239,247,255,255,231,247,255,255,231,239,
255,255,231,239,255,255,173,198,231,255,156,165,231,255,148,156,231,255,140,156,
231,255,90,90,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,165,214,255,
247,247,247,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
247,255,255,255,247,255,255,255,239,247,255,255,239,247,255,255,231,247,255,255,
231,239,255,255,222,239,255,255,222,239,255,255,214,231,255,255,189,189,255,255,
173,173,255,255,165,165,255,255,90,90,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,132,165,214,255,239,239,239,255,255,255,255,255,255,255,255,255,255,255,
255,255,247,255,255,255,255,214,206,255,239,247,255,255,239,247,255,255,231,247,
255,255,231,239,255,255,231,222,222,255,222,239,255,255,222,239,255,255,214,239,
255,255,214,231,255,255,206,231,255,255,181,189,255,255,90,90,140,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,156,206,255,239,239,239,255,255,255,255,255,
255,255,255,255,247,255,255,255,247,173,156,255,255,49,0,255,247,123,99,255,231,
247,255,255,231,239,255,255,239,206,206,255,255,66,16,255,239,123,99,255,214,
239,255,255,214,231,255,255,206,231,255,255,206,231,255,255,198,198,255,255,90,
90,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,156,206,255,239,239,239,
255,255,255,255,255,247,255,255,255,255,231,222,255,255,49,0,255,255,49,0,255,
255,49,0,255,247,123,99,255,239,206,206,255,255,66,16,255,255,49,0,255,255,49,0,
255,231,156,140,255,206,231,255,255,206,231,255,255,206,231,255,255,198,206,255,
255,90,90,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,148,198,255,239,
239,239,255,247,255,255,255,247,255,255,255,239,247,255,255,247,173,156,255,255,
49,0,255,255,49,0,255,255,49,0,255,255,49,0,255,255,49,0,255,255,49,0,255,247,
82,49,255,214,222,239,255,206,231,255,255,198,231,255,255,198,231,255,255,198,
206,255,255,90,90,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,148,198,
255,231,231,231,255,247,255,255,255,239,247,255,255,239,247,255,255,231,247,255,
255,239,173,156,255,255,49,0,255,255,49,0,255,255,49,0,255,255,49,0,255,247,82,
49,255,214,222,239,255,206,231,255,255,198,231,255,255,198,231,255,255,189,222,
255,255,198,206,255,255,90,90,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
132,148,198,255,231,231,231,255,239,247,255,255,239,247,255,255,231,247,255,255,
231,239,255,255,239,198,189,255,255,66,16,255,255,49,0,255,255,49,0,255,255,49,
0,255,239,123,99,255,206,231,255,255,198,231,255,255,198,231,255,255,189,222,
255,255,189,222,255,255,198,206,255,255,90,90,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,123,140,189,255,231,231,231,255,239,247,255,255,231,247,255,255,
231,239,255,255,239,165,156,255,255,49,0,255,255,49,0,255,255,49,0,255,255,49,0,
255,255,49,0,255,255,49,0,255,231,115,99,255,198,231,255,255,189,222,255,255,
189,222,255,255,189,222,255,255,198,206,255,255,90,90,140,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,123,140,181,255,222,231,231,255,231,247,255,255,231,239,
255,255,231,222,222,255,255,49,0,255,255,49,0,255,255,49,0,255,247,82,49,255,
231,156,140,255,255,49,0,255,255,49,0,255,255,49,0,255,222,156,156,255,189,222,
255,255,189,222,255,255,181,222,255,255,198,206,255,255,90,90,140,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,132,181,255,222,222,231,255,231,239,255,255,
222,239,255,255,222,239,255,255,239,165,156,255,255,49,0,255,247,82,49,255,214,
222,239,255,206,231,255,255,222,165,156,255,255,49,0,255,231,115,99,255,189,222,
255,255,189,222,255,255,181,222,255,255,181,222,255,255,198,206,255,255,90,90,
140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,132,181,255,214,222,222,255,
222,239,255,255,222,239,255,255,222,239,255,255,214,239,255,255,231,181,173,255,
214,222,239,255,206,231,255,255,198,231,255,255,198,231,255,255,206,198,206,255,
189,222,255,255,189,222,255,255,181,222,255,255,181,222,255,255,173,214,255,255,
198,206,255,255,90,90,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,132,
173,255,214,214,222,255,222,239,255,255,222,239,255,255,214,239,255,255,214,231,
255,255,206,231,255,255,206,231,255,255,198,231,255,255,198,231,255,255,189,222,
255,255,189,222,255,255,189,222,255,255,181,222,255,255,181,222,255,255,173,214,
255,255,173,214,255,255,198,206,255,255,90,90,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,123,132,173,255,214,214,222,255,222,239,255,255,214,239,255,255,
214,231,255,255,206,231,255,255,206,231,255,255,198,231,255,255,198,231,255,255,
189,222,255,255,189,222,255,255,189,222,255,255,181,222,255,255,181,222,255,255,
173,214,255,255,173,214,255,255,165,214,255,255,198,206,255,255,90,90,140,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,123,165,255,206,214,222,255,214,239,
255,255,214,231,255,255,206,231,255,255,206,231,255,255,198,231,255,255,198,231,
255,255,189,222,255,255,189,222,255,255,189,222,255,255,181,222,255,255,181,222,
255,255,173,214,255,255,173,214,255,255,165,214,255,255,165,214,255,255,198,206,
255,255,90,90,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,123,165,255,
206,214,222,255,214,231,255,255,206,231,255,255,206,231,255,255,198,231,255,255,
198,231,255,255,189,222,255,255,189,222,255,255,189,222,255,255,181,222,255,255,
181,222,255,255,173,214,255,255,173,214,255,255,165,214,255,255,165,214,255,255,
165,214,255,255,198,206,255,255,90,90,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,115,123,165,255,189,189,231,255,181,189,239,255,181,189,239,255,181,189,
239,255,181,189,239,255,181,189,239,255,181,189,239,255,181,181,239,255,181,181,
239,255,181,181,231,255,181,181,231,255,181,181,231,255,181,181,231,255,181,181,
231,255,181,181,231,255,181,181,231,255,148,181,231,255,90,90,140,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,123,165,255,115,123,165,255,115,123,165,255,
115,123,165,255,115,123,165,255,115,123,165,255,115,123,165,255,115,123,165,255,
115,123,165,255,115,123,165,255,115,123,165,255,115,123,165,255,115,123,165,255,
115,123,165,255,115,123,165,255,115,123,165,255,115,123,165,255,115,123,165,255,
90,90,140,255,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_stop(idata_stop, 24, 24, 4, 0);

static void cb_4(Fl_Button*, void*) {
  ft.LoadLog();
}

static unsigned char idata_load[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,115,8,255,16,115,
8,255,8,115,8,255,8,115,8,255,8,115,8,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,115,8,255,8,115,8,255,24,132,16,255,24,148,8,
255,24,148,8,255,24,148,8,255,16,123,8,255,8,115,8,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,165,24,255,214,165,33,255,214,165,
33,255,214,173,41,255,214,173,41,255,214,165,33,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,16,132,8,255,24,156,8,255,24,165,8,255,16,140,8,255,8,
115,8,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,165,33,255,239,
214,132,255,247,231,148,255,247,231,148,255,255,239,156,255,255,247,165,255,231,
206,90,255,214,165,16,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,115,
8,255,24,156,8,255,33,173,16,255,16,132,8,255,8,115,8,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,214,165,24,255,231,206,123,255,255,255,181,255,255,255,148,255,
255,255,148,255,255,247,148,255,255,247,148,255,255,239,132,255,222,173,49,255,
222,173,49,255,222,181,57,255,222,181,66,255,222,181,66,255,222,189,74,255,222,
189,74,255,231,189,90,255,16,132,8,255,33,173,16,255,24,156,8,255,8,115,8,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,173,41,255,255,247,181,255,255,255,148,255,
255,247,148,255,255,247,148,255,255,247,148,255,255,247,148,255,255,247,148,255,
255,239,156,255,255,239,156,255,255,239,156,255,255,239,156,255,255,239,156,255,
255,239,156,255,255,239,156,255,255,247,156,255,16,115,8,255,41,173,24,255,33,
173,16,255,8,115,8,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,173,41,255,255,247,
165,255,255,255,148,255,255,247,148,255,255,247,148,255,255,247,148,255,255,247,
148,255,255,247,148,255,255,247,140,255,255,247,140,255,255,247,140,255,255,239,
140,255,255,247,148,255,255,239,140,255,255,239,123,255,255,239,132,255,8,115,8,
255,57,173,33,255,57,189,33,255,8,115,8,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,
173,41,255,255,247,156,255,255,255,148,255,255,247,148,255,255,247,148,255,255,
247,148,255,255,247,148,255,255,247,148,255,255,247,140,255,255,247,140,255,255,
247,148,255,255,239,140,255,239,214,90,255,8,115,8,255,8,115,8,255,8,115,8,255,
16,115,8,255,74,189,49,255,74,189,49,255,8,115,8,255,8,115,8,255,8,115,8,255,8,
115,8,255,0,0,0,0,214,173,41,255,255,239,156,255,255,255,148,255,255,247,148,
255,255,247,148,255,255,247,148,255,255,247,148,255,255,247,148,255,255,247,148,
255,255,247,148,255,247,231,123,255,231,189,66,255,231,206,123,255,8,115,8,255,
49,173,33,255,82,173,49,255,90,189,57,255,107,206,66,255,90,198,57,255,74,189,
41,255,49,173,33,255,49,173,33,255,8,115,0,255,0,0,0,0,214,173,41,255,255,239,
156,255,255,255,148,255,255,247,148,255,255,255,156,255,255,255,148,255,255,247,
148,255,255,239,140,255,255,239,132,255,239,214,99,255,222,181,66,255,247,222,
173,255,255,247,198,255,255,247,148,255,8,115,8,255,74,173,41,255,148,239,90,
255,132,222,82,255,107,214,74,255,49,173,33,255,57,173,33,255,8,115,8,255,0,0,0,
0,0,0,0,0,214,173,41,255,255,239,156,255,255,255,148,255,255,247,148,255,239,
214,99,255,231,206,82,255,231,198,90,255,231,198,99,255,231,198,99,255,231,198,
115,255,247,231,189,255,255,247,181,255,255,239,132,255,255,239,140,255,255,239,
140,255,0,107,0,255,82,173,49,255,140,231,90,255,140,231,90,255,90,189,57,255,
16,115,8,255,0,0,0,0,0,0,0,0,0,0,0,0,214,173,41,255,247,239,148,255,255,255,
156,255,239,214,90,255,231,189,99,255,247,231,189,255,247,239,189,255,255,247,
198,255,255,247,198,255,255,255,189,255,255,247,156,255,255,239,132,255,255,239,
140,255,255,239,140,255,255,239,140,255,255,239,140,255,8,115,8,255,99,189,57,
255,123,214,74,255,24,132,16,255,214,165,24,255,0,0,0,0,0,0,0,0,0,0,0,0,214,173,
41,255,247,239,148,255,255,247,140,255,222,189,74,255,255,247,206,255,255,255,
165,255,255,247,148,255,255,247,140,255,255,247,140,255,255,247,140,255,255,239,
140,255,255,239,140,255,255,239,140,255,255,239,140,255,255,239,140,255,255,239,
140,255,247,222,115,255,16,123,8,255,24,132,16,255,231,198,74,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,214,173,41,255,255,239,156,255,239,222,99,255,239,206,140,
255,255,255,189,255,255,247,140,255,255,247,148,255,255,247,148,255,255,247,140,
255,255,247,140,255,255,239,140,255,255,239,140,255,255,239,140,255,255,239,140,
255,255,239,140,255,255,239,140,255,247,222,115,255,247,222,115,255,255,239,140,
255,214,173,41,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,173,41,255,247,239,148,
255,231,206,82,255,247,231,189,255,255,255,156,255,255,247,148,255,255,247,148,
255,255,247,148,255,255,247,140,255,255,247,140,255,255,239,140,255,255,239,140,
255,255,239,140,255,255,239,140,255,255,239,140,255,255,239,140,255,247,222,115,
255,255,222,115,255,239,214,99,255,214,165,24,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,214,173,41,255,247,231,123,255,231,198,99,255,255,247,198,255,255,247,140,
255,255,247,148,255,255,247,148,255,255,247,148,255,255,247,140,255,255,247,140,
255,255,239,140,255,255,239,140,255,255,239,140,255,255,239,140,255,255,239,140,
255,255,239,140,255,247,231,123,255,247,222,115,255,222,189,57,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,173,41,255,231,198,90,255,239,214,148,255,255,
255,181,255,255,247,140,255,255,247,148,255,255,247,148,255,255,247,148,255,255,
247,140,255,255,247,140,255,255,239,140,255,255,239,140,255,255,239,140,255,255,
239,140,255,255,239,140,255,255,239,140,255,255,231,132,255,239,206,90,255,214,
165,33,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,165,33,255,222,181,66,
255,247,239,189,255,255,255,156,255,255,247,148,255,255,247,148,255,255,247,148,
255,255,247,148,255,255,247,140,255,255,247,140,255,255,247,140,255,255,247,148,
255,255,247,148,255,255,239,140,255,255,239,140,255,255,231,132,255,239,214,99,
255,222,173,49,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,165,16,
255,231,189,99,255,255,255,206,255,255,247,140,255,255,247,148,255,255,247,148,
255,255,247,148,255,255,247,148,255,255,247,148,255,255,247,140,255,255,239,140,
255,247,222,115,255,239,206,90,255,231,198,74,255,222,181,49,255,214,165,33,255,
214,165,24,255,214,165,24,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
214,165,24,255,247,222,173,255,255,255,181,255,255,255,156,255,255,247,148,255,
255,239,140,255,247,231,123,255,247,214,107,255,231,198,82,255,222,181,66,255,
214,173,41,255,214,165,33,255,214,165,24,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,165,33,255,214,165,
33,255,214,165,33,255,231,198,90,255,231,189,66,255,214,173,41,255,214,165,33,
255,214,165,24,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_load(idata_load, 24, 24, 4, 0);

static void cb_5(Fl_Button*, void*) {
  ft.About();
}

static unsigned char idata_Help[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,
222,156,255,255,231,115,255,255,231,115,255,255,231,115,255,255,231,115,255,255,
231,115,255,255,231,115,255,255,231,115,255,255,231,115,255,255,231,115,255,255,
231,115,255,255,231,115,255,255,231,115,255,255,231,115,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,222,99,255,255,222,99,
255,255,247,148,255,255,247,148,255,255,247,148,255,255,247,148,255,255,247,148,
255,255,247,148,255,255,247,148,255,255,247,148,255,255,247,148,255,255,247,148,
255,255,247,148,255,255,247,148,255,255,222,99,255,247,181,66,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,214,140,255,255,222,99,255,255,
247,148,255,255,247,148,255,255,247,148,255,255,247,148,255,255,247,148,255,165,
156,132,255,132,132,99,255,123,115,115,255,165,156,132,255,247,214,140,255,255,
247,148,255,255,247,148,255,255,247,148,255,255,247,148,255,255,222,99,255,247,
181,66,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,198,90,255,255,
247,148,255,255,247,148,255,255,247,148,255,255,247,148,255,255,247,148,255,82,
82,82,255,74,74,74,255,165,156,132,255,214,189,132,255,82,82,82,255,82,82,82,
255,231,198,165,255,255,247,148,255,255,247,148,255,255,247,148,255,255,247,148,
255,247,181,66,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,198,90,
255,255,247,148,255,255,239,181,255,255,239,181,255,255,239,181,255,214,189,132,
255,66,66,66,255,66,66,66,255,165,156,132,255,255,239,181,255,107,107,74,255,66,
66,66,255,132,132,99,255,255,239,181,255,255,239,181,255,255,239,181,255,255,
239,181,255,247,181,66,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,
181,66,255,255,247,148,255,255,239,181,255,255,239,181,255,255,239,181,255,255,
239,181,255,165,156,132,255,148,148,115,255,255,239,181,255,255,239,181,255,90,
90,90,255,57,57,57,255,107,107,74,255,255,239,181,255,255,239,181,255,255,239,
181,255,255,239,181,255,247,181,66,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,247,181,66,255,255,247,148,255,255,239,181,255,255,239,181,255,255,
239,181,255,255,239,181,255,255,239,181,255,255,239,181,255,214,189,132,255,99,
99,99,255,57,57,57,255,57,57,57,255,148,148,115,255,255,239,181,255,255,239,
181,255,255,239,181,255,255,239,181,255,214,165,57,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,214,165,57,255,247,222,181,255,255,239,181,255,255,
239,181,255,255,239,181,255,255,239,181,255,255,239,181,255,255,239,181,255,99,
99,99,255,41,41,41,255,41,41,41,255,90,90,90,255,255,239,181,255,255,239,181,
255,255,239,181,255,255,239,181,255,255,239,181,255,214,165,57,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,181,90,255,247,222,181,255,255,247,
206,255,255,247,206,255,255,247,206,255,255,247,206,255,255,247,206,255,255,247,
206,255,99,99,99,255,107,107,107,255,173,173,156,255,255,239,181,255,255,247,
206,255,255,247,206,255,255,247,206,255,255,247,206,255,255,247,206,255,214,165,
57,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,165,57,255,247,222,
181,255,255,247,206,255,255,247,206,255,255,247,206,255,255,247,206,255,255,247,
206,255,255,247,206,255,132,132,99,255,255,247,206,255,255,247,206,255,255,247,
206,255,255,247,206,255,255,247,206,255,255,247,206,255,255,247,206,255,255,247,
206,255,214,165,57,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,156,
74,255,247,222,181,255,255,247,206,255,255,247,206,255,255,247,206,255,255,247,
206,255,255,247,206,255,148,148,115,255,33,33,33,255,90,90,90,255,255,247,206,
255,255,247,206,255,255,247,206,255,255,247,206,255,255,247,206,255,255,247,206,
255,255,247,206,255,189,140,41,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,189,140,41,255,247,222,181,255,255,255,231,255,255,255,231,255,255,255,
231,255,255,255,231,255,255,255,231,255,82,82,82,255,33,33,33,255,33,33,33,255,
247,231,198,255,255,255,231,255,255,255,231,255,255,255,231,255,255,255,231,255,
255,255,231,255,255,255,231,255,189,140,41,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,189,140,41,255,231,181,90,255,255,255,231,255,255,255,231,255,
255,255,231,255,255,255,231,255,255,255,231,255,173,173,156,255,82,82,82,255,
123,123,123,255,255,255,231,255,255,255,231,255,255,255,231,255,255,255,231,255,
255,255,231,255,255,255,231,255,231,198,165,255,214,165,57,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,140,41,255,231,181,90,255,247,222,
181,255,247,222,181,255,247,222,181,255,247,222,181,255,247,222,181,255,247,222,
181,255,247,222,181,255,247,222,181,255,255,255,231,255,255,255,231,255,255,239,
222,255,247,222,181,255,231,181,90,255,189,140,41,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,140,41,255,214,165,57,255,
214,165,57,255,214,165,57,255,214,165,57,255,214,165,57,255,214,165,57,255,214,
165,57,255,189,140,41,255,214,189,132,255,255,255,247,255,214,189,132,255,189,
140,41,255,214,165,57,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,214,189,132,255,181,115,8,255,247,231,198,255,214,189,132,255,214,
189,132,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,214,189,132,255,189,140,41,255,214,189,132,255,214,189,132,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,189,140,41,255,181,115,8,255,198,173,156,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
189,140,41,255,214,189,132,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,140,41,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0};
static Fl_RGB_Image image_Help(idata_Help, 24, 24, 4, 0);

static void cb_6(Fl_Button*, void*) {
  ft.DataProcessing();
}

static unsigned char idata_Data[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,123,132,140,255,123,115,123,255,115,115,115,255,115,107,115,255,123,
115,115,255,107,115,107,255,115,115,115,255,115,115,115,255,115,115,115,255,115,
115,115,255,123,123,123,255,123,123,123,255,132,132,132,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,82,74,255,107,115,107,
255,181,173,173,255,140,140,140,255,148,148,148,255,148,165,156,255,165,165,165,
255,173,173,173,255,165,165,165,255,165,165,165,255,173,173,173,255,173,173,173,
255,165,165,165,255,156,156,156,255,140,140,140,255,123,123,123,255,156,156,156,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,66,66,255,107,99,
99,255,165,165,165,255,115,123,115,255,99,82,90,255,82,82,82,255,99,99,99,255,
99,90,99,255,99,99,99,255,99,99,99,255,107,107,107,255,123,123,123,255,123,123,
123,255,132,132,132,255,132,132,132,255,132,132,132,255,173,173,173,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,66,82,255,99,99,107,255,
165,165,165,255,115,115,115,255,90,99,107,255,107,90,99,255,107,115,107,255,140,
140,132,255,148,148,148,255,173,173,173,255,189,189,189,255,206,206,206,255,189,
189,189,255,165,165,165,255,165,165,165,255,140,140,140,255,173,173,173,255,231,
16,0,255,231,16,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,66,82,255,99,
99,107,255,214,222,231,255,140,132,140,255,99,90,90,255,90,99,99,255,107,115,
107,255,140,140,132,255,156,156,156,255,173,173,173,255,198,198,198,255,206,206,
206,255,189,189,189,255,173,173,173,255,165,165,165,255,148,148,148,255,156,107,
74,255,239,156,41,255,247,115,41,255,189,57,49,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,74,66,82,255,99,99,107,255,214,222,231,255,140,132,140,255,90,99,90,255,
90,99,99,255,115,115,115,255,140,140,132,255,156,156,156,255,181,181,181,255,
198,198,198,255,206,206,206,255,189,189,189,255,173,173,173,255,165,165,165,255,
140,148,156,255,181,206,231,255,123,99,41,255,247,115,41,255,189,57,49,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,66,82,255,99,99,107,255,214,222,231,255,140,
132,140,255,90,99,99,255,99,99,107,255,115,115,115,255,140,140,140,255,165,165,
165,255,173,173,173,255,198,198,198,255,206,206,206,255,198,198,198,255,181,181,
181,255,90,107,132,255,255,255,255,255,231,239,247,255,82,99,115,255,74,33,33,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,66,82,255,99,99,107,255,165,165,
165,255,115,115,115,255,82,99,90,255,99,99,99,255,115,115,115,255,140,140,140,
255,165,165,165,255,181,181,181,255,198,198,198,255,206,206,206,255,181,181,181,
255,214,165,16,255,222,165,66,255,123,132,140,255,123,132,132,255,49,49,49,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,66,82,255,99,99,107,255,
206,206,206,255,115,115,132,255,99,82,82,255,90,90,90,255,82,82,82,255,90,90,90,
255,90,90,90,255,90,90,90,255,107,107,107,255,132,132,132,255,214,165,16,255,
247,231,66,255,247,115,41,255,189,57,49,255,49,49,49,255,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,66,66,255,115,107,99,255,222,222,222,255,
140,132,140,255,99,99,90,255,99,99,99,255,123,123,123,255,140,140,140,255,165,
165,165,255,181,181,181,255,206,206,206,255,214,165,16,255,247,231,66,255,247,
115,41,255,247,115,41,255,99,66,8,255,181,181,181,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,66,66,255,115,115,107,255,214,214,214,255,
140,132,140,255,90,99,90,255,107,99,99,255,115,115,123,255,140,140,140,255,165,
165,165,255,181,181,181,255,214,165,16,255,247,231,66,255,247,115,41,255,247,
115,41,255,107,82,33,255,156,156,156,255,181,181,181,255,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,66,74,255,99,107,107,255,214,222,231,255,
140,132,140,255,90,99,99,255,99,90,99,255,123,115,132,255,140,148,140,255,165,
165,165,255,214,165,16,255,247,231,66,255,247,115,41,255,247,115,41,255,90,66,
24,255,173,173,173,255,156,156,156,255,181,181,181,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,66,66,255,107,107,107,255,214,214,214,255,
132,132,132,255,99,99,99,255,99,99,99,255,115,115,115,255,140,140,140,255,214,
165,16,255,247,231,66,255,247,115,41,255,247,115,41,255,107,82,33,255,181,181,
181,255,173,173,173,255,156,156,156,255,181,181,181,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,74,74,255,90,90,90,255,165,165,165,255,115,
115,115,255,90,90,90,255,90,90,90,255,115,115,115,255,255,198,107,255,255,247,
140,255,247,115,41,255,247,115,41,255,99,66,8,255,165,165,165,255,140,140,140,
255,132,132,132,255,132,132,132,255,173,173,173,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,74,74,255,107,107,107,255,198,198,198,255,115,
115,115,255,90,90,90,255,82,82,82,255,115,115,115,255,198,181,140,255,255,247,
140,255,247,115,41,255,107,82,33,255,123,123,123,255,140,140,140,255,148,148,
148,255,156,156,156,255,156,156,156,255,181,181,181,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,74,74,255,107,107,107,255,222,222,222,255,
132,132,132,255,99,99,99,255,99,99,99,255,74,66,82,255,24,41,57,255,123,99,41,
255,107,99,82,255,206,206,206,255,214,214,214,255,198,198,198,255,181,181,181,
255,165,165,165,255,148,148,148,255,181,181,181,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,66,66,255,107,107,107,255,214,214,214,255,132,
132,132,255,99,99,99,255,99,99,99,255,49,49,49,255,74,66,82,255,181,181,181,255,
181,181,181,255,198,198,198,255,214,214,214,255,198,198,198,255,181,181,181,255,
173,173,173,255,156,156,156,255,181,181,181,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,74,74,74,255,107,107,107,255,222,222,222,255,140,140,
140,255,99,99,99,255,99,99,99,255,115,115,115,255,148,148,148,255,165,165,165,
255,181,181,181,255,206,206,206,255,214,214,214,255,198,198,198,255,181,181,181,
255,173,173,173,255,156,156,156,255,181,181,181,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,74,74,255,107,107,107,255,222,222,222,255,132,
132,132,255,99,99,99,255,99,99,99,255,123,123,123,255,148,148,148,255,165,165,
165,255,189,189,189,255,206,206,206,255,214,214,214,255,198,198,198,255,189,189,
189,255,173,173,173,255,156,156,156,255,181,181,181,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,132,132,255,99,99,99,255,156,156,156,255,
115,115,115,255,90,90,90,255,99,99,99,255,115,115,115,255,140,140,140,255,173,
173,173,255,181,181,181,255,189,189,189,255,189,189,189,255,165,165,165,255,140,
140,140,255,132,132,132,255,132,132,132,255,132,132,132,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,132,132,255,148,148,
148,255,107,107,107,255,99,99,99,255,90,90,90,255,90,90,90,255,90,90,90,255,99,
99,99,255,107,107,107,255,123,123,123,255,148,148,148,255,165,165,165,255,132,
132,132,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_Data(idata_Data, 24, 24, 4, 0);

static void cb_7(Fl_Button*, void*) {
  ft.NeuralNetworkInfo();
}

static unsigned char idata_Information[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
28,72,152,255,28,72,152,255,28,72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,72,152,255,106,143,212,255,
255,255,255,255,106,143,212,255,28,72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,72,152,255,106,143,212,255,255,255,255,255,
255,255,255,255,255,255,255,255,106,143,212,255,28,72,152,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,72,152,255,106,143,212,255,255,255,255,255,
17,132,234,255,11,42,106,255,11,42,106,255,255,255,255,255,106,143,212,255,28,
72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,72,152,255,106,143,212,255,255,
255,255,255,17,132,234,255,28,72,152,255,28,72,152,255,22,64,132,255,11,42,106,
255,255,255,255,255,106,143,212,255,28,72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,72,152,
255,106,143,212,255,255,255,255,255,17,132,234,255,28,72,152,255,28,72,152,255,
255,255,255,255,212,224,244,255,28,72,152,255,11,42,106,255,255,255,255,255,106,
143,212,255,28,72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,28,72,152,255,106,143,212,255,255,255,255,255,17,
132,234,255,28,72,152,255,28,72,152,255,28,72,152,255,212,224,244,255,212,224,
244,255,28,72,152,255,22,64,132,255,11,42,106,255,255,255,255,255,106,143,212,
255,28,72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,28,72,152,255,106,143,212,255,255,255,255,255,17,132,234,255,28,72,152,255,
28,72,152,255,28,72,152,255,28,72,152,255,28,72,152,255,28,72,152,255,28,72,
152,255,28,72,152,255,22,64,132,255,11,42,106,255,255,255,255,255,106,143,212,
255,28,72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,72,152,255,
106,143,212,255,255,255,255,255,17,132,234,255,28,72,152,255,28,72,152,255,28,
72,152,255,28,72,152,255,255,255,255,255,255,255,255,255,212,224,244,255,28,72,
152,255,28,72,152,255,28,72,152,255,22,64,132,255,11,42,106,255,255,255,255,255,
106,143,212,255,28,72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,72,152,255,106,
143,212,255,255,255,255,255,17,132,234,255,28,72,152,255,28,72,152,255,28,72,
152,255,28,72,152,255,28,72,152,255,49,88,161,255,255,255,255,255,212,224,244,
255,28,72,152,255,28,72,152,255,28,72,152,255,28,72,152,255,22,64,132,255,11,42,
106,255,255,255,255,255,106,143,212,255,28,72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,
28,72,152,255,255,255,255,255,255,255,255,255,28,72,152,255,28,72,152,255,28,
72,152,255,28,72,152,255,28,72,152,255,28,72,152,255,28,72,152,255,255,255,255,
255,212,224,244,255,28,72,152,255,28,72,152,255,28,72,152,255,28,72,152,255,28,
72,152,255,22,64,132,255,255,255,255,255,255,255,255,255,28,72,152,255,0,0,0,0,
0,0,0,0,0,0,0,0,28,72,152,255,106,143,212,255,255,255,255,255,17,88,202,255,
28,72,152,255,28,72,152,255,28,72,152,255,28,72,152,255,28,72,152,255,28,72,
152,255,255,255,255,255,212,224,244,255,28,72,152,255,28,72,152,255,28,72,152,
255,28,72,152,255,22,64,132,255,6,28,72,255,255,255,255,255,106,143,212,255,28,
72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,72,152,255,106,143,212,255,255,
255,255,255,17,88,202,255,28,72,152,255,28,72,152,255,28,72,152,255,28,72,152,
255,28,72,152,255,255,255,255,255,212,224,244,255,28,72,152,255,28,72,152,255,
28,72,152,255,22,64,132,255,6,28,72,255,255,255,255,255,106,143,212,255,28,72,
152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,72,152,255,106,143,
212,255,255,255,255,255,17,88,202,255,28,72,152,255,28,72,152,255,28,72,152,255,
49,88,161,255,255,255,255,255,212,224,244,255,49,88,161,255,28,72,152,255,22,
64,132,255,6,28,72,255,255,255,255,255,106,143,212,255,28,72,152,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,72,152,255,106,143,
212,255,255,255,255,255,17,88,202,255,28,72,152,255,28,72,152,255,255,255,255,
255,255,255,255,255,255,255,255,255,212,224,244,255,22,64,132,255,6,28,72,255,
255,255,255,255,106,143,212,255,28,72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,72,152,255,106,143,212,255,
255,255,255,255,17,88,202,255,28,72,152,255,28,72,152,255,28,72,152,255,28,72,
152,255,22,64,132,255,6,28,72,255,255,255,255,255,106,143,212,255,28,72,152,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,28,72,152,255,106,143,212,255,255,255,255,255,17,88,202,255,
28,72,152,255,22,64,132,255,22,64,132,255,6,28,72,255,255,255,255,255,106,143,
212,255,28,72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,72,152,255,106,143,
212,255,255,255,255,255,6,28,72,255,6,28,72,255,6,28,72,255,255,255,255,255,106,
143,212,255,28,72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,
72,152,255,106,143,212,255,255,255,255,255,255,255,255,255,255,255,255,255,106,
143,212,255,28,72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,28,72,152,255,106,143,212,255,255,255,255,255,106,143,212,255,28,
72,152,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,28,72,152,255,28,72,152,255,28,72,152,255,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_Information(idata_Information, 24, 24, 4, 0);

int main(int argc, char **argv) {
  splashScreen(600);
  { window_main = new Fl_Double_Window(775, 684, "FANN Tool 1.2");
    window_main->box(FL_PLASTIC_DOWN_BOX);
    window_main->color((Fl_Color)21);
    window_main->labelcolor((Fl_Color)1);
    window_main->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 777, 35);
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)29);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Fl_Group* o = new Fl_Group(5, 91, 765, 229);
      { Fl_Group* o = new Fl_Group(145, 106, 595, 60);
        { DataFile = new Fl_Input(145, 108, 420, 23, "Training Data File ");
        } // Fl_Input* DataFile
        { TestFile = new Fl_Input(145, 143, 420, 23, "Test Data File ");
        } // Fl_Input* TestFile
        { Fl_Repeat_Button* o = new Fl_Repeat_Button(575, 106, 20, 25, "...");
          o->box(FL_PLASTIC_UP_BOX);
          o->color((Fl_Color)4);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->callback((Fl_Callback*)cb_);
        } // Fl_Repeat_Button* o
        { Fl_Repeat_Button* o = new Fl_Repeat_Button(575, 141, 20, 25, "...");
          o->box(FL_PLASTIC_UP_BOX);
          o->color((Fl_Color)4);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->callback((Fl_Callback*)cb_1);
        } // Fl_Repeat_Button* o
        { Input = new Fl_Value_Output(690, 107, 50, 24, "Input dim.:");
        } // Fl_Value_Output* Input
        { Output = new Fl_Value_Output(690, 142, 50, 24, "Output dim.:");
        } // Fl_Value_Output* Output
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(293, 181, 477, 129);
        { Fl_Spinner* o = Layer = new Fl_Spinner(293, 182, 37, 24, "# of Layers");
          Layer->color(FL_BACKGROUND2_COLOR);
          Layer->callback((Fl_Callback*)cb_Layer);
          Layer->when(FL_WHEN_CHANGED);
          o->value(3);
          o->maximum(5);
          o->minimum(3);
        } // Fl_Spinner* Layer
        { Fl_Spinner* o = Hid1 = new Fl_Spinner(432, 182, 45, 24, "Hid. Layer 1 :");
          Hid1->maximum(999);
          o->value(0);
        } // Fl_Spinner* Hid1
        { Fl_Spinner* o = Hid2 = new Fl_Spinner(575, 182, 45, 24, "Hid. Layer 2 :");
          Hid2->maximum(999);
          Hid2->deactivate();
          o->value(0);
        } // Fl_Spinner* Hid2
        { Fl_Spinner* o = Hid3 = new Fl_Spinner(715, 182, 45, 24, "Hid. Layer 3 :");
          Hid3->maximum(999);
          Hid3->deactivate();
          o->value(0);
        } // Fl_Spinner* Hid3
        { Fl_Choice* o = Method = new Fl_Choice(430, 215, 320, 25, "Training Method :");
          Method->down_box(FL_BORDER_BOX);
          FillMethods();
          o->value(2);
        } // Fl_Choice* Method
        { HiddenActivationF = new Fl_Choice(430, 250, 320, 25, "Activation Function (Hidden) :");
          HiddenActivationF->down_box(FL_BORDER_BOX);
        } // Fl_Choice* HiddenActivationF
        { Fl_Choice* o = OutputActivationF = new Fl_Choice(430, 285, 320, 25, "Activation Function (Output) :");
          OutputActivationF->down_box(FL_BORDER_BOX);
          FillActivationF();
          o->value(3);
          HiddenActivationF->value(3);
        } // Fl_Choice* OutputActivationF
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(10, 176, 205, 144);
        o->box(FL_EMBOSSED_FRAME);
        o->align(Fl_Align(FL_ALIGN_CENTER));
        { StopFunction = new Fl_Choice(20, 196, 190, 22, "Stop Function");
          StopFunction->down_box(FL_BORDER_BOX);
          StopFunction->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          StopFunction->add("FANN_STOPFUNC_MSE");
          StopFunction->add("FANN_STOPFUNC_BIT");
          StopFunction->value(0);
        } // Fl_Choice* StopFunction
        { EReports = new Fl_Value_Input(20, 242, 55, 23, "Epochs Between Reports");
          EReports->minimum(1);
          EReports->maximum(50000);
          EReports->step(10);
          EReports->value(1000);
          EReports->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* EReports
        { MaxEpoch = new Fl_Value_Input(20, 286, 60, 24, "Max # of Epochs : ");
          MaxEpoch->minimum(1000);
          MaxEpoch->maximum(1e+006);
          MaxEpoch->step(1000);
          MaxEpoch->value(500000);
          MaxEpoch->callback((Fl_Callback*)cb_MaxEpoch);
          MaxEpoch->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* MaxEpoch
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Tabs* o = Tabs = new Fl_Tabs(0, 324, 776, 381);
      Tabs->box(FL_GTK_UP_FRAME);
      Tabs->color((Fl_Color)21);
      { LogG = new Fl_Group(5, 367, 760, 338, "Log");
        { Out = new Fl_Browser(10, 372, 755, 301);
          Out->type(2);
          Out->box(FL_GTK_DOWN_BOX);
          Out->color((Fl_Color)31);
          Out->labelcolor((Fl_Color)2);
        } // Fl_Browser* Out
        LogG->end();
      } // Fl_Group* LogG
      { GraphG = new Fl_Group(1, 365, 775, 340, "Graphic");
        GraphG->hide();
        { Graph = new Fl_PlotXY(11, 371, 746, 273);
          Graph->tooltip("MSE vs Epoch");
          Graph->box(FL_GTK_DOWN_BOX);
          Graph->color((Fl_Color)16);
          Graph->selection_color(FL_BACKGROUND_COLOR);
          Graph->labeltype(FL_NORMAL_LABEL);
          Graph->labelfont(0);
          Graph->labelsize(14);
          Graph->labelcolor(FL_FOREGROUND_COLOR);
          Graph->align(Fl_Align(FL_ALIGN_CENTER));
          Graph->when(FL_WHEN_RELEASE);
          Line=Graph->newline();
          Graph->scalemode(Line,FL_PLOTXY_AUTO);
          Graph->linecolor(Line,FL_BLUE);
        } // Fl_PlotXY* Graph
        { Ep = new Fl_Value_Output(63, 651, 60, 24, "Epoch :");
          Ep->labelcolor((Fl_Color)4);
        } // Fl_Value_Output* Ep
        { Mse = new Fl_Value_Output(174, 651, 110, 24, "MSE :");
          Mse->labelcolor((Fl_Color)4);
        } // Fl_Value_Output* Mse
        { nVData = new Fl_Spinner(712, 651, 48, 24, "# of Visible Data :");
          nVData->labelcolor((Fl_Color)4);
          nVData->minimum(20);
          nVData->maximum(500);
          nVData->value(500);
        } // Fl_Spinner* nVData
        { BitFailOut = new Fl_Value_Output(549, 651, 44, 24, "Bit Fail  :");
          BitFailOut->labelcolor((Fl_Color)4);
        } // Fl_Value_Output* BitFailOut
        { TestMse = new Fl_Value_Output(375, 651, 110, 24, "Test MSE :");
          TestMse->tooltip("Test Data MSE");
          TestMse->labelcolor((Fl_Color)1);
          TestMse->deactivate();
        } // Fl_Value_Output* TestMse
        GraphG->end();
      } // Fl_Group* GraphG
      { Fl_Group* o = new Fl_Group(10, 370, 755, 335, "Fine Tuning");
        o->hide();
        { DesiredError = new Fl_Value_Input(169, 401, 72, 24, "Desired Error (MSE) :");
          DesiredError->maximum(0.1);
          DesiredError->step(1e-005);
          DesiredError->value(0.0001);
        } // Fl_Value_Input* DesiredError
        { BitFail = new Fl_Value_Input(170, 439, 72, 24, "Bit Fail Limit :");
          BitFail->maximum(0.1);
          BitFail->step(1e-005);
          BitFail->value(0.035);
        } // Fl_Value_Input* BitFail
        { ErrorFunction = new Fl_Choice(331, 398, 225, 24, "Error Function");
          ErrorFunction->down_box(FL_BORDER_BOX);
          ErrorFunction->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          ErrorFunction->add("FANN_ERRORFUNC_LINEAR");
          ErrorFunction->add("FANN_ERRORFUNC_TANH");
          ErrorFunction->value(0);
        } // Fl_Choice* ErrorFunction
        { HiddenStepness = new Fl_Value_Input(335, 443, 67, 22, "Hidden Activation Steepness  ");
          HiddenStepness->maximum(0);
          HiddenStepness->value(0.5);
          HiddenStepness->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* HiddenStepness
        { OutputStepness = new Fl_Value_Input(335, 491, 67, 24, "Output Activation Steepness  ");
          OutputStepness->maximum(0);
          OutputStepness->value(0.5);
          OutputStepness->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* OutputStepness
        { DecayFactor = new Fl_Value_Input(584, 398, 67, 24, "Quickprop Decay Factor");
          DecayFactor->minimum(-0.2);
          DecayFactor->maximum(0);
          DecayFactor->value(-0.0001);
          DecayFactor->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* DecayFactor
        { MuFactor = new Fl_Value_Input(584, 441, 70, 24, "Quickprop Mu Factor");
          MuFactor->minimum(1);
          MuFactor->maximum(3);
          MuFactor->value(1.75);
          MuFactor->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* MuFactor
        { IncreaseFactor = new Fl_Value_Input(584, 491, 70, 24, "RPROP Increase Factor ");
          IncreaseFactor->minimum(1);
          IncreaseFactor->maximum(3);
          IncreaseFactor->value(1.2);
          IncreaseFactor->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* IncreaseFactor
        { DecreaseFactor = new Fl_Value_Input(584, 541, 70, 24, "RPROP Decrease Factor ");
          DecreaseFactor->value(0.5);
          DecreaseFactor->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* DecreaseFactor
        { DeltaMin = new Fl_Value_Input(584, 596, 70, 24, "RPROP Minimum Step-Size");
          DeltaMin->maximum(3);
          DeltaMin->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* DeltaMin
        { DeltaMax = new Fl_Value_Input(584, 646, 70, 24, "RPROP Maximum Step-Size");
          DeltaMax->minimum(1);
          DeltaMax->maximum(100);
          DeltaMax->value(50);
          DeltaMax->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* DeltaMax
        { ConnectionRate = new Fl_Counter(135, 489, 142, 24, "Connection Rate");
          ConnectionRate->minimum(0.1);
          ConnectionRate->maximum(1);
          ConnectionRate->value(1);
          ConnectionRate->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Counter* ConnectionRate
        { Momentum = new Fl_Counter(415, 526, 140, 25, "Momentum :");
          Momentum->minimum(0);
          Momentum->maximum(1);
          Momentum->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Counter* Momentum
        { Shuffle = new Fl_Check_Button(453, 556, 26, 25, "Shuffle Train Data");
          Shuffle->down_box(FL_DOWN_BOX);
          Shuffle->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* Shuffle
        { InitWghts = new Fl_Check_Button(300, 557, 19, 24, "Initialize the weights ( Widrow + Nguyen Alg.)");
          InitWghts->down_box(FL_DOWN_BOX);
          InitWghts->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* InitWghts
        { OverTraining = new Fl_Check_Button(300, 591, 19, 24, "Overtraining Caution System");
          OverTraining->down_box(FL_DOWN_BOX);
          OverTraining->callback((Fl_Callback*)cb_OverTraining);
          OverTraining->align(Fl_Align(FL_ALIGN_LEFT));
          OverTraining->deactivate();
        } // Fl_Check_Button* OverTraining
        { LearningRate = new Fl_Spinner(140, 526, 80, 24, "Learning Rate");
          LearningRate->type(1);
          LearningRate->minimum(0.001);
          LearningRate->maximum(1);
          LearningRate->step(0.1);
          LearningRate->value(0.7);
        } // Fl_Spinner* LearningRate
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(7, 370, 750, 335, "Cascade Tuning");
        o->hide();
        { OutputChange = new Fl_Value_Input(51, 476, 93, 24, "Output Change Fraction:");
          OutputChange->value(0.01);
          OutputChange->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* OutputChange
        { OutputStag = new Fl_Value_Input(51, 526, 93, 24, "Output Stagnation Epochs");
          OutputStag->maximum(0);
          OutputStag->value(12);
          OutputStag->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* OutputStag
        { CandidateChange = new Fl_Value_Input(51, 576, 93, 24, "Candidate Change Fraction:");
          CandidateChange->value(0.01);
          CandidateChange->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* CandidateChange
        { CandidateStag = new Fl_Value_Input(51, 626, 93, 24, "Candidate Stagnation Epochs");
          CandidateStag->maximum(0);
          CandidateStag->value(12);
          CandidateStag->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* CandidateStag
        { WeighMultiplier = new Fl_Value_Input(301, 421, 93, 24, "Weight Multiplier");
          WeighMultiplier->value(0.4);
          WeighMultiplier->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* WeighMultiplier
        { CandidateLimit = new Fl_Value_Input(301, 471, 93, 24, "Candidate Limit");
          CandidateLimit->maximum(2000);
          CandidateLimit->value(1000);
          CandidateLimit->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* CandidateLimit
        { MaxOutEpoch = new Fl_Value_Input(301, 521, 93, 24, "Maximum Out Epochs");
          MaxOutEpoch->maximum(500);
          MaxOutEpoch->value(150);
          MaxOutEpoch->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* MaxOutEpoch
        { MaxCasndidatetEpoch = new Fl_Value_Input(301, 571, 93, 24, "Maximum Candidate Epochs");
          MaxCasndidatetEpoch->maximum(500);
          MaxCasndidatetEpoch->value(150);
          MaxCasndidatetEpoch->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* MaxCasndidatetEpoch
        { NumCandidateGroups = new Fl_Value_Input(301, 616, 93, 24, "Number of Candidate Groups");
          NumCandidateGroups->maximum(0);
          NumCandidateGroups->value(2);
          NumCandidateGroups->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* NumCandidateGroups
        { MaxCascade = new Fl_Value_Input(51, 426, 93, 24, "Maximum Number of Neurons");
          MaxCascade->minimum(1);
          MaxCascade->maximum(0);
          MaxCascade->value(10);
          MaxCascade->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Value_Input* MaxCascade
        o->end();
      } // Fl_Group* o
      o->value(LogG);
      Tabs->end();
    } // Fl_Tabs* Tabs
    { Fl_Group* o = new Fl_Group(10, 42, 494, 56);
      o->box(FL_EMBOSSED_FRAME);
      { Fl_Button* o = But_Alg = new Fl_Button(20, 56, 32, 32);
        But_Alg->tooltip("Detect Optimum Training Algorithm");
        But_Alg->box(FL_PLASTIC_UP_BOX);
        But_Alg->down_box(FL_FLAT_BOX);
        But_Alg->color((Fl_Color)4);
        But_Alg->image(image_alg);
        But_Alg->callback((Fl_Callback*)cb_But_Alg);
        But_Alg->align(Fl_Align(FL_ALIGN_WRAP));
        But_Alg->deactivate();
        InactImg(o);
      } // Fl_Button* But_Alg
      { Fl_Button* o = But_Act = new Fl_Button(60, 56, 32, 32);
        But_Act->tooltip("Detect Optimum Activation Functions");
        But_Act->box(FL_PLASTIC_UP_BOX);
        But_Act->color((Fl_Color)4);
        But_Act->image(image_act);
        But_Act->callback((Fl_Callback*)cb_But_Act);
        But_Act->align(Fl_Align(FL_ALIGN_WRAP));
        But_Act->deactivate();
        InactImg(o);
      } // Fl_Button* But_Act
      { Fl_Menu_Button* o = But_Trn = new Fl_Menu_Button(100, 56, 32, 32);
        But_Trn->tooltip("Train ANN");
        But_Trn->box(FL_PLASTIC_UP_BOX);
        But_Trn->color((Fl_Color)4);
        But_Trn->image(image_train);
        But_Trn->callback((Fl_Callback*)cb_But_Trn);
        But_Trn->deactivate();
        o->add("Normal");
        o->add("Cascade");
        InactImg(o);
      } // Fl_Menu_Button* But_Trn
      { Fl_Button* o = But_Test = new Fl_Button(140, 56, 32, 32);
        But_Test->tooltip("Test ANN");
        But_Test->box(FL_PLASTIC_UP_BOX);
        But_Test->color((Fl_Color)4);
        But_Test->image(image_test);
        But_Test->callback((Fl_Callback*)cb_But_Test);
        But_Test->align(Fl_Align(FL_ALIGN_WRAP));
        But_Test->deactivate();
        InactImg(o);
      } // Fl_Button* But_Test
      { Fl_Menu_Button* o = But_Run = new Fl_Menu_Button(180, 56, 32, 32);
        But_Run->tooltip("Run ANN");
        But_Run->box(FL_PLASTIC_UP_BOX);
        But_Run->color((Fl_Color)4);
        But_Run->image(image_Run);
        But_Run->callback((Fl_Callback*)cb_But_Run);
        o->add("Normal");
        o->add("with File");o->add("As a Time Series");o->add("As a Classifier");
        InactImg(o);
      } // Fl_Menu_Button* But_Run
      { Fl_Button* o = new Fl_Button(220, 56, 32, 32);
        o->tooltip("Clear Log");
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)4);
        o->image(image_clear);
        o->callback((Fl_Callback*)cb_2);
        o->align(Fl_Align(FL_ALIGN_WRAP));
        InactImg(o);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(260, 56, 32, 32);
        o->tooltip("Save Log");
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)4);
        o->image(image_save);
        o->callback((Fl_Callback*)cb_3);
        o->align(Fl_Align(FL_ALIGN_WRAP));
        InactImg(o);
      } // Fl_Button* o
      { Fl_Button* o = Stop = new Fl_Button(300, 56, 32, 32);
        Stop->tooltip("Stop Process");
        Stop->box(FL_PLASTIC_UP_BOX);
        Stop->color((Fl_Color)4);
        Stop->image(image_stop);
        Stop->labelcolor((Fl_Color)1);
        Stop->callback((Fl_Callback*)cb_Stop);
        Stop->align(Fl_Align(FL_ALIGN_WRAP));
        Stop->deactivate();
        InactImg(o);
      } // Fl_Button* Stop
      { Fl_Button* o = new Fl_Button(340, 56, 32, 32);
        o->tooltip("Load  Log");
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)4);
        o->image(image_load);
        o->callback((Fl_Callback*)cb_4);
        o->align(Fl_Align(FL_ALIGN_WRAP));
        InactImg(o);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(380, 56, 32, 32);
        o->tooltip("Help");
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)4);
        o->image(image_Help);
        o->callback((Fl_Callback*)cb_5);
        o->align(Fl_Align(FL_ALIGN_WRAP));
        InactImg(o);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(420, 56, 32, 32);
        o->tooltip("Data Processing");
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)4);
        o->image(image_Data);
        o->callback((Fl_Callback*)cb_6);
        o->align(Fl_Align(FL_ALIGN_WRAP));
        InactImg(o);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(462, 56, 32, 32);
        o->tooltip("Neural Network Information");
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)4);
        o->image(image_Information);
        o->callback((Fl_Callback*)cb_7);
        o->align(Fl_Align(FL_ALIGN_WRAP));
        InactImg(o);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    Fl::visual(FL_DOUBLE|FL_INDEX);
    if((window_main->w()> Fl::w())||(window_main->h()> Fl::h())){ window_main->resizable(window_main); window_main->resize(window_main->x(),window_main->y(),Fl::w(),Fl::h());}
    window_main->callback(Exit_CB);
    window_main->end();
    window_main->resizable(window_main);
  } // Fl_Double_Window* window_main
  #ifdef WIN32
    window_main->icon((char *)LoadIcon(fl_display, MAKEINTRESOURCE(IDI_ICON)));
  #elif !defined(__APPLE__)
    Pixmap p, mask;
    XpmCreatePixmapFromData(fl_display, DefaultRootWindow(fl_display),fanntool_icon_xpm, &p, &mask, NULL);
    window_main->icon((char *)p);

  #endif // WIN32
  window_main->show(argc, argv);
  return Fl::run();
}

void cb_Ok(Fl_Return_Button*o, void*w) {
  ((Fl_Window *)(o->parent()))->hide();
}

inline void Refresh() {
  Out->bottomline(Out->size());
  Out->redraw();
  Graph->redraw();
  Ep->redraw();
  Mse->redraw();
  Fl::wait(0);
}

void FillMethods() {
  /*
  FANN_TRAIN_INCREMENTAL = 0,
  FANN_TRAIN_BATCH,
  FANN_TRAIN_RPROP,
  FANN_TRAIN_QUICKPROP
  FANN_TRAIN_SARPROP
  */

  Method->add("FANN_TRAIN_INCREMENTAL");
  Method->add("FANN_TRAIN_BATCH");
  Method->add("FANN_TRAIN_RPROP");
  Method->add("FANN_TRAIN_QUICKPROP");
  Method->add("FANN_TRAIN_SARPROP");
}

void FillActivationF() {
  char *ActF[13]={
  	  "FANN_LINEAR",
  	  "FANN_SIGMOID",
  	  "FANN_SIGMOID_STEPWISE",
  	  "FANN_SIGMOID_SYMMETRIC",
  	  "FANN_SIGMOID_SYMMETRIC_STEPWISE",
  	  "FANN_GAUSSIAN",
  	  "FANN_GAUSSIAN_SYMMETRIC",
  	  "FANN_ELLIOT",
  	  "FANN_ELLIOT_SYMMETRIC",
  	  "FANN_LINEAR_PIECE",
  	  "FANN_LINEAR_PIECE_SYMMETRIC",
  	  "FANN_SIN_SYMMETRIC",
  	  "FANN_COS_SYMMETRIC"

      };


      for(int i=0;i<13;i++){
        HiddenActivationF->add(ActF[i]);
        OutputActivationF->add(ActF[i]);
      }
}

fann_type * GetWeigths(struct fann *ann) {
  fann_type *w;
  w=(fann_type *)malloc(ann->total_connections*sizeof(fann_type));
  for (unsigned int i=0; i < ann->total_connections; i++)
     w[i] = ann->weights[i];
  return w;
}

void SetWeights(struct fann *ann,fann_type *w) {
  for (unsigned int i=0; i < ann->total_connections; i++)
        ann->weights[i]=w[i];
}

fann_type ExamineTrain(struct fann *ann,fann_train_enum tal,fann_activationfunc_enum hact,fann_activationfunc_enum oact,fann_train_data *TrainData) {
  fann_set_training_algorithm(ann,tal);
  fann_set_activation_function_hidden(ann, hact);
  fann_set_activation_function_output(ann, oact);
  fann_set_callback(ann, LogOut );
  // inith Graph
  cX.clear();
  cY.clear();
  //
  fann_train_on_data(ann, TrainData, 2000, 250, 0.0);

    double trainMSE=fann_get_MSE(ann);
    double testMSE=-1;
    if(ft.TestData && ft.overtraining){
      fann_reset_MSE(ann);
      fann_test_data(ann,ft.TestData);
      testMSE=fann_get_MSE(ann);
      return (trainMSE+testMSE)/2;

    }
    else
      return trainMSE;
}

int FANN_API LogOut(struct fann *ann, struct fann_train_data *train,unsigned int max_epochs, unsigned int epochs_between_reports,float desired_error, unsigned int epochs) {
  char Buf[512];
    double trainMSE=fann_get_MSE(ann);
    double testMSE=-1;
    unsigned int newBitFail=fann_get_bit_fail(ann);
    if(ft.TestData && ft.overtraining){
      fann_reset_MSE(ann);
      fann_test_data(ann,ft.TestData);
      testMSE=fann_get_MSE(ann);
      fann_test_data(ann,ft.TrainData);
      sprintf(Buf,"%08d : %f       : %f       : %d ", epochs,trainMSE ,testMSE,newBitFail);
    }
    else
      sprintf(Buf,"%08d : %f       : %d ", epochs,trainMSE , newBitFail);
    Out->add(Buf);
    // Memorizing Begin
       if(epochs==1){
         for(int i=0;i<3;i++) {
           MinTrainingMSE[i]=trainMSE;
           MinANN[i]=fann_copy(ann);
           if(ft.TestData && ft.overtraining)
              MinTestingMSE[i]=testMSE;
         }
         MinANN[3]=ann;

       }

       // Latest
       MinTrainingMSE[3]= trainMSE;
       MinTestingMSE[3]= testMSE;
  //     if( MinANN[3]) fann_destroy( MinANN[3]);
  //       MinANN[3]=fann_copy(ann);

       // Minimum Training MSE
       if(MinTrainingMSE[0]> trainMSE ){
         if( MinANN[0]) fann_destroy( MinANN[0]);
         MinANN[0]=fann_copy(ann);
         MinTrainingMSE[0]=trainMSE;
         if(ft.TestData && ft.overtraining)
             MinTestingMSE[0]=testMSE;

       }
       if(ft.TestData && ft.overtraining){
         // Minimum Testing MSE
         if(MinTestingMSE[1]> testMSE ){
           if( MinANN[1]) fann_destroy( MinANN[1]);
           MinANN[1]=fann_copy(ann);
           MinTrainingMSE[1]=trainMSE;
           MinTestingMSE[1]=testMSE;

         }
         // Minimum (Training MSE + Testing MSE )/2
         if((MinTestingMSE[2]+ MinTrainingMSE[2])> (trainMSE + testMSE) ){
           if( MinANN[2]) fann_destroy( MinANN[2]);
           MinANN[2]=fann_copy(ann);
           MinTrainingMSE[2]=trainMSE;
           MinTestingMSE[2]=testMSE;

         }


       }

      // Memorizing End


    DrawGraph(epochs,trainMSE,testMSE,newBitFail);
    Refresh();
    if(ft.stop)
      return -1;
    return 1;
}

int FANN_API CascadeLogOut(struct fann *ann, struct fann_train_data *train,unsigned int max_epochs, unsigned int epochs_between_reports,float desired_error, unsigned int epochs) {
  char Buf[512];

  double trainMSE=fann_get_MSE(ann);
  double testMSE=-1;
  unsigned int newBitFail=fann_get_bit_fail(ann);

  if(ft.TestData && ft.overtraining){
      fann_reset_MSE(ann);
      fann_test_data(ann,ft.TestData);
      testMSE=fann_get_MSE(ann);
      fann_test_data(ann,ft.TrainData);
      sprintf(Buf,"%08d : %f       : %f       : %d ", epochs,trainMSE ,testMSE ,newBitFail);
  }
  else
    sprintf(Buf,"%08d : %f       : %d  ", epochs,trainMSE , newBitFail);
  /*
  sprintf(Buf,"Current error: %.6f. Total error:%8.4f. Epochs %5d. Bit fail %3d",
  					 newMSE, ann->MSE_value, epochs, ann->num_bit_fail);

  	*/

  Out->add(Buf);

  if((ann->last_layer-2) != ann->first_layer)
  {
    sprintf(Buf,"@C4Candidate steepness %.2f. function %s",
       (ann->last_layer-2)->first_neuron->activation_steepness,
       FANN_ACTIVATIONFUNC_NAMES[(ann->last_layer-2)->first_neuron->activation_function]);
    Out->add(Buf);
  }


    // Memorizing Begin
       if(cascadeFirst){
         for(int i=0;i<3;i++) {
           MinTrainingMSE[i]=trainMSE;
           MinANN[i]=fann_copy(ann);
           if(ft.TestData && ft.overtraining)
              MinTestingMSE[i]=testMSE;
         }
         MinANN[3]=ann;
         cascadeFirst=false;

       }

       // Latest
       MinTrainingMSE[3]= trainMSE;
       MinTestingMSE[3]= testMSE;
  //     if( MinANN[3]) fann_destroy( MinANN[3]);
  //       MinANN[3]=fann_copy(ann);

       // Minimum Training MSE
       if(MinTrainingMSE[0]> trainMSE ){
         if( MinANN[0]) fann_destroy( MinANN[0]);
         MinANN[0]=fann_copy(ann);
         MinTrainingMSE[0]=trainMSE;
         if(ft.TestData && ft.overtraining)
             MinTestingMSE[0]=testMSE;

       }
       if(ft.TestData && ft.overtraining){
         // Minimum Testing MSE
         if(MinTestingMSE[1]> testMSE ){
           if( MinANN[1]) fann_destroy( MinANN[1]);
           MinANN[1]=fann_copy(ann);
           MinTrainingMSE[1]=trainMSE;
           MinTestingMSE[1]=testMSE;

         }
         // Minimum (Training MSE + Testing MSE )/2
         if((MinTestingMSE[2]+ MinTrainingMSE[2])> (trainMSE + testMSE) ){
           if( MinANN[2]) fann_destroy( MinANN[2]);
           MinANN[2]=fann_copy(ann);
           MinTrainingMSE[2]=trainMSE;
           MinTestingMSE[2]=testMSE;

         }


       }

      // Memorizing End



  DrawGraph(epochs,trainMSE,testMSE,ann->num_bit_fail);

  Refresh();
  if(ft.stop)
   return -1;

  return 1;
}

int FANN_API DrawGraph(float epochs, float TrainMSE, float TestMSE,unsigned int newBitFail) {
  if(epochs < 2){
      cX.clear();
      cY.clear();
    }

    Graph->clear(Line);

    cX.push_back(epochs);

    if(TestMSE==-1)
      cY.push_back(TrainMSE);
    else
      cY.push_back((TrainMSE+TestMSE)/2);


    while(cX.size()>=(int)nVData->value()){
      cX.pop_front();
      cY.pop_front();
    }

    for (int i=1; i<cX.size(); ++i) {
      Graph->add(Line,cX[i],cY[i]);
    }

    Graph->redraw();

    Ep->value(epochs);
    Mse->value(TrainMSE);
    if(TestMSE!=-1)
      TestMse->value(TestMSE);
    BitFailOut->value(newBitFail);
}

void SetHiddens() {
  int tmp,fark;

  fark=(int )(Input->value()-Output->value());
  if(fark > 0 ) {
    if(Layer->value()==3){
      tmp=fark/2;
      Hid1->value(tmp);
      Hid2->value(0);
      Hid3->value(0);
    }
    else if(Layer->value()==4){
      tmp=fark/3;
      Hid1->value(Input->value()-tmp);
      Hid2->value(Hid1->value()-tmp);
      Hid3->value(0);
    }
    else if(Layer->value()==5){
      tmp=fark/4;
      Hid1->value(Input->value()-tmp);
      Hid2->value(Hid1->value()-tmp);
      Hid3->value(Hid2->value()-tmp);

    }
    if(Hid1->value()==0) Hid1->value(1);
    if(Hid2->value()==0) Hid2->value(1);
    if(Hid3->value()==0) Hid3->value(1);

  }
  else{
   Hid1->value(1);
   Hid2->value(1);
   Hid3->value(1);
  }
}

void InactImg(Fl_Widget* o) {
  Fl_Image *r=o->image();
  r=r->copy(r->w(),r->h());
  r->inactive();
  o->deimage(r);
}

FannTool::FannTool() {
  stop=false;
  overtraining=false;
  working=false;
  TrainData=NULL;
  TestData=NULL;
  for(int i=0;i<4;i++){
    MinANN[i]=NULL;
  }
}

void FannTool::OptimumAlgorithm() {
  if(TrainData==NULL){
    fl_alert("Firstly Load Train Data !");
    return;
  }
  if(working) return;
  char Buf[512];
  Out->clear();
  ActivateStop();
  if(Layer->value()==5)
    ysa = fann_create_sparse(ConnectionRate->value(),5,(int)Input->value(),(int)Hid1->value(),(int)Hid2->value(),(int)Hid3->value(),(int)Output->value());
  if(Layer->value()==4)
    ysa = fann_create_sparse(ConnectionRate->value(),4,(int)Input->value(),(int)Hid1->value(),(int)Hid2->value(),(int)Output->value());
  else
    ysa = fann_create_sparse(ConnectionRate->value(),3,(int)Input->value(),(int)Hid1->value(),(int)Output->value());
  fann_type *w=GetWeigths(ysa);
  int best_ta;
  fann_type min=1,mse;
  for(int  ta=FANN_TRAIN_INCREMENTAL; ta<=FANN_TRAIN_SARPROP ;ta++) {
      SetWeights(ysa,w);
      sprintf(Buf,"@C4Train Method : %s ",FANN_TRAIN_NAMES[ta]);
      Out->add(Buf);
      Out->redraw();
      mse=ExamineTrain(ysa,(fann_train_enum)ta,(fann_activationfunc_enum)HiddenActivationF->value(),(fann_activationfunc_enum)OutputActivationF->value(),TrainData);
      if(mse<min){
         min=mse;
         best_ta=ta;
      }
      if(stop) break;
  }
  if(stop==false){
    sprintf(Buf,"@C1Best Train Method : %s ",FANN_TRAIN_NAMES[best_ta]);
    Method->value(best_ta);
    Out->add(Buf);
  }
  else
    Out->add("@C1Process Stopped !");
  Out->bottomline(Out->size());
  Out->redraw();
  fann_destroy(ysa);
  DeactivateStop();
}

void FannTool::OptimumActivations() {
  if(TrainData==NULL){
    fl_alert("Firstly Load Train Data !");
    return;
  }
  if(working) return;
  int best_ha,best_oa;
  Out->clear();
  ActivateStop();
  if(Layer->value()==5)
    ysa = fann_create_sparse(ConnectionRate->value(),5,(int)Input->value(),(int)Hid1->value(),(int)Hid2->value(),(int)Hid3->value(),(int)Output->value());
  if(Layer->value()==4)
    ysa = fann_create_sparse(ConnectionRate->value(),4,(int)Input->value(),(int)Hid1->value(),(int)Hid2->value(),(int)Output->value());
  else
    ysa = fann_create_sparse(ConnectionRate->value(),3,(int)Input->value(),(int)Hid1->value(),(int)Output->value());
  fann_type *w=GetWeigths(ysa);

  int best_ta;
  fann_type min=1,mse;
  char Buf[512];
  for(int  i=0; i<13 && !stop;i++) {
    for(int  j=0; j<13&& !stop;j++) {
    SetWeights(ysa,w);
      sprintf(Buf,"@C4Hid Activation Func. : %s --- Out Activation Func. : %s ",FANN_ACTIVATIONFUNC_NAMES[Act[i]],FANN_ACTIVATIONFUNC_NAMES[Act[j]]);
      Out->add(Buf);
      mse=ExamineTrain(ysa,(fann_train_enum)Method->value(),(fann_activationfunc_enum) Act[i],(fann_activationfunc_enum) Act[j],TrainData);
      if(mse<min){
         min=mse;
         best_ha=i;
         best_oa=j;

      }
    }
  }




  if(stop)
    Out->add("@C1Process Stopped !");

  sprintf(Buf,"@C1Best  Hid. Activation Func. : %s --- Out. Activation Func. : %s ",FANN_ACTIVATIONFUNC_NAMES[Act[best_ha]],FANN_ACTIVATIONFUNC_NAMES[Act[best_oa]]);
  Out->add(Buf);
  HiddenActivationF->value(best_ha);
  OutputActivationF->value(best_oa);

  Out->bottomline(Out->size());
  Out->redraw();
  fann_destroy(ysa);
  DeactivateStop();
}

void FannTool::TrainNormal() {
  if(TrainData==NULL){
    fl_alert("Firstly Load Train Data !");
    return;
  }
  if(working) return;
  char Buf[512];
  Out->clear();
  Fl::wait(0);
  ActivateStop();
  Out->add("@C4Normal Training...");
  Tabs->value(LogG);
  Tabs->redraw();

  Refresh();
   ClearTrainingMemory();
  if(Layer->value()==5)
    ysa = fann_create_sparse(ConnectionRate->value(),5,(int)Input->value(),(int)Hid1->value(),(int)Hid2->value(),(int)Hid3->value(),(int)Output->value());
  else if(Layer->value()==4)
    ysa = fann_create_sparse(ConnectionRate->value(),4,(int)Input->value(),(int)Hid1->value(),(int)Hid2->value(),(int)Output->value());
  else
    ysa = fann_create_sparse(ConnectionRate->value(),3,(int)Input->value(),(int)Hid1->value(),(int)Output->value());


  fann_set_training_algorithm(ysa,(fann_train_enum)Method->value());
  fann_set_activation_function_hidden(ysa,(fann_activationfunc_enum)Act[HiddenActivationF->value()]);
  fann_set_activation_function_output(ysa,(fann_activationfunc_enum)Act[OutputActivationF->value()]);
  fann_set_learning_rate(ysa,LearningRate->value());
  fann_set_learning_momentum(ysa,Momentum->value());
  fann_set_callback(ysa, LogOut );

  //

  if(Shuffle->value()){
    Out->add("# Shuffling...");
    fann_shuffle_train_data(TrainData);
  }

  if(InitWghts->value()){

    Out->add("# Initializing the weights using Widrow + Nguyen?s algorithm...");
    fann_init_weights(ysa,TrainData);
  }

  //
  float err;
  fann_set_train_stop_function(ysa,(fann_stopfunc_enum)StopFunction->value() );

  sprintf(Buf,"# Stop Function setted as  %s ",FANN_STOPFUNC_NAMES[StopFunction->value()]);
  Out->add(Buf);
  if(StopFunction->value()==0)
   err=DesiredError->value();
  else
   err=BitFail->value();

  SetFineTuning();
  // inith Graph
  cX.clear();
  cY.clear();
  //

  if(ft.TestData && ft.overtraining)
    Out->add("Epoch       : Training MSE : Testing MSE  :  Bit Fail ");
  else
    Out->add("Epoch       : Training MSE : Bit Fail ");


  fann_train_on_data(ysa, TrainData, (int)MaxEpoch->value(),(int)EReports->value(),err );


  if(stop){
     Out->add("@C1Process Stopped !");
     if(fl_choice("Training stopped !\n  Do you want to save ANN file ?", "No","Yes",NULL))
        SaveANN();
  }
  else
     SaveANN();

  Refresh();
  // fann_destroy(ysa);
  DeactivateStop();
}

void FannTool::TrainCascade() {
  if(TrainData==NULL){
    fl_alert("Firstly Load Train Data !");
    return;
  }
  if(working) return;
  Out->clear();

  ActivateStop();

  Tabs->value(LogG);
  Tabs->redraw();

  Out->add("@C4Cascade Training...");
  Refresh();
    ClearTrainingMemory();
  double desired_error=DesiredError->value();
  // unsigned int max_neurons = Input->value()+Hid1->value()+Hid2->value()+Hid3->value()+Output->value();
  unsigned int max_neurons = (unsigned int )MaxCascade->value();
  unsigned int neurons_between_reports = 1;

  ysa = fann_create_shortcut(2, (int)Input->value(), (int)Output->value());
  fann_set_training_algorithm(ysa,(fann_train_enum)Method->value());
  fann_set_activation_function_hidden(ysa,(fann_activationfunc_enum)Act[HiddenActivationF->value()]);
  fann_set_activation_function_output(ysa,(fann_activationfunc_enum)Act[OutputActivationF->value()]);
  fann_set_callback(ysa, CascadeLogOut);
  //
  // fann_set_train_error_function(ysa, FANN_ERRORFUNC_LINEAR);
  SetFineTuning();
  SetCascadeTuning();
  // init graph
  cX.clear();
  cY.clear();
  //

  if(ft.TestData && ft.overtraining)
    Out->add("Epoch       : Training MSE : Testing MSE  :  Bit Fail ");
  else
    Out->add("Epoch       : Training MSE : Bit Fail ");



  cascadeFirst=true;
  fann_cascadetrain_on_data(ysa, TrainData, max_neurons, neurons_between_reports, desired_error);

  //
  if(stop){
     Out->add("@C1Process Stopped !");
     if(fl_choice("Training stopped !\n  Do you want to save ANN file ?", "No","Yes",NULL))
        SaveANN();
  }
  else
     SaveANN();

   // fann_destroy(ysa);
  Refresh();
  DeactivateStop();
}

void FannTool::Test() {
  if(TestData==NULL){
    fl_alert("Firstly Load Test Data !");
    return;
  }
  if(working) return;
  char Buf[512];
  char* file=NULL;
  Tabs->value(LogG);
  Tabs->redraw();
  Out->clear();
  file = FileSelect("Load Trained ANN", Network);
  if(file!=NULL){
     Out->add("Trained ANN Loaded...");
     ysa=fann_create_from_file(fNameBuf);

     Out->add("@C4ANN Testing...");
     fann_reset_MSE(ysa);
     fann_test_data(ysa,TestData);

     sprintf(Buf,"Test Result MSE : %f ", fann_get_MSE(ysa) );
     Out->add(Buf);


  }
}

void FannTool::Run() {
  char Buf[512];
  result=fann_run(ysa, data);

  for(int i=0;i<ysa->num_input;i++){
    sprintf(Buf,"Input %03d : %f",i,data[i]);
    Out->add(Buf);

  }

  for(int i=0;i<ysa->num_output;i++){
    sprintf(Buf,"Output %03d : %f",i,result[i]);
    Out->add(Buf);

  }
}

void FannTool::RunNormal() {
  if(working) return;
  char Buf[512];
  char* file=NULL;
  Out->clear();
  file = FileSelect("Load Trained ANN", Network);
  // file = fl_file_chooser("Load Trained ANN", "*.net", file);
  if(file!=NULL){
     Out->add("Trained ANN Loaded...");
     ysa=fann_create_from_file(fNameBuf);

     Out->add("@C4Give Inputs...");
  //




  //
     GetInputs *op=new GetInputs();
     op->show(ysa);




  }
}

void FannTool::RunwithFile() {
  if(working) return;
  char Buf[512];
  char* file=NULL;
  Out->clear();

  if(TestData==NULL)
     LoadTestData();
  file = FileSelect("Load Trained ANN", Network);
  //file = fl_file_chooser("Load Trained ANN", "*.net", file);
  if(file!=NULL){
     Out->add("Trained ANN Loaded...");
     ysa=fann_create_from_file(fNameBuf);
     Out->add("@C4Running with Test Data File...");
     Out->add("Data No : Calculated Outputs : Desired Outputs ");


  char Buf[512];
  std::string ln1,ln2;

  Tabs->value(LogG);
  Tabs->redraw();

  for(int i=0;i<TestData->num_data;i++){
    result=fann_run(ysa, TestData->input[i]);
  //  sprintf(Buf,"%04d : ",i+1);
    sprintf(Buf,"%08d ",i+1);
  //  Out->add(Buf);
    ln1=Buf;
    ln2="";
    for(int j=0;j<ysa->num_output;j++){
      sprintf(Buf,"%0.04f ",result[j]);
  //    sprintf(Buf,"%+e ",result[j]);
      ln1=ln1+Buf;
      sprintf(Buf,"%0.04f ",TestData->output[i][j]);
  //    sprintf(Buf,"%+e ",TestData->output[i][j]);
      ln2=ln2+Buf;

    }
    ln1=ln1+" : "+ln2;
  //  ln1=ln1+ln2;
    Out->add(ln1.c_str());

  }

  }
}

void FannTool::RunAsTS() {
  if(working) return;
  char Buf[512];
  char* file=NULL;
  Out->clear();
  file = FileSelect("Load Trained ANN", Network);
  // file = fl_file_chooser("Load Trained ANN", "*.net", file);
  if(file!=NULL){

     ysa=fann_create_from_file(fNameBuf);
     int noutputs=fann_get_num_output(ysa);
     if(noutputs!=1){
         fl_alert("Error Time Series Runner work with 1 output ");
         fann_destroy(ysa);
         return;

     }



     Tabs->value(LogG);
     Tabs->redraw();

     Out->add("Trained ANN Loaded...");
     Out->add("@C4Give Inputs...");
  //




  //
     GetInputs *op=new GetInputs(true);
     op->show(ysa);




  }
}

void FannTool::RunAsClassifier() {
  if(working) return;
            char Buf[512];
            char* file=NULL;
            Out->clear();

            if(TestData==NULL)
                LoadTestData();
            file = FileSelect("Load Trained ANN", Network);
            if(file!=NULL)
            {
                Out->add("Trained ANN Loaded...");
                ysa=fann_create_from_file(fNameBuf);
                Out->add("@C4Running with Test Data File...");
                Out->add("Data No : Predicted Class : Actual Class :  Result");

            }

            Tabs->value(LogG);
            Tabs->redraw();

        // If only 1 class
            if(ysa->num_output==1)
            {
                int resultReal=-1;
                int resultCalc=-1;
                bool rCorrect=false;
                float nCorrect=0;
                for(int i=0; i<TestData->num_data; i++)
                {
                    result=fann_run(ysa, TestData->input[i]);
                    if(*result>=0.5) resultCalc=1;
                    else
                        resultCalc=0;
                    if(TestData->output[i][0]>=0.5) resultReal=1;
                    else
                        resultReal=0;
                    if(resultReal==resultCalc)
                        rCorrect=true;
                    else
                        rCorrect=false;
                    if(rCorrect) nCorrect+=1;
                    sprintf(Buf,"%04d : %d : %d : %s",i+1,resultCalc,resultReal,(rCorrect)? "Correct":"Wrong");
                    Out->add(Buf);
                }
                sprintf(Buf,"@C4Classification Succes %% : %.2f ",nCorrect*100/TestData->num_data);
                Out->add(Buf);
                Out->bottomline(Out->size());
                return;
            }

        //  If Multi Class

            bool rCorrect=false;
            float nCorrect=0;
            int resultReal;
            int resultPrediction;



            for(int i=0; i<TestData->num_data; i++)
            {

                result=fann_run(ysa, TestData->input[i]);
                resultReal=GetClass(i);
                resultPrediction=GetPredictionClass();

                if(resultReal==resultPrediction)
                        rCorrect=true;
                    else
                        rCorrect=false;

                if(rCorrect) nCorrect+=1;
                if(resultPrediction==-1)
                  sprintf(Buf,"%04d : Unknonw : %d : %s",i+1,resultReal,(resultReal==resultPrediction)? "Correct":"Wrong");
                else
                  sprintf(Buf,"%04d : %d : %d : %s",i+1,resultPrediction,resultReal,(resultReal==resultPrediction)? "Correct":"Wrong");
                Out->add(Buf);
            }
            sprintf(Buf,"@C4Classification Succes %% : %.2f ",nCorrect*100/TestData->num_data);
            Out->add(Buf);
            Out->bottomline(Out->size());
            return;
}

void FannTool::ClearLog() {
  if(working) return;
  Out->clear();
}

void FannTool::SaveLog() {
  if(working) return;
  if(Out->size()<1)return;
  char Buf[512];
  char* file=NULL;
  file = FileSelect("Save Log File", Log,Save);
  //file = fl_file_chooser("Save Log File", "*.log", file);
  if(file!=NULL){
    FILE *fp;
    fp=fopen(fNameBuf,"wt");
    if(fp){
     for(int i=1;i<=Out->size();i++){
       sprintf(Buf,"%s\n",Out->text(i));
       fputs(Buf,fp);
     }
     fclose(fp);

     Out->add("Log file Saved...");


    }

  }
}

void FannTool::LoadLog() {
  if(working) return;
  char* file=NULL;
  Out->add("Select Log File...");
  file = FileSelect("Select Log File...", Log);
  // file = fl_file_chooser("Save Log File", "*.log", file);
  if(file!=NULL)
     Out->load(fNameBuf);
}

void FannTool::StopProcess() {
  stop=true;
  Out->add("@C1Stop pressed please wait ...");
}

void FannTool::About() {
  AboutDlg *ab=new AboutDlg();
  ab->show();
}

void FannTool::Help() {
}

void FannTool::DataProcessing() {
  char *fn;
  	char Buf [512];
  	int num;

  	if(working) return;

  	fn = FileSelect("Select Raw Data File ", RawData);
  //	fn=fl_file_chooser("Select Raw Data File ","*.txt", NULL, 0);


  	if(fn){
             int num=GetnItem(fNameBuf);
             if(num==1){
               tdp=new TimeSeri();
  //             fl_alert("Time Series Raw Data File ");
               if(tdp->LoadRawData(fNameBuf)==false){
                 fl_alert("Error readingg data File :(");
                 return;
               }
  	     TDPDlg *dp=new TDPDlg(fn);
  	     dp->show();

  	     return;
             }
             else if (num>1){
               rdp=new DataProcess();
  //             rdp->LoadRawData(fn);
               if(rdp->LoadRawData(fNameBuf)==false){
                 fl_alert("Error readingg data File :(");
                 return;
               }
  	     NDPDlg *dp=new NDPDlg(fn);
  	     dp->show();
  // Ne u?a?t?d?beni ...
  //	     delete rdp;
  	     return;

             }
             else{
               fl_alert("Error in Raw Data File !");
  	     return;

             }


  	}
  	else{


  	}
}

void FannTool::LoadTrainData() {
  char *fn;
  char Buf [512];
  int num,in,out;

  if(working) return;

  fn = FileSelect("Select Train Data File ", Data);
  // fn=fl_file_chooser("Select Train Data File ","*.dat", NULL, 0);


  if(fn){
    if(TrainData)fann_destroy_train(TrainData);
    TrainData = fann_read_train_from_file(fNameBuf);
    int err=fann_get_errno( (struct fann_error *) ft.TrainData);
    if(err == FANN_E_NO_ERROR){
        Out->clear();
        Out->add("Training Data File Selected");
        sprintf(Buf,"Number of Data : %d ",TrainData->num_data);
        Out->add(Buf);
        sprintf(Buf,"# of Input Nodes  : %d ",TrainData->num_input);
        Out->add(Buf);
        sprintf(Buf,"# of Output Nodes : %d ",TrainData->num_output);
        Out->add(Buf);
        Input->value(TrainData->num_input);
        Output->value(TrainData->num_output);
        SetHiddens();
        DataFile->value(fn);
        But_Alg->activate();
        But_Act->activate();
        But_Trn->activate();

    }
    else{
     Out->add(fann_get_errstr((struct fann_error *)TrainData));

    }



  }
}

void FannTool::LoadTestData() {
  char *fn;
    char Buf [512];
    int num,in,out;

    if(working) return;

    fn = FileSelect("Select Test Data File ", Data);


    if(fn){

      if(TestData)fann_destroy_train(TestData);
      TestData = fann_read_train_from_file(fNameBuf);
      int err=fann_get_errno( (struct fann_error *) ft.TestData);
      if(err == FANN_E_NO_ERROR){
        Out->clear();
        Out->add("Test Data File Selected");
        sprintf(Buf,"Number of Data : %d ",TestData->num_data);
        Out->add(Buf);
        sprintf(Buf,"Number of Input : %d ",TestData->num_input);
        Out->add(Buf);
        sprintf(Buf,"Number of Output : %d ",TestData->num_output);
        Out->add(Buf);
        TestFile->value(fn);
        But_Test->activate();
        OverTraining->activate();
      }
      else{
        Out->add(fann_get_errstr((struct fann_error *)TestData));

      }

    }
}

void FannTool::SetFineTuning() {
  fann_set_train_error_function(ysa,(fann_errorfunc_enum)ErrorFunction->value());
      fann_set_activation_steepness_hidden(ysa,(fann_type) HiddenStepness->value());
      fann_set_activation_steepness_output(ysa,(fann_type) OutputStepness->value());
      fann_set_quickprop_decay(ysa,DecayFactor->value());
      fann_set_quickprop_mu(ysa,MuFactor->value());
      fann_set_rprop_increase_factor(ysa,IncreaseFactor->value());
      fann_set_rprop_decrease_factor(ysa,DecreaseFactor->value());
      fann_set_rprop_delta_min(ysa,DeltaMin->value());
      fann_set_rprop_delta_max(ysa,DeltaMax->value());
}

void FannTool::SetCascadeTuning() {
  fann_set_cascade_output_change_fraction(ysa,OutputChange->value());
      fann_set_cascade_output_stagnation_epochs(ysa,(unsigned int )OutputStag->value());
      fann_set_cascade_candidate_change_fraction(ysa,CandidateChange->value());
      fann_set_cascade_candidate_stagnation_epochs(ysa,  (unsigned  int)CandidateStag->value());
      fann_set_cascade_weight_multiplier(ysa,WeighMultiplier->value());
      fann_set_cascade_candidate_limit(ysa,(fann_type)CandidateLimit->value());
      fann_set_cascade_max_out_epochs(ysa,(unsigned  int)MaxOutEpoch->value());
      fann_set_cascade_max_cand_epochs(ysa,(unsigned  int)MaxCasndidatetEpoch->value());
      fann_set_cascade_num_candidate_groups(ysa,(unsigned  int)NumCandidateGroups->value());
}

void FannTool::NeuralNetworkInfo() {
  if(working) return;
    char Buf[512];
    char* file=NULL;
    Out->clear();
    file = FileSelect("Load Trained ANN", Network);
  //  file = fl_file_chooser("Load Trained ANN", "*.net", file);
    if(file!=NULL){
       ysa=fann_create_from_file(fNameBuf);

       Tabs->value(LogG);
       Tabs->redraw();

       Out->add("@C4Neural Network ");
       Out->add(file);
       Out->add("");
   //
       NetInfo *op=new NetInfo();
        op->show(ysa);




    }
}

void FannTool::CreateDesiredANN() {
  if(Layer->value()==5)
    ysa = fann_create_sparse(ConnectionRate->value(),5,(int)Input->value(),(int)Hid1->value(),(int)Hid2->value(),(int)Hid3->value(),(int)Output->value());
  else if(Layer->value()==4)
    ysa = fann_create_sparse(ConnectionRate->value(),4,(int)Input->value(),(int)Hid1->value(),(int)Hid2->value(),(int)Output->value());
  else
    ysa = fann_create_sparse(ConnectionRate->value(),3,(int)Input->value(),(int)Hid1->value(),(int)Output->value());

  // Set Fine Tuning Parameters
}

void FannTool::ActivateStop() {
  stop=false;
  Stop->activate();
  working=true;
}

void FannTool::DeactivateStop() {
  stop=false;
  Stop->deactivate();
  working=false;
}

void FannTool::SaveANN() {
  SaveDlg *save=new SaveDlg();
  save->show();
}

void FannTool::ClearTrainingMemory() {
  for(int i=0; i<4; i++) {
      MinTrainingMSE[i]=MinTestingMSE[i]=1;
    }
}

int FannTool::GetClass(int i) {
  int resultReal=-1;
      fann_type maxReal=-1.0;


      for(int j=0; j<ysa->num_output; j++)
      {

          if(TestData->output[i][j]>maxReal)
          {
              maxReal=TestData->output[i][j];
              resultReal=j;
          }
      }

      return resultReal;
}

int FannTool::GetPredictionClass() {
  fann_type maxCalc0, maxCalc1;
      int resultCalc0,resultCalc1;
      maxCalc0=maxCalc1=-2;

      for(int j=0; j<ysa->num_output; j++)
      {

          if(result[j]>=maxCalc0)
          {
              maxCalc1=maxCalc0;
              maxCalc0=result[j];
              resultCalc1=resultCalc0;
              resultCalc0=j;
          }
      }

      if(maxCalc0==maxCalc1)
          return -1;
      if(maxCalc0<0.5)
          return -1;
      return resultCalc0;
}

void GetInputs::cb_Run_i(Fl_Button*, void*) {
  if(tseries)
  RunTS();
else
  Run();
}
void GetInputs::cb_Run(Fl_Button* o, void* v) {
  ((GetInputs*)(o->parent()->user_data()))->cb_Run_i(o,v);
}

GetInputs::GetInputs(bool ts) {
  tseries=ts;
  // data=new fann_type[ninputs];
  { Fl_Double_Window* o = window = new Fl_Double_Window(610, 328, "Run ANN");
    window->box(FL_PLASTIC_UP_BOX);
    window->color((Fl_Color)21);
    window->user_data((void*)(this));
    window->align(Fl_Align(FL_ALIGN_CENTER));
    { Grid = new Fl_Scroll(10, 25, 235, 245, "Inputs");
      Grid->box(FL_DOWN_BOX);
      Grid->when(FL_WHEN_CHANGED);
      Grid->end();
    } // Fl_Scroll* Grid
    { Ok = new Fl_Return_Button(355, 285, 235, 30, "Ok");
      Ok->box(FL_PLASTIC_UP_BOX);
      Ok->color(FL_SELECTION_COLOR);
      Ok->callback((Fl_Callback*)cb_Ok, (void*)("GetInputs"));
    } // Fl_Return_Button* Ok
    { GridOut = new Fl_Scroll(355, 25, 235, 245, "Outputs");
      GridOut->box(FL_DOWN_BOX);
      GridOut->color((Fl_Color)19);
      GridOut->when(FL_WHEN_CHANGED);
      GridOut->end();
    } // Fl_Scroll* GridOut
    { Fl_Button* o = new Fl_Button(255, 135, 90, 30, "Run @->");
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Run);
    } // Fl_Button* o
    { kere = new Fl_Spinner(260, 86, 75, 24, "Times");
      kere->step(10);
      kere->value(10);
      kere->align(Fl_Align(FL_ALIGN_BOTTOM));
      if(tseries==false) kere->hide();
    } // Fl_Spinner* kere
    o->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void GetInputs::show(struct fann *iann) {
  ann=iann;
    ninputs=fann_get_num_input(ann);
    noutputs=fann_get_num_output(ann);
    data=new fann_type[ninputs];

    char *Num;
    Fl_Float_Input *f;

  //  Grid->position(0,0);
    Grid->begin();
    for(int i=0;i<ninputs;i++){
      Num= new char[10];
      sprintf(Num," %03d : ",i+1);
    // SCROLL ?? EK YAPARKEN SCROLLUN POZ?YONU ?ER?DEN EKLE  !!!
      f=new Fl_Float_Input(Grid->x()+70,Grid->y()+20*i+3,70,20,Num);
      if(tseries && ft.TestData){
         char buf[256];
         sprintf(buf,"%lf",ft.TestData->input[0][i]);
         f->value(buf);
       Grid->add(f);

      }

    }
    Grid->end();

  //  GridOut->position(0,0);
    GridOut->begin();
    for(int i=0;i<noutputs;i++){
      Num= new char[10];
      sprintf(Num," %03d : ",i+1);
    // SCROLL ?? EK YAPARKEN SCROLLUN POZ?YONU ?ER?DEN EKLE  !!!
      f=new Fl_Float_Input(GridOut->x()+70,GridOut->y()+20*i+3,70,20,Num);
      GridOut->add(f);
    }
    Fl::focus(GridOut->child(0));
    GridOut->end();
    GridOut->redraw();

    Fl::focus(Grid->child(0));
    window->show();
}

void GetInputs::hide() {
  window->hide();
  delete data;
}

void GetInputs::Run() {
  char buf[10];

  Fl_Float_Input *f;

  for(int i=0;i<ninputs;i++){
     f=(Fl_Float_Input *)Grid->child(i);
     data[i]=atof(f->value());
  }

  result=fann_run(ann, data);

  for(int i=0;i<noutputs;i++){
     sprintf(buf,"%lf",result[i]);
     f=(Fl_Float_Input *)GridOut->child(i);
     f->value(buf);
  }

  Fl::focus(GridOut->child(0));
  GridOut->end();
  GridOut->redraw();
}

void GetInputs::RunTS() {
  char buf[512];
  Fl_Float_Input *f;


  int max=kere->value();
  Out->add("Inputs...");
  for(int i=0;i<ninputs;i++){
     f=(Fl_Float_Input *)Grid->child(i);
     Out->add(f->value());
     data[i]=atof(f->value());
  }

  Out->add("Forecasts...");


  for(int i=0;i<max;i++){
     result=fann_run(ann, data);
     sprintf(buf,"%f",result[0]);
     Out->add(buf);

     if(i<max) {
       for(int j=0;j<ninputs-1;j++)
          data[j]=data[j+1];
       data[ninputs-1]=result[0];
     }
  }

  for(int i=0;i<ninputs;i++){
     f=(Fl_Float_Input *)Grid->child(i);
     sprintf(buf,"%lf",data[i]);
     f->value(buf);
  }

  sprintf(buf,"%lf",result[0]);
  f=(Fl_Float_Input *)GridOut->child(0);
  f->value(buf);
}

void NetInfo::cb_WLabel_i(Fl_Choice*, void*) {
  WValue->value(weights[WLabel->value()]);
}
void NetInfo::cb_WLabel(Fl_Choice* o, void* v) {
  ((NetInfo*)(o->parent()->user_data()))->cb_WLabel_i(o,v);
}

NetInfo::NetInfo() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(533, 374, "Neural Network Information");
    window->box(FL_PLASTIC_UP_BOX);
    window->color((Fl_Color)21);
    window->user_data((void*)(this));
    window->align(Fl_Align(FL_ALIGN_CENTER));
    { Ok = new Fl_Return_Button(362, 330, 161, 30, "Ok");
      Ok->box(FL_PLASTIC_UP_BOX);
      Ok->color(FL_SELECTION_COLOR);
      Ok->callback((Fl_Callback*)cb_Ok, (void*)("GetInputs"));
    } // Fl_Return_Button* Ok
    { Input = new Fl_Value_Output(50, 56, 50, 24, "Input Layer  + 1 Bias");
      Input->box(FL_PLASTIC_UP_BOX);
      Input->color(FL_DARK_CYAN);
      Input->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Value_Output* Input
    { Hidden = new Fl_Browser(160, 31, 242, 71, "Hidden Layers");
      Hidden->box(FL_PLASTIC_UP_BOX);
      Hidden->color(FL_DARK_CYAN);
      Hidden->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Browser* Hidden
    { Fl_Box* o = new Fl_Box(115, 53, 35, 27, "@+4->");
      o->labelcolor(FL_SELECTION_COLOR);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(415, 53, 30, 27, "@+4->");
      o->labelcolor(FL_SELECTION_COLOR);
    } // Fl_Box* o
    { Output = new Fl_Value_Output(460, 51, 50, 24, "Output Layer");
      Output->box(FL_PLASTIC_UP_BOX);
      Output->color(FL_DARK_CYAN);
      Output->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Value_Output* Output
    { NType = new Fl_Output(150, 131, 290, 24, "Network Type :");
    } // Fl_Output* NType
    { Alg = new Fl_Output(150, 165, 290, 24, "Training Algorithm :");
    } // Fl_Output* Alg
    { Err = new Fl_Output(150, 206, 290, 24, "Error Function :");
      Err->window()->hotspot(Err);
    } // Fl_Output* Err
    { Stop = new Fl_Output(150, 240, 290, 24, "Stop Function :");
      Stop->window()->hotspot(Stop);
    } // Fl_Output* Stop
    { WLabel = new Fl_Choice(77, 285, 243, 25, "Weights : ");
      WLabel->down_box(FL_BORDER_BOX);
      WLabel->callback((Fl_Callback*)cb_WLabel);
    } // Fl_Choice* WLabel
    { WValue = new Fl_Value_Output(350, 286, 115, 24, "@+4->");
      WValue->color(FL_BACKGROUND2_COLOR);
      WValue->labelcolor(FL_SELECTION_COLOR);
    } // Fl_Value_Output* WValue
    o->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void NetInfo::show(struct fann *iann) {
  ann=iann;

    char buf[512];
    int j=1;
    struct fann_layer *layer_it;

    Input->value( ann->num_input );
    Output->value( ann->num_output );

    sprintf(buf, "Input layer                          :%4d neurons, 1 bias\n", ann->num_input);
    Out->add(buf);
    for(layer_it = ann->first_layer + 1; layer_it != ann->last_layer - 1; layer_it++)
    {
      if(ann->network_type == FANN_NETTYPE_SHORTCUT){
        sprintf(buf,"  Hidden layer  %d                    :%4d neurons, 0 bias\n",j,
  				   layer_it->last_neuron - layer_it->first_neuron);
        Out->add(buf);
        sprintf(buf," Layer %d : %4d neurons, 0 bias\n",j,
  				   layer_it->last_neuron - layer_it->first_neuron);
        Hidden->add(buf);
      }
      else{
        sprintf(buf,"  Hidden layer  %d                    :%4d neurons, +1 bias\n",j,
  				   layer_it->last_neuron - layer_it->first_neuron - 1);
        Out->add(buf);
        sprintf(buf," Layer %d : %4d neurons, +1 bias\n",j,
  				   layer_it->last_neuron - layer_it->first_neuron -1);
        Hidden->add(buf);
      }
      j++;
    }
    sprintf(buf,"Output layer                         :%4d neurons\n", ann->num_output);
    Out->add(buf);
    sprintf(buf,"Total neurons and biases             :%4d\n", fann_get_total_neurons(ann));
    Out->add(buf);
    sprintf(buf,"Total connections                    :%4d\n", ann->total_connections);
    Out->add(buf);
    sprintf(buf,"Connection rate                      :%8.3f\n", ann->connection_rate);
    Out->add(buf);
    sprintf(buf,"Network type                         :   %s\n", FANN_NETTYPE_NAMES[ann->network_type]);
    Out->add(buf);
    NType->value(FANN_NETTYPE_NAMES[ann->network_type]);
    sprintf(buf,"Training algorithm                   :   %s\n", FANN_TRAIN_NAMES[ann->training_algorithm]);
    Out->add(buf);
    Alg->value(FANN_TRAIN_NAMES[ann->training_algorithm]);
    sprintf(buf,"Training error function              :   %s\n", FANN_ERRORFUNC_NAMES[ann->train_error_function]);
    Out->add(buf);
    Err->value(FANN_ERRORFUNC_NAMES[ann->train_error_function]);
    sprintf(buf,"Training stop function               :   %s\n", FANN_STOPFUNC_NAMES[ann->train_stop_function]);
    Stop->value(FANN_STOPFUNC_NAMES[ann->train_stop_function]);
    Out->add(buf);
    sprintf(buf,"Bit fail limit                       :%8.3f\n", ann->bit_fail_limit);
    Out->add(buf);
    sprintf(buf,"Learning rate                        :%8.3f\n", ann->learning_rate);
    Out->add(buf);
    sprintf(buf,"Learning momentum                    :%8.3f\n", ann->learning_momentum);
    Out->add(buf);
    sprintf(buf,"Quickprop decay                      :%11.6f\n", ann->quickprop_decay);
    Out->add(buf);
    sprintf(buf,"Quickprop mu                         :%8.3f\n", ann->quickprop_mu);
    Out->add(buf);
    sprintf(buf,"RPROP increase factor                :%8.3f\n", ann->rprop_increase_factor);
    Out->add(buf);
    sprintf(buf,"RPROP decrease factor                :%8.3f\n", ann->rprop_decrease_factor);
    Out->add(buf);
    sprintf(buf,"RPROP delta min                      :%8.3f\n", ann->rprop_delta_min);
    Out->add(buf);
    sprintf(buf,"RPROP delta max                      :%8.3f\n", ann->rprop_delta_max);
    Out->add(buf);
    sprintf(buf,"Cascade output change fraction       :%11.6f\n", ann->cascade_output_change_fraction);
    Out->add(buf);
    sprintf(buf,"Cascade candidate change fraction    :%11.6f\n", ann->cascade_candidate_change_fraction);
    Out->add(buf);
    sprintf(buf,"Cascade output stagnation epochs     :%4d\n", ann->cascade_output_stagnation_epochs);
    Out->add(buf);
    sprintf(buf,"Cascade candidate stagnation epochs  :%4d\n", ann->cascade_candidate_stagnation_epochs);
    Out->add(buf);
    sprintf(buf,"Cascade max output epochs            :%4d\n", ann->cascade_max_out_epochs);
    Out->add(buf);
    sprintf(buf,"Cascade max candidate epochs         :%4d\n", ann->cascade_max_cand_epochs);
    Out->add(buf);
    sprintf(buf,"Cascade weight multiplier            :%8.3f\n", ann->cascade_weight_multiplier);
    Out->add(buf);
    sprintf(buf,"Cascade candidate limit              :%8.3f\n", ann->cascade_candidate_limit);
    Out->add(buf);
    for(unsigned int i = 0; i < ann->cascade_activation_functions_count; i++){
      sprintf(buf,"Cascade activation functions[%d]      :   %s\n", i,
  			FANN_ACTIVATIONFUNC_NAMES[ann->cascade_activation_functions[i]]);
      Out->add(buf);
     }
     for(unsigned int i = 0; i < ann->cascade_activation_steepnesses_count; i++){
       sprintf(buf,"Cascade activation steepnesses[%d]    :%8.3f\n", i,
  			ann->cascade_activation_steepnesses[i]);
       Out->add(buf);
     }

     sprintf(buf,"Cascade candidate groups             :%4d\n", ann->cascade_num_candidate_groups);
     Out->add(buf);
     sprintf(buf,"Cascade no. of candidates            :%4d\n", fann_get_cascade_num_candidates(ann));
     Out->add(buf);
     window->show();
   //
      struct fann_neuron *first_neuron;
      struct fann_neuron *neuron_it;
      unsigned int index;
      unsigned int source_index;
      unsigned int destination_index;
      int lyr=0;

      first_neuron = ann->first_layer->first_neuron;

      source_index = 0;
      destination_index = 0;


      /* The following assumes that the last unused bias has no connections */

      /* for each layer */
      for(layer_it = ann->first_layer; layer_it != ann->last_layer; layer_it++,lyr++){
        sprintf(buf,"Layer %d ",lyr);
        Out->add(buf);
          /* for each neuron */
          for(neuron_it = layer_it->first_neuron; neuron_it != layer_it->last_neuron; neuron_it++){
              /* for each connection */

              int linx=0;
              for (index = neuron_it->first_con; index < neuron_it->last_con; index++){


                  sprintf(buf," From Neuron To Neuron  ( %d ---> %d ) :  Weight : %lf",linx ,destination_index,ann->weights[source_index]);
  /*
                  sprintf(buf," From Neuron To Neuron  ( %d ---> %d ) :  Weight : %lf"
                      ,(ann->connections[source_index] - first_neuron),destination_index,ann->weights[source_index]);
  */
                  Out->add(buf);
  //                sprintf(buf,"From Neuron  %d To Neuron %d ",(ann->connections[source_index] - first_neuron),destination_index);
                  sprintf(buf,"From Neuron  %d To Neuron %d ",linx++,destination_index);
                  WLabel->add(buf);
                  weights.push_back(ann->weights[source_index]);
                  source_index++;
              }
              destination_index++;
          }
      }
      WLabel->value(0);
      WValue->value(weights[0]);

     //



     window->show();
}

void NetInfo::hide() {
  window->hide();
}

#include <FL/Fl_JPEG_Image.H>
static unsigned char idata_Logo6[] =
{255,216,255,224,0,16,74,70,73,70,0,1,1,1,0,100,0,100,0,0,255,219,0,67,0,6,
4,5,6,5,4,6,6,5,6,7,7,6,8,10,16,10,10,9,9,10,20,14,15,12,16,23,20,24,24,23,20,
22,22,26,29,37,31,26,27,35,28,22,22,32,44,32,35,38,39,41,42,41,25,31,45,48,45,
40,48,37,40,41,40,255,219,0,67,1,7,7,7,10,8,10,19,10,10,19,40,26,22,26,40,40,
40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,
40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,255,192,0,17,
8,0,114,1,242,3,1,34,0,2,17,1,3,17,1,255,196,0,28,0,0,1,5,1,1,1,0,0,0,0,0,0,0,
0,0,0,0,4,5,6,7,8,3,1,2,255,196,0,82,16,0,1,3,3,1,3,8,5,7,7,10,4,4,7,0,0,1,0,
2,3,4,5,17,6,18,33,49,7,19,65,81,97,113,129,177,34,50,145,161,209,20,21,66,82,
114,116,193,51,54,85,98,100,146,178,8,22,23,35,83,115,130,147,148,162,36,67,225,
240,39,84,99,164,52,53,86,131,210,226,227,255,196,0,27,1,0,2,3,1,1,1,0,0,0,0,0,
0,0,0,0,0,0,5,3,4,6,2,1,7,255,196,0,58,17,0,1,3,2,3,3,9,6,6,2,3,1,0,0,0,0,1,0,
2,3,4,17,5,33,49,18,65,81,6,19,34,97,113,129,161,177,193,20,50,145,209,225,
240,21,35,51,66,82,241,52,98,22,36,114,178,255,218,0,12,3,1,0,2,17,3,17,0,63,0,
213,40,66,16,132,33,9,29,109,194,42,92,143,94,64,50,90,15,14,243,208,132,37,139,
156,181,16,197,249,89,88,206,194,112,171,235,230,186,130,39,58,56,100,117,67,
254,172,39,101,131,189,221,62,10,33,87,171,110,83,19,204,152,105,219,250,140,4,
251,93,149,118,42,9,164,206,214,29,105,100,248,189,52,38,215,185,234,251,178,
186,13,206,140,31,203,15,6,147,248,33,183,58,71,29,211,1,222,8,84,60,151,187,
163,206,77,194,168,125,153,11,124,151,177,95,110,177,156,182,225,82,126,219,203,
188,213,143,194,100,254,65,83,255,0,144,69,127,112,248,45,1,28,209,202,51,20,
140,127,217,57,95,106,142,162,214,23,8,92,62,80,216,170,0,233,45,216,119,181,
191,5,52,176,235,122,122,167,54,55,74,89,33,255,0,151,57,227,220,255,0,138,173,
45,12,209,102,69,199,82,189,79,138,211,78,108,29,99,192,229,244,83,212,36,212,
149,145,84,140,48,150,188,113,99,183,16,147,220,46,208,82,53,248,115,92,88,61,
39,23,97,173,239,42,158,169,137,54,204,167,21,198,90,168,34,221,36,172,105,234,
46,222,171,123,222,187,140,23,71,76,95,82,239,213,59,17,143,196,168,181,78,171,
186,76,79,55,36,112,52,244,68,193,230,114,85,232,176,233,164,23,181,187,82,169,
241,138,104,77,129,218,61,74,235,55,74,48,127,45,236,105,63,130,245,183,42,71,
28,9,218,59,193,30,106,133,125,234,232,243,147,113,171,29,210,184,121,21,247,
21,254,235,22,54,107,231,63,109,219,126,121,83,254,19,39,242,10,168,229,4,87,
205,135,193,104,8,228,100,131,49,189,174,29,109,57,95,74,147,160,214,117,176,61,
166,166,40,230,3,233,51,250,183,251,70,239,114,156,88,53,149,61,113,108,109,151,
106,67,255,0,42,92,53,254,7,131,188,213,89,168,166,132,92,140,186,149,250,108,
78,158,160,236,181,214,60,14,74,104,133,198,154,170,42,150,23,68,238,28,65,220,
71,122,110,185,223,41,232,226,115,195,216,26,222,50,61,216,96,248,248,42,160,
19,144,87,201,0,92,167,117,194,74,202,120,183,62,104,193,234,206,245,88,222,
117,216,121,115,41,90,250,131,245,159,232,51,247,70,243,227,133,26,168,213,23,
89,137,217,168,108,45,234,137,128,123,248,251,213,232,240,217,158,46,69,187,82,
169,177,170,104,141,129,218,236,87,105,186,81,255,0,109,254,211,240,95,108,184,
210,60,238,157,131,191,119,154,160,221,121,186,56,228,220,106,252,38,112,252,87,
104,117,13,218,47,86,186,87,127,121,135,249,229,76,112,153,55,56,42,195,148,16,
223,54,31,5,127,177,237,123,114,199,7,14,176,114,189,84,197,183,91,85,64,241,
242,168,90,241,245,225,59,14,248,31,114,157,216,117,109,61,192,0,201,4,167,165,
132,108,200,223,14,159,5,78,106,57,97,205,195,36,198,155,17,167,169,54,99,179,
224,114,42,88,133,202,42,136,165,139,157,99,193,96,226,122,187,211,61,227,81,83,
208,194,94,100,100,108,254,210,78,159,178,56,149,92,2,227,96,174,185,193,163,
105,198,193,62,146,0,201,73,228,174,166,143,214,157,153,234,7,42,171,187,235,
167,74,226,41,34,116,191,175,57,192,240,104,248,168,253,70,166,187,76,78,42,140,
99,170,54,134,227,196,12,171,241,225,179,60,92,229,218,148,77,141,211,70,108,
219,187,177,93,255,0,58,81,255,0,109,254,199,124,23,70,87,210,191,213,157,158,
39,30,106,130,55,155,153,57,249,198,179,252,231,124,82,136,117,29,218,35,186,
177,239,29,82,0,255,0,48,165,56,76,155,156,20,13,229,4,55,205,135,193,95,173,
112,112,203,72,35,172,47,85,59,107,215,51,66,241,242,184,113,214,250,115,178,
124,90,119,31,114,159,89,53,61,61,124,123,76,149,179,52,122,197,163,14,111,218,
106,165,53,44,176,230,241,146,103,77,95,5,78,81,187,62,27,212,145,11,230,57,25,
43,3,227,112,115,79,2,23,210,174,174,33,9,37,93,124,52,196,183,123,228,250,173,
232,239,234,81,171,142,165,13,37,173,151,127,213,135,241,119,193,118,200,220,
243,102,139,168,165,158,56,70,212,142,178,151,185,205,104,203,136,3,172,149,200,
213,211,142,51,196,63,198,21,115,61,238,105,29,150,198,193,218,242,92,82,115,
118,172,206,233,24,59,163,111,193,90,109,4,167,91,4,181,248,221,51,78,87,61,223,
59,43,65,147,196,255,0,82,88,221,220,224,87,69,86,178,239,84,61,110,105,253,
236,3,203,9,198,143,81,190,50,3,132,145,246,177,219,77,253,210,185,117,20,173,
221,117,220,120,197,51,205,137,183,104,86,10,19,29,190,253,28,237,5,229,175,111,
75,227,226,59,219,197,61,71,35,37,96,124,110,14,105,224,66,170,65,6,197,50,107,
154,241,180,211,112,190,144,144,86,92,225,167,218,13,196,143,111,28,28,6,247,
149,25,184,106,108,146,214,72,231,246,69,232,183,219,197,116,200,159,33,179,69,
212,115,84,69,0,188,142,178,153,189,237,96,203,220,26,59,78,23,51,87,76,14,250,
136,127,124,42,222,91,212,239,113,44,142,54,246,144,92,125,235,137,186,214,127,
104,209,255,0,219,111,193,90,20,18,158,9,107,177,186,102,156,174,123,190,170,
209,100,209,191,212,145,142,238,112,43,237,85,204,188,84,143,89,177,63,189,184,
242,194,115,161,212,142,140,128,243,36,94,59,109,246,21,203,232,165,110,235,169,
98,197,233,164,54,189,187,84,249,9,162,130,247,20,236,6,66,221,147,255,0,49,
135,45,241,28,66,118,107,154,230,135,52,130,211,191,35,130,170,65,25,20,200,16,
225,113,162,245,9,178,182,239,12,13,119,54,90,236,113,121,56,104,241,233,81,138,
253,74,92,72,99,228,147,177,158,131,126,37,119,28,79,147,221,23,80,207,85,20,2,
242,58,202,112,249,24,207,93,237,111,121,194,229,242,186,111,252,196,63,190,21,
109,37,230,161,196,236,50,38,127,135,39,222,185,252,235,89,253,163,123,185,182,
252,21,161,65,41,224,151,59,27,167,7,32,79,119,213,90,76,145,143,245,30,215,119,
28,175,165,87,199,121,168,105,27,108,137,255,0,225,193,247,39,122,13,76,90,64,
123,228,143,177,254,155,126,33,70,250,57,89,157,174,166,139,22,166,144,219,106,
221,191,118,83,148,38,202,43,188,51,181,188,225,107,51,193,224,229,167,199,161,
57,131,149,84,228,152,130,8,184,66,16,132,47,80,132,33,8,66,16,144,93,235,69,
37,57,195,131,94,65,59,71,131,90,56,184,161,9,30,161,189,195,110,167,144,186,
81,27,89,185,242,113,193,250,163,172,170,130,255,0,168,106,110,175,116,108,38,
26,76,238,140,29,238,237,113,233,62,229,241,169,175,47,187,86,157,130,225,73,
25,196,109,61,63,172,123,74,103,90,26,42,17,16,15,120,233,121,44,126,39,138,58,
119,24,162,54,103,159,209,8,66,19,20,149,8,66,16,132,33,8,66,20,143,79,234,138,
139,118,204,85,91,115,211,1,232,224,250,108,238,61,93,137,190,245,122,170,186,
203,253,107,182,32,7,208,133,167,209,111,196,246,166,196,40,91,79,27,95,206,1,
154,178,234,201,157,16,133,206,232,161,8,66,153,86,66,16,132,33,8,25,7,35,138,
16,132,41,77,159,87,79,73,78,248,171,154,250,156,55,17,191,107,14,238,113,233,
30,244,199,116,185,213,92,231,231,42,164,206,61,86,13,205,104,234,1,34,66,133,
148,241,177,197,237,25,149,102,74,201,165,140,70,247,18,7,223,122,16,132,41,149,
100,33,8,66,16,189,141,238,141,237,124,110,45,123,78,67,154,112,65,94,33,8,82,
202,45,101,60,84,18,71,83,23,61,82,0,12,147,56,14,251,99,167,30,245,27,175,173,
168,175,168,51,85,202,233,36,61,39,128,29,64,116,4,157,10,24,233,227,136,151,48,
88,149,102,106,201,167,104,100,142,184,8,66,16,166,85,144,132,33,8,66,233,77,
60,180,211,54,106,121,29,28,173,57,14,105,193,11,154,16,69,242,40,4,131,112,
172,173,29,171,140,242,182,10,130,214,85,30,142,13,155,224,239,251,236,82,235,
173,238,56,169,243,27,203,27,143,73,196,111,207,213,29,170,174,209,118,134,84,
72,251,149,104,197,37,49,203,65,250,110,31,15,60,39,107,141,99,235,106,11,221,
185,131,115,91,212,18,57,104,227,124,228,71,160,215,228,22,158,44,82,88,105,67,
165,205,199,78,206,39,239,53,247,95,113,150,168,150,131,177,14,125,80,120,247,
158,148,133,8,87,152,198,176,108,180,36,50,202,249,157,183,33,185,94,161,120,
133,218,141,122,188,66,16,133,247,20,143,138,64,248,156,88,241,192,130,159,104,
175,197,144,72,38,47,99,200,222,35,220,36,248,21,31,66,134,88,25,47,188,21,170,
106,201,105,141,227,63,36,170,182,186,106,179,135,157,152,199,6,55,128,248,164,
171,229,242,50,49,153,28,214,142,25,113,194,245,143,107,219,180,199,7,55,172,28,
169,26,214,180,108,181,67,35,223,35,182,222,110,87,210,23,136,93,40,215,171,196,
33,8,93,105,231,150,158,64,248,94,90,238,206,158,244,249,21,248,10,39,53,219,
97,253,49,52,250,46,61,125,131,177,71,151,196,146,199,25,2,73,24,210,122,28,
224,20,18,193,28,185,184,43,116,213,179,83,220,70,117,74,170,234,166,170,126,
212,206,200,28,26,55,1,220,23,4,2,8,200,224,133,43,90,26,44,21,103,189,207,37,
206,55,43,212,33,121,149,210,229,122,188,70,208,235,8,218,29,97,8,93,233,42,166,
165,126,212,46,192,60,90,119,131,222,20,198,193,124,107,218,26,73,217,30,180,
100,228,179,180,117,133,7,218,29,97,125,67,51,161,149,178,70,253,151,180,228,21,
90,162,153,179,11,239,76,40,113,23,210,186,218,183,135,201,92,12,123,94,192,
230,16,90,70,65,11,213,25,211,87,102,76,198,130,64,99,142,11,115,234,59,224,84,
153,35,115,75,9,105,213,108,163,145,178,180,61,134,224,161,8,66,229,118,133,88,
114,147,120,60,207,201,227,119,165,82,119,246,70,15,226,124,138,177,174,82,24,
168,102,112,226,70,200,239,59,149,23,171,170,190,85,127,170,32,229,145,30,101,
189,129,187,188,242,175,225,209,9,38,185,208,102,148,227,53,6,26,114,27,171,178,
249,166,116,33,11,70,177,106,103,201,63,231,67,190,238,255,0,54,171,137,83,188,
147,254,116,59,238,239,243,106,184,150,119,19,253,126,229,177,192,191,197,239,
40,66,169,121,72,186,220,105,53,59,226,164,175,171,130,33,19,14,196,83,57,163,
56,234,5,69,254,127,188,126,150,184,127,169,127,197,119,22,24,233,24,30,29,170,
226,124,110,56,100,116,101,135,35,101,160,150,119,190,255,0,243,187,135,222,36,
254,34,186,252,255,0,120,253,45,112,255,0,82,255,0,138,110,145,238,146,71,62,71,
23,61,196,151,57,199,36,147,210,83,10,58,55,83,18,73,189,210,124,75,18,109,107,
90,26,219,89,120,166,28,151,91,126,91,168,197,75,219,152,168,217,206,127,136,
238,104,243,62,10,30,174,126,76,173,159,32,211,76,153,227,18,213,187,157,57,250,
188,27,238,223,226,187,175,151,155,132,219,83,146,227,8,167,231,170,91,125,27,
159,203,197,75,144,163,60,161,220,223,107,211,114,73,11,246,39,146,70,71,25,29,
7,59,71,220,210,159,173,213,76,174,160,166,170,139,212,154,54,200,59,50,50,
179,166,50,24,36,220,114,91,17,59,76,166,33,168,0,252,85,33,174,45,159,53,106,
90,184,90,220,69,33,231,163,251,46,223,238,57,30,9,133,90,220,174,91,57,235,
109,53,198,54,250,116,238,230,222,127,85,220,61,135,248,149,82,180,180,114,243,
176,135,111,209,98,113,42,127,103,168,115,70,135,49,222,132,247,162,63,59,45,
159,223,15,34,153,19,230,136,252,236,182,127,124,60,138,150,127,211,119,97,80,
82,254,179,59,71,154,190,82,123,133,28,55,10,41,169,42,153,183,12,205,217,112,
252,123,210,132,158,158,178,26,138,154,168,35,119,245,180,207,107,36,111,72,203,
67,129,238,193,247,21,146,23,212,110,95,65,118,201,27,46,222,168,77,69,104,154,
201,117,154,138,125,251,39,44,126,48,30,211,192,255,0,223,74,109,87,126,187,211,
194,251,106,38,22,143,150,193,151,194,126,183,91,124,124,213,25,36,241,68,231,
54,71,181,174,105,193,105,59,193,238,90,122,58,143,104,101,247,141,86,27,18,
163,246,57,109,251,78,159,46,229,114,242,79,249,174,255,0,188,191,201,169,247,
87,254,107,93,126,238,255,0,36,193,201,20,140,151,74,189,209,187,104,124,165,
227,62,13,79,154,209,226,61,37,119,121,201,13,166,121,221,220,146,76,63,237,145,
214,181,20,196,126,30,15,250,250,42,17,61,232,127,206,203,103,247,195,200,168,
147,174,141,250,49,19,222,112,159,116,13,193,210,235,59,75,57,176,3,166,3,142,
122,10,209,206,199,115,78,236,43,21,75,43,57,246,11,239,30,107,69,36,247,10,56,
110,20,83,82,85,51,110,25,155,178,225,248,247,165,9,45,45,124,21,85,117,180,209,
59,51,82,61,172,149,189,35,105,129,192,247,16,239,113,89,22,223,81,185,125,25,
219,62,235,183,228,168,109,69,104,158,201,117,154,142,125,251,39,44,126,48,30,
211,192,255,0,223,74,109,87,79,40,218,109,218,130,200,227,72,75,110,20,217,124,
36,28,109,245,176,247,249,227,181,103,89,36,152,61,205,145,242,7,3,130,28,78,
65,234,90,154,25,189,170,59,223,49,170,193,98,180,198,134,109,144,58,39,79,151,
114,208,92,147,254,107,191,239,15,242,106,124,214,4,13,45,117,36,224,124,153,
251,252,20,95,145,34,78,141,144,146,73,249,91,255,0,133,170,71,174,255,0,51,111,
95,116,147,248,82,41,219,106,194,63,217,106,169,93,124,56,59,253,125,21,4,106,
33,28,101,103,239,5,247,74,246,85,85,67,79,11,218,233,101,120,99,64,235,39,10,
54,165,252,152,81,182,163,81,26,137,49,177,75,19,164,201,235,59,135,153,62,11,
77,61,161,141,210,112,11,15,72,93,81,59,34,27,207,246,167,55,122,138,123,117,
37,53,170,7,250,16,180,23,224,113,61,190,126,41,156,214,68,62,177,240,73,43,39,
53,53,115,76,238,47,113,43,138,167,12,1,140,0,235,191,181,77,87,90,102,148,185,
186,104,59,6,139,142,173,190,69,106,211,55,74,226,31,152,41,222,230,227,30,182,
55,123,240,178,251,181,173,71,209,150,180,247,204,71,226,180,237,202,130,150,
231,69,45,29,124,45,158,154,92,7,198,238,14,193,207,152,9,131,250,63,210,159,
160,232,253,135,226,171,85,209,190,103,2,195,96,21,252,51,21,138,145,142,18,180,
146,78,235,44,250,117,181,111,209,125,87,141,75,151,195,181,181,199,126,204,147,
142,250,135,21,215,149,122,107,125,14,183,173,162,180,211,71,77,77,78,216,217,
177,24,220,93,178,28,79,191,30,9,247,144,221,55,65,126,186,220,228,186,210,199,
85,77,79,3,90,25,32,220,30,231,110,61,248,105,246,165,13,133,238,151,154,7,53,
169,125,84,81,211,123,83,155,149,129,182,252,212,101,218,214,235,244,102,144,
119,202,255,0,138,189,57,13,184,215,85,233,90,154,218,199,237,190,106,151,53,
153,46,62,139,64,29,39,172,185,58,255,0,71,250,83,244,29,31,176,252,83,237,174,
221,71,105,161,101,37,186,158,58,106,88,242,91,27,6,0,201,201,247,148,214,150,
133,241,63,105,230,235,53,136,227,49,84,195,205,196,210,13,250,145,168,181,61,
46,159,181,203,95,116,153,177,64,205,192,1,151,61,221,13,104,233,37,80,58,175,
150,93,67,117,157,236,181,72,45,148,89,195,91,24,6,71,14,183,59,160,247,99,197,
49,242,165,171,31,170,117,28,134,25,9,182,210,147,29,51,71,2,58,95,222,236,123,
48,190,185,49,209,50,107,11,163,249,231,62,27,101,54,12,242,183,139,137,224,
198,246,158,190,129,224,170,207,80,249,228,230,161,211,205,50,162,160,138,138,
15,105,171,204,235,158,238,171,113,76,19,234,27,173,68,134,73,235,31,35,207,23,
60,7,31,105,8,165,212,55,122,57,68,148,151,9,224,144,125,56,157,178,125,161,
106,139,86,149,177,90,169,91,79,69,106,163,99,0,193,46,136,57,206,239,113,201,
62,42,39,202,95,39,150,187,173,146,170,178,215,71,13,45,210,6,25,88,96,96,96,
151,27,203,92,6,226,72,224,120,231,8,126,27,35,91,180,13,202,34,229,12,18,72,35,
115,8,105,202,255,0,48,163,60,154,242,187,90,234,184,109,154,166,163,156,142,66,
25,21,105,0,22,187,160,63,28,71,235,116,116,245,139,195,158,147,235,187,218,
177,34,212,220,146,94,159,124,208,244,51,78,226,250,138,124,211,74,227,196,150,
240,61,251,37,170,124,58,164,190,241,191,62,10,150,61,135,182,16,42,34,200,28,
136,245,83,78,118,79,237,31,251,197,69,181,222,184,161,210,20,66,74,183,190,106,
201,65,230,105,88,236,57,253,164,244,55,183,217,148,239,125,186,83,217,108,245,
119,42,194,68,20,209,151,184,14,39,168,14,210,112,7,122,201,58,138,243,87,127,
188,84,220,171,223,181,52,206,206,7,6,14,134,142,192,55,41,235,106,185,134,217,
190,241,84,176,124,55,219,94,93,39,184,60,79,15,154,127,212,220,164,106,91,244,
143,18,92,37,164,166,59,132,20,174,49,183,29,68,141,238,241,42,38,250,137,158,
73,124,210,56,158,36,184,149,105,114,73,201,188,55,218,118,222,47,173,121,160,
218,34,10,112,118,121,236,113,115,143,29,156,228,110,227,142,174,55,108,54,11,
60,16,8,33,181,208,50,32,49,176,41,217,140,123,21,24,232,165,168,28,227,221,
170,119,81,139,211,80,59,152,133,151,182,182,200,125,74,201,182,139,245,214,205,
48,150,215,112,169,166,112,57,196,114,16,211,222,56,31,21,125,242,89,202,64,
212,196,91,46,251,17,93,154,210,88,230,140,54,112,6,252,14,135,14,36,120,142,
161,24,229,167,65,208,219,109,194,251,100,129,180,204,99,195,42,96,140,97,128,
59,112,123,71,70,252,12,13,219,199,141,67,110,173,158,221,95,79,91,72,242,202,
136,36,108,140,119,81,7,42,54,190,90,41,118,73,203,209,76,248,105,241,138,126,
113,130,206,227,188,30,181,179,210,123,141,83,40,109,245,85,114,254,78,8,157,43,
187,154,9,62,75,226,211,90,203,149,170,142,186,17,136,234,97,100,205,29,65,205,
7,241,81,206,86,107,190,111,228,250,241,32,56,116,145,8,7,110,219,131,79,184,
148,245,239,13,97,127,82,197,67,9,124,205,136,234,72,30,43,50,201,121,185,201,
35,158,251,133,89,115,137,36,243,206,227,237,90,75,145,200,102,143,64,80,75,85,
44,146,75,80,233,38,38,71,23,28,23,16,55,158,192,15,138,203,171,99,105,170,31,
155,52,245,178,139,24,52,244,209,196,71,104,104,7,223,148,163,11,5,210,57,199,
112,90,190,81,185,172,133,140,3,83,229,253,167,36,33,9,218,199,39,11,29,103,201,
43,155,182,113,12,158,131,251,186,15,129,86,253,162,164,212,209,52,188,230,70,
29,135,247,142,149,72,43,63,67,214,25,160,143,104,228,201,22,255,0,180,211,143,
36,155,20,135,73,7,98,214,114,110,168,157,170,115,187,49,234,165,168,66,18,133,
170,77,247,183,98,149,131,174,64,60,207,224,179,205,77,65,154,162,89,73,222,247,
23,123,74,208,151,225,255,0,8,195,213,32,62,226,179,124,217,138,87,198,120,181,
197,190,196,231,8,213,253,222,171,61,143,180,145,31,127,162,81,206,35,156,73,54,
251,81,183,218,157,89,102,249,181,96,114,72,253,173,84,241,251,51,252,218,174,
85,73,242,58,236,234,215,253,217,254,109,87,98,206,226,127,175,220,181,248,40,
181,55,121,80,189,85,161,141,250,236,234,209,113,249,62,88,214,108,115,27,124,
59,118,130,103,254,139,79,233,159,253,175,255,0,186,144,234,61,117,108,176,92,
221,67,89,5,99,229,13,15,204,76,105,110,15,123,130,107,254,149,108,127,249,91,
151,249,108,255,0,243,93,68,250,208,193,177,166,236,130,142,104,48,227,35,140,
150,218,223,153,249,166,218,174,76,140,20,179,77,243,190,215,54,194,252,124,155,
25,192,207,215,85,183,56,173,74,254,84,108,146,208,212,68,218,123,131,92,248,
220,208,92,198,0,9,24,250,234,151,146,227,79,31,25,65,61,77,222,153,209,123,67,
129,231,187,146,108,74,58,70,22,251,63,126,103,213,72,108,180,143,186,93,169,40,
162,206,212,242,6,100,116,14,147,224,50,86,138,134,38,67,11,34,137,161,177,177,
161,173,104,232,3,112,10,157,228,62,153,183,11,149,109,207,97,220,221,43,68,81,
151,14,47,119,28,119,15,226,87,42,91,138,201,121,68,124,61,83,140,14,156,50,19,
47,242,242,10,167,229,134,230,36,185,210,91,216,237,208,48,200,255,0,180,238,3,
192,15,122,144,242,77,116,249,102,159,125,35,221,153,40,228,217,31,97,219,199,
191,104,120,38,125,71,201,117,85,242,245,89,112,151,81,58,63,148,72,92,35,20,
153,216,111,0,220,243,131,56,0,12,246,39,29,5,201,244,218,74,237,53,88,188,154,
184,230,136,198,248,77,62,198,119,130,14,118,206,241,142,174,146,187,146,74,99,
74,34,14,233,12,244,58,252,20,112,195,86,43,140,238,103,68,229,168,211,118,254,
197,51,187,208,178,229,108,170,163,151,213,154,50,204,245,30,131,224,119,172,
207,91,94,202,74,153,169,230,107,196,209,60,198,246,227,131,129,193,11,81,172,
233,203,125,163,230,189,96,106,227,110,32,184,51,158,29,91,99,115,199,145,255,0,
18,235,6,144,115,134,39,111,205,113,202,24,9,141,179,55,118,71,176,253,124,212,
113,215,159,171,23,181,201,247,147,235,156,147,107,107,68,100,48,53,211,129,187,
184,168,23,56,164,252,153,191,58,246,200,63,104,30,69,62,158,54,136,159,216,124,
150,94,148,184,206,204,247,143,53,169,213,63,125,213,14,211,92,175,212,62,119,
145,65,59,34,138,118,158,1,165,131,14,240,59,251,179,214,174,5,156,121,114,126,
206,189,148,126,207,31,145,89,188,42,54,203,43,152,237,8,62,139,99,141,200,248,
160,108,140,57,135,3,230,180,107,28,215,180,57,142,14,105,25,4,28,130,21,39,203,
86,151,249,21,80,191,80,179,16,84,59,102,165,160,122,178,30,14,238,61,61,189,
233,227,145,13,96,46,84,31,49,87,73,154,186,86,102,157,206,63,148,136,125,30,
246,249,99,168,171,42,237,111,167,186,219,106,104,107,25,183,79,80,194,199,142,
195,210,59,71,17,220,184,99,159,135,84,216,255,0,97,119,52,113,98,212,121,106,
116,234,63,126,10,11,200,84,162,77,27,48,25,244,43,30,211,251,172,63,138,147,
235,211,141,23,123,63,178,73,252,42,55,200,253,190,123,45,37,246,207,87,190,90,
74,243,191,24,218,107,152,221,151,14,194,0,42,69,202,9,198,135,190,159,216,228,
254,20,78,65,172,184,208,145,232,189,165,105,110,31,176,237,67,72,248,92,44,189,
206,246,169,39,39,18,103,92,217,135,254,184,242,42,29,206,41,63,38,111,206,189,
178,15,218,7,145,90,170,143,210,127,97,242,88,106,72,255,0,62,62,209,230,181,58,
167,175,154,156,233,158,88,106,100,153,216,161,168,100,81,84,14,166,150,12,59,
192,239,238,202,184,86,113,229,201,251,58,246,81,251,60,126,69,102,48,168,219,
44,174,99,180,32,250,45,174,57,35,162,129,178,48,230,28,15,154,209,173,115,94,
208,230,184,57,174,25,4,28,130,21,39,203,86,151,249,21,80,190,208,179,16,84,59,
102,165,160,122,178,30,14,238,61,61,189,233,227,145,13,96,46,84,31,49,87,73,154,
186,86,102,157,206,63,148,136,125,30,246,249,99,168,171,42,237,111,167,186,219,
106,104,107,25,183,79,80,194,199,142,195,210,59,71,17,220,184,99,159,135,84,216,
255,0,97,119,52,113,226,212,121,106,116,234,63,126,10,11,200,84,162,77,27,56,25,
203,43,30,211,251,172,63,138,147,235,211,141,23,123,63,178,73,252,42,55,200,253,
190,123,45,37,246,207,87,190,90,74,243,191,24,218,107,152,221,151,14,194,0,42,
69,202,9,198,135,190,159,216,228,254,20,78,65,172,184,208,145,232,189,165,105,
110,31,176,237,67,72,248,92,44,189,206,246,171,7,147,87,115,86,75,245,71,210,45,
107,1,234,220,239,136,85,143,56,172,78,78,164,219,211,23,214,15,89,165,174,240,
193,248,21,163,196,63,70,221,99,204,44,126,22,205,153,246,134,160,59,255,0,146,
148,243,136,231,18,77,180,109,163,101,80,178,87,206,35,156,237,73,54,211,118,
162,184,124,221,96,185,86,2,65,130,158,73,7,120,105,35,222,188,112,13,23,43,214,
176,185,193,163,122,203,218,178,187,231,45,79,117,172,201,45,154,170,71,183,63,
87,104,224,123,48,174,175,228,249,73,242,125,47,93,86,119,58,162,168,180,118,
181,173,24,247,185,202,128,90,123,147,10,95,144,104,59,68,68,16,95,23,60,123,
118,201,112,247,16,144,97,173,231,39,47,43,103,143,17,21,27,98,110,242,7,112,83,
78,113,69,121,79,187,186,211,161,174,179,196,237,153,159,31,48,206,188,188,134,
238,237,0,147,224,159,246,213,111,203,204,206,110,140,167,107,120,62,181,141,
119,118,195,207,152,9,205,81,216,133,206,28,22,91,15,136,73,83,27,78,151,10,128,
90,155,146,235,83,44,154,38,219,8,104,19,78,193,83,41,233,46,120,206,254,225,
129,224,178,194,216,177,108,199,19,24,205,204,107,67,91,220,18,172,38,48,231,57,
220,61,86,147,148,146,17,27,35,26,18,79,195,251,75,185,196,115,131,129,73,54,
211,70,173,186,139,70,153,185,87,57,219,38,24,28,88,127,92,140,55,253,196,39,
110,179,65,113,220,178,76,140,189,193,173,212,172,167,80,24,42,37,17,227,99,104,
236,227,171,59,149,247,252,158,158,246,233,59,128,63,147,249,115,177,223,205,
179,63,130,160,22,142,228,106,140,208,104,74,87,60,97,213,82,62,160,142,243,178,
61,205,5,103,176,198,151,79,126,165,182,229,3,131,105,54,78,242,19,95,242,131,
187,186,27,13,190,219,27,177,242,185,140,143,3,165,172,3,113,236,203,129,240,84,
125,170,137,247,27,157,37,20,71,18,84,204,200,90,122,139,136,31,138,178,127,148,
12,174,125,254,217,25,245,27,76,92,59,203,206,124,130,138,242,94,214,191,95,89,
131,247,129,41,119,136,105,35,222,23,149,127,153,87,178,120,128,186,195,7,179,
225,219,99,91,19,230,181,13,190,158,27,125,5,61,29,43,118,32,130,54,198,198,245,
0,48,18,142,113,36,219,70,218,209,134,129,144,88,99,114,110,83,7,42,110,99,
185,63,189,137,49,142,100,113,235,218,24,247,225,101,101,161,185,112,186,138,77,
24,105,3,191,172,173,153,177,129,211,178,211,180,79,184,15,21,158,216,215,61,
237,107,1,115,156,112,0,226,74,207,226,164,25,128,27,130,218,114,118,50,202,98,
227,188,250,5,171,57,54,123,198,131,177,137,61,111,146,183,217,209,238,194,135,
255,0,40,91,135,55,166,173,244,77,56,117,69,78,217,237,107,26,115,239,115,84,
242,197,75,243,109,150,130,139,119,252,53,60,113,110,233,45,104,31,130,165,249,
126,175,231,245,21,190,140,59,45,167,166,219,35,169,207,113,207,185,173,76,43,
63,42,150,199,91,0,146,97,140,19,226,59,99,75,147,230,160,154,74,139,231,29,81,
105,164,35,45,150,170,54,187,236,237,12,251,178,181,231,56,179,71,34,180,159,41,
215,148,242,157,226,150,41,38,62,205,129,239,120,90,51,109,71,133,71,249,101,
220,74,159,148,114,109,78,214,112,30,105,95,56,142,113,36,219,70,218,105,178,
179,214,74,249,197,57,228,238,124,152,198,125,89,220,60,11,85,119,182,167,92,
154,130,233,65,235,159,201,170,134,36,209,204,30,228,231,1,184,172,22,224,85,
164,132,33,102,214,237,36,186,199,206,91,230,3,136,27,67,195,122,206,154,182,
156,209,234,42,232,250,29,33,145,189,206,223,248,225,105,98,1,4,29,224,170,91,
149,155,43,161,123,43,99,111,228,79,54,243,250,132,250,39,218,113,226,152,225,
146,136,230,217,59,242,75,49,88,57,216,118,135,237,205,87,123,125,168,219,237,
92,54,151,146,74,216,216,92,247,6,180,113,37,104,236,179,27,42,195,228,97,217,
213,239,251,171,252,218,175,37,159,57,12,184,54,167,93,73,20,109,244,5,28,135,
104,244,250,77,90,13,103,113,80,68,249,240,11,77,132,16,105,242,226,86,123,229,
178,226,202,93,109,44,123,5,207,230,35,61,67,130,174,37,187,84,63,115,75,88,63,
84,41,143,47,167,28,161,77,247,120,188,138,174,118,150,142,133,131,217,216,122,
130,204,87,151,26,135,142,178,149,62,119,200,114,247,185,199,180,229,124,237,
246,164,251,74,75,201,197,144,234,45,101,109,161,123,54,160,231,57,217,250,185,
182,250,78,7,191,24,241,86,94,241,27,75,206,129,84,142,19,35,195,6,165,104,254,
75,172,191,49,104,155,117,59,219,179,81,51,62,81,55,94,211,247,224,246,129,129,
224,156,245,125,246,45,53,167,107,46,179,199,206,136,26,54,99,218,217,219,113,
32,1,156,28,111,61,73,229,82,159,202,62,247,205,211,90,236,177,187,124,142,53,
82,142,193,150,179,218,118,189,139,29,78,195,89,82,3,183,155,159,53,184,168,
120,162,165,59,31,180,88,121,5,243,253,59,143,254,157,255,0,223,127,252,215,173,
229,221,187,67,107,79,16,220,239,34,183,39,31,229,170,47,105,27,75,73,248,85,39,
240,241,63,53,151,252,90,179,249,248,15,146,219,116,179,199,85,77,13,68,14,15,
134,86,9,24,225,210,210,50,10,129,114,225,100,249,215,69,75,85,19,115,81,111,
119,202,27,142,59,28,30,61,155,255,0,194,190,121,11,190,124,237,161,226,166,149,
251,85,22,247,154,119,100,239,216,226,195,221,131,143,240,171,2,166,8,234,105,
229,130,118,135,197,43,11,30,211,192,130,48,66,204,116,168,234,63,242,126,254,
33,106,136,109,109,55,83,135,223,192,172,87,183,218,165,28,151,191,60,160,88,
199,237,3,200,166,45,79,107,146,197,168,110,22,201,179,181,77,51,152,9,250,77,
250,39,196,96,248,167,126,75,29,255,0,136,86,47,188,15,34,182,19,184,58,7,56,
104,65,242,88,184,35,44,168,104,58,130,60,214,182,89,171,151,135,99,148,9,135,
236,241,121,45,42,179,47,47,167,28,161,205,247,120,188,138,205,224,191,228,119,
31,69,167,199,69,233,187,199,170,133,218,110,117,54,171,149,53,117,12,134,58,
154,119,135,177,221,163,160,246,30,7,177,107,45,25,168,233,181,69,130,158,229,
72,64,46,244,101,143,57,49,200,56,180,249,142,194,22,59,218,83,158,73,117,153,
210,154,133,173,170,121,249,174,176,136,234,7,212,250,178,120,103,127,97,61,137,
198,39,69,237,17,237,55,222,31,118,73,112,154,207,101,147,101,222,235,188,58,
214,161,101,52,76,171,150,165,172,2,105,90,214,61,195,233,6,231,31,196,83,31,40,
135,26,18,253,247,57,63,132,169,11,92,215,180,57,164,57,164,100,16,114,8,81,222,
81,255,0,48,175,255,0,114,151,248,74,203,192,127,53,183,226,22,182,112,57,167,
91,129,89,39,111,181,74,121,47,126,121,64,177,143,218,7,145,80,253,165,42,228,
177,223,248,133,98,251,192,242,43,107,81,250,47,236,62,75,7,74,223,206,103,104,
243,90,217,102,174,94,29,142,80,38,31,179,197,228,180,170,204,188,190,156,114,
135,55,221,226,242,43,53,130,255,0,145,220,125,22,167,29,23,166,239,30,170,23,
105,185,212,218,174,84,213,212,50,24,234,105,222,30,199,118,142,131,216,120,30,
197,172,180,102,163,166,213,22,10,123,149,33,0,187,209,150,60,228,199,32,226,
211,230,59,8,88,239,105,78,121,37,214,103,74,106,22,182,169,231,230,186,194,35,
168,31,83,234,201,225,157,253,132,246,39,24,157,23,180,71,180,223,120,125,217,
37,194,107,61,150,77,151,123,174,240,235,90,133,148,209,50,174,90,150,176,9,
165,107,88,247,15,164,27,156,127,17,76,124,162,28,104,75,247,220,228,254,18,164,
45,115,94,208,230,144,230,145,144,65,200,33,71,121,71,252,194,191,253,202,95,
225,43,47,1,252,214,223,136,90,217,192,230,157,110,5,100,157,190,213,61,228,150,
165,175,174,185,208,60,128,42,105,242,51,210,90,113,228,226,171,189,164,233,165,
238,166,209,126,162,173,201,216,141,248,147,31,80,238,119,184,149,179,171,136,
203,11,152,53,245,213,97,168,220,33,157,175,58,111,236,57,21,56,121,44,123,154,
225,135,52,224,133,230,218,113,213,52,194,11,137,158,60,24,42,7,56,215,14,4,244,
252,124,83,62,210,138,23,137,88,30,55,170,149,16,24,37,116,103,113,93,246,212,
47,149,234,239,146,232,90,214,131,135,84,57,144,143,23,2,125,192,169,110,210,
170,249,120,172,197,5,170,136,31,202,72,249,136,251,32,1,252,69,67,90,237,138,
119,158,175,60,149,140,50,46,114,174,54,245,223,225,154,167,161,141,211,74,200,
227,25,123,220,26,209,214,74,214,180,49,54,146,138,158,154,63,82,24,219,27,123,
128,199,224,179,54,130,163,249,118,178,180,66,70,71,202,27,33,29,97,158,145,247,
53,105,157,164,191,7,143,162,231,247,38,252,163,146,239,100,124,1,63,31,233,
119,219,80,254,85,237,238,185,232,154,230,198,9,146,159,21,0,118,55,214,255,0,
105,114,148,237,47,29,135,2,8,4,29,196,30,148,222,88,132,140,44,59,214,126,9,12,
50,54,65,184,221,100,149,165,57,59,212,212,247,253,63,77,137,91,242,232,35,108,
117,17,19,233,2,6,54,177,212,120,231,193,85,28,161,104,58,155,53,92,213,214,184,
93,53,169,228,187,12,25,48,117,130,62,175,81,246,246,193,169,231,154,154,102,
203,77,44,145,74,222,15,141,197,174,30,33,102,161,150,74,9,72,120,251,226,22,
210,166,8,113,104,3,152,237,52,234,234,43,92,58,80,198,151,56,134,180,12,146,
120,0,169,46,87,245,156,55,98,203,61,170,81,37,36,79,219,158,86,159,70,71,14,0,
30,144,55,239,233,56,234,80,10,203,221,214,182,30,106,182,231,93,81,17,250,19,
78,247,183,216,74,235,96,211,247,59,245,64,138,219,74,249,6,112,233,8,195,25,
222,238,3,205,77,81,136,58,164,115,81,55,95,138,171,71,131,199,68,238,126,119,
222,221,192,47,52,205,154,123,253,238,154,223,76,14,100,119,166,252,110,99,7,
172,227,220,63,5,169,40,225,138,142,146,26,106,118,134,67,11,4,108,104,232,104,
24,1,69,180,46,146,165,210,212,46,107,92,38,174,148,14,122,124,99,63,170,222,
166,249,249,74,54,147,44,62,140,211,178,238,247,138,79,139,215,138,201,0,103,
186,221,58,250,213,91,203,213,189,210,82,219,46,76,4,182,39,58,9,63,197,130,223,
39,123,66,169,236,151,7,218,175,20,85,241,13,167,211,74,217,54,115,141,172,29,
227,196,110,90,118,241,111,167,187,219,42,40,43,91,181,4,237,217,118,56,142,162,
59,65,193,89,215,86,233,59,142,154,170,115,106,163,50,82,147,136,234,88,61,7,
14,140,245,30,195,239,75,241,58,103,178,78,125,186,121,20,223,4,171,142,72,125,
150,77,69,251,193,90,66,207,119,164,188,91,226,173,183,204,217,96,144,100,17,
197,167,168,142,130,58,151,106,234,250,122,10,89,42,107,102,142,8,24,50,231,189,
216,1,101,42,27,133,101,190,66,250,10,186,138,103,145,130,232,100,115,9,246,21,
245,95,114,174,184,22,154,250,218,154,162,222,6,121,92,252,119,100,169,6,49,209,
205,185,248,40,79,39,58,121,63,163,217,154,144,114,145,170,127,157,23,222,118,
13,166,208,211,180,199,78,215,110,36,116,184,142,179,228,2,91,201,46,158,117,
227,82,197,87,51,51,69,66,68,175,36,110,115,254,139,125,187,251,135,106,111,210,
90,42,233,168,166,99,153,19,169,168,78,247,84,202,220,55,31,170,62,145,238,221,
214,66,191,116,245,158,142,195,107,138,130,129,155,49,51,121,113,245,158,238,
151,56,244,147,255,0,69,21,29,44,149,50,243,242,233,175,111,209,79,136,86,197,
71,7,178,192,115,181,187,62,191,218,121,219,89,171,148,250,223,151,107,155,172,
128,229,177,200,33,3,171,96,6,159,120,43,69,203,43,98,137,242,72,112,198,2,231,
30,160,22,82,175,169,117,101,117,69,76,158,188,210,58,71,119,147,159,197,88,
198,31,102,53,156,79,151,246,169,242,114,43,200,249,56,11,124,127,165,106,242,5,
73,253,109,222,181,195,131,99,133,167,191,36,249,53,92,59,107,33,47,21,90,108,
72,65,24,143,98,246,235,250,43,245,184,33,171,152,204,100,181,247,91,234,181,
246,218,247,109,80,28,138,82,115,250,185,245,4,122,52,212,239,120,63,172,72,104,
247,18,175,141,164,234,146,127,104,143,156,181,150,106,190,140,81,203,205,7,95,
46,22,249,174,219,106,211,228,194,148,182,158,25,8,198,231,202,124,125,17,238,
85,101,12,15,172,171,138,8,253,103,187,29,195,164,171,235,73,81,10,75,104,112,
110,3,128,107,71,83,70,224,151,227,18,128,198,198,53,57,166,220,157,167,38,71,
76,116,2,223,127,123,211,226,16,132,129,107,80,153,181,53,174,59,141,4,141,123,
3,253,18,215,183,235,52,167,148,47,65,182,97,120,69,242,43,46,106,59,76,214,
91,139,233,229,203,163,59,226,147,30,187,126,61,106,21,116,171,116,245,14,96,
56,141,135,0,118,245,173,81,173,180,165,61,222,137,224,176,227,214,27,62,180,
110,235,31,136,255,0,177,153,53,158,156,174,211,215,23,10,168,201,167,145,196,
199,51,71,162,238,206,195,216,181,56,109,107,103,232,191,222,243,89,108,70,133,
208,244,153,238,249,38,170,122,169,169,164,231,41,166,146,23,227,27,81,184,180,
227,188,37,63,60,220,191,72,214,127,158,239,138,105,218,70,210,108,90,14,161,41,
0,141,10,89,81,83,53,76,156,229,68,178,75,38,49,180,247,23,31,105,92,246,146,
125,164,109,47,109,101,230,205,210,141,165,214,154,174,122,89,11,233,166,146,23,
145,141,168,220,90,113,213,185,34,218,70,210,8,186,3,108,157,190,121,185,126,
145,172,255,0,61,223,20,154,162,170,106,153,57,202,153,164,153,248,198,212,142,
46,56,239,41,219,74,105,75,134,162,144,186,1,204,210,55,57,157,237,59,57,234,
29,103,201,54,94,237,53,182,90,215,83,92,33,49,188,122,174,226,215,142,182,158,
144,161,108,177,25,12,109,35,104,110,83,58,9,118,4,142,7,100,164,251,72,218,73,
246,145,180,167,80,236,165,244,181,213,52,155,95,37,168,154,29,172,109,115,111,
45,206,56,103,11,191,207,55,47,210,53,159,231,187,226,154,118,145,180,185,45,7,
80,189,27,67,66,150,79,81,45,68,166,73,228,124,178,30,46,123,139,137,241,43,
230,41,223,12,141,146,23,186,57,26,114,28,211,130,60,82,93,164,109,47,109,185,
121,178,117,78,223,60,220,191,72,214,127,158,239,138,75,81,83,53,76,156,229,68,
178,75,38,49,180,247,23,31,105,79,218,107,69,221,47,180,146,212,198,27,79,0,105,
49,58,80,71,58,122,135,103,111,154,143,92,104,234,173,181,111,166,174,133,240,
206,206,45,112,247,142,177,218,161,100,177,57,229,140,34,225,76,248,37,107,3,
222,13,138,243,105,27,73,62,210,54,148,234,29,132,232,203,189,194,54,53,140,175,
171,107,26,48,26,38,112,0,117,13,232,146,237,95,44,110,100,181,213,79,99,134,28,
215,76,226,8,237,25,77,123,72,218,92,236,55,130,235,165,197,40,218,95,81,78,248,
100,108,144,189,209,200,211,144,230,156,17,226,146,237,35,105,123,101,206,202,
118,249,230,229,250,70,179,252,247,124,82,90,138,153,170,100,231,42,37,146,89,
49,141,167,184,184,251,74,145,218,180,29,226,225,104,150,184,48,66,224,51,20,
50,110,116,163,240,236,207,31,122,138,84,69,45,52,239,134,162,55,197,43,14,28,
199,140,16,123,66,134,41,98,123,136,140,130,70,170,105,32,149,141,5,224,216,174,
155,72,218,73,246,145,180,167,80,236,39,70,93,238,17,177,172,101,125,91,88,209,
128,209,51,128,3,168,111,68,151,106,249,99,115,37,174,170,123,28,48,230,186,103,
16,71,104,202,107,218,70,210,231,97,188,23,93,46,41,70,210,54,146,125,165,235,
54,158,246,181,128,185,206,56,0,12,146,87,171,157,133,108,104,139,148,122,135,
79,58,205,82,240,43,232,219,181,3,156,125,102,116,123,56,119,97,36,149,174,138,
71,71,35,75,94,211,130,15,65,78,124,149,242,125,88,107,225,184,215,181,241,78,
221,241,194,14,54,1,24,218,121,252,61,189,74,101,174,180,132,129,252,252,24,50,
227,115,248,9,7,81,234,41,19,107,97,134,161,209,180,244,79,192,29,253,201,180,
248,108,213,20,237,148,142,152,248,145,187,189,87,25,72,235,237,118,235,131,216,
250,250,26,74,167,176,97,166,120,90,242,7,102,66,83,51,95,12,142,142,86,22,61,
167,5,164,96,133,241,180,155,22,135,12,243,11,60,54,152,114,200,164,180,150,91,
77,20,237,158,142,217,67,79,51,115,137,34,167,99,28,51,184,224,129,148,225,149,
199,105,27,72,107,3,114,1,14,46,113,187,141,215,108,163,43,142,210,54,151,182,
92,217,118,218,76,151,13,45,97,184,60,190,174,215,74,231,158,46,107,54,28,123,
203,112,74,117,218,75,232,109,117,149,176,73,53,60,69,204,96,226,119,109,118,14,
181,20,188,216,109,229,181,186,212,208,9,75,173,13,239,212,162,180,186,51,78,83,
63,106,59,69,41,63,250,141,50,15,99,178,159,226,100,112,198,216,225,99,99,141,
163,1,173,24,3,184,47,135,18,215,16,225,130,55,16,122,23,155,75,166,68,198,123,
128,5,204,146,73,39,190,226,123,74,237,148,101,113,218,70,210,238,202,59,46,217,
95,50,53,146,198,230,72,214,189,142,24,45,112,200,35,185,115,218,70,210,44,189,
178,100,170,209,154,114,166,66,249,109,20,161,199,251,48,88,61,141,33,118,160,
210,182,26,7,135,210,218,169,26,241,188,57,209,237,145,220,93,146,157,118,146,
248,173,85,178,208,186,173,144,147,16,225,214,71,88,29,33,64,232,225,143,164,
224,7,193,89,100,149,50,141,150,185,199,188,164,192,128,140,174,59,72,218,83,
217,85,178,233,35,89,36,110,100,141,107,216,224,90,230,184,100,16,120,130,19,95,
243,110,195,250,22,217,254,146,63,130,112,218,70,210,229,209,181,218,139,174,
218,247,51,221,54,77,255,0,205,187,15,232,91,103,250,72,254,8,254,109,216,127,
66,219,63,210,71,240,78,27,72,218,92,243,44,254,35,224,186,231,164,254,71,226,
184,208,91,45,246,231,61,214,250,26,74,87,60,0,227,4,45,102,214,58,240,55,165,
153,92,118,148,195,72,105,105,235,234,98,150,162,35,140,229,145,17,199,181,221,
67,177,71,60,209,211,51,105,217,41,105,233,165,172,147,101,185,157,231,135,106,
119,228,243,79,62,105,155,60,205,33,210,12,141,222,163,58,251,202,183,216,198,
198,198,177,128,6,180,96,14,160,146,90,237,241,219,233,132,108,222,227,189,206,
235,41,98,201,79,51,167,144,200,237,235,121,75,76,202,104,132,76,220,132,33,10,
21,97,8,66,16,132,38,59,254,155,162,187,211,75,20,208,198,230,200,48,230,61,
185,107,188,58,15,106,124,66,244,18,13,194,240,128,69,138,206,154,187,145,183,
194,247,203,102,144,195,213,12,217,115,60,30,55,143,28,170,214,231,164,111,246,
231,145,81,108,168,112,31,74,38,243,131,253,185,199,138,218,164,2,48,70,66,69,
81,106,162,168,252,165,59,51,217,185,52,131,23,158,49,103,116,135,94,191,20,
182,108,42,9,13,219,209,236,88,114,104,229,132,226,104,223,25,234,115,72,95,80,
65,61,65,2,8,101,148,157,192,49,133,222,75,105,63,76,91,220,114,57,230,246,7,
127,209,123,30,153,183,180,239,18,187,237,59,254,138,223,227,198,223,167,227,
244,85,191,4,23,247,252,62,171,37,91,52,93,254,224,230,236,91,228,133,135,233,
212,127,86,7,129,223,236,10,206,209,220,143,7,61,147,92,201,170,35,126,206,11,
34,31,139,189,221,202,245,166,181,209,83,96,197,77,24,35,164,140,159,122,90,
169,79,139,79,40,176,232,142,175,154,183,14,23,4,70,228,92,245,166,123,45,130,
146,215,11,27,28,108,115,154,54,71,162,3,90,58,128,232,77,122,167,69,208,94,233,
159,27,224,141,237,118,243,27,198,236,245,180,241,105,238,82,196,37,161,196,29,
160,115,76,11,65,22,35,37,152,245,79,36,117,148,82,61,246,201,72,28,68,53,31,
131,198,227,227,237,80,11,134,153,189,208,56,138,155,101,72,3,139,152,205,182,
251,91,144,182,211,216,215,180,181,237,14,105,226,8,200,77,245,22,75,124,228,
151,83,181,167,173,155,147,88,113,153,227,22,125,157,230,150,75,132,194,243,118,
228,176,244,141,124,110,217,145,174,97,234,112,194,237,77,73,85,84,64,166,166,
158,98,120,8,227,46,207,177,108,247,105,122,2,114,12,195,185,195,224,190,227,
211,86,246,113,108,143,251,78,86,142,60,109,148,126,63,69,92,96,162,254,255,0,
135,213,100,251,78,132,191,220,92,223,248,67,77,25,250,117,7,103,31,225,245,189,
202,214,209,124,144,67,3,227,168,184,52,213,72,48,118,166,110,204,99,185,189,62,
59,149,213,77,110,164,166,199,49,79,27,72,224,113,147,237,41,82,163,81,138,207,
48,181,236,58,149,200,48,200,34,55,181,207,90,110,183,89,233,40,97,44,108,98,
66,70,28,231,14,35,171,176,40,198,175,208,22,251,229,57,107,160,100,128,111,
107,92,112,230,125,151,113,29,202,112,132,189,175,115,14,211,77,138,188,230,135,
13,151,11,133,149,245,47,37,23,58,9,28,109,210,115,205,232,138,127,65,254,7,
129,247,40,69,118,159,188,80,146,42,173,181,76,3,139,132,101,205,253,225,185,
109,217,34,100,173,217,149,141,123,122,156,50,155,103,176,219,230,57,48,6,158,
182,18,19,104,113,169,216,44,240,28,150,75,132,66,243,118,100,177,11,246,152,
237,151,130,211,212,70,18,154,90,10,218,179,138,90,58,153,143,84,113,57,222,65,
108,195,165,232,9,206,103,29,206,31,5,210,45,55,110,103,24,222,255,0,180,239,
130,176,113,211,108,163,241,250,40,6,10,47,155,252,62,171,42,217,185,61,191,92,
100,111,59,3,105,35,63,74,99,233,120,52,111,246,225,91,250,35,146,90,91,123,227,
168,170,97,150,113,188,77,59,120,125,150,116,119,159,106,183,41,168,169,169,191,
33,4,108,61,96,111,246,165,9,125,70,39,60,226,196,216,117,43,208,97,208,66,110,
5,207,90,67,77,105,163,130,149,208,8,131,154,225,233,23,111,39,197,65,245,175,
38,180,55,200,203,185,173,183,129,232,189,167,102,86,119,30,145,216,85,140,133,
73,146,58,55,109,48,216,171,143,99,94,54,92,46,22,77,212,60,151,222,45,242,187,
228,37,181,76,31,65,255,0,213,200,60,14,227,237,240,80,234,219,53,210,132,145,
87,111,171,136,15,164,232,142,61,188,22,223,154,8,167,110,204,209,178,65,212,
225,148,219,54,159,183,74,115,204,150,31,213,113,9,180,88,212,204,22,120,7,193,
43,151,7,133,198,236,36,120,172,68,73,14,32,130,8,232,41,109,37,170,227,88,224,
41,104,42,166,251,17,56,143,37,178,127,154,212,31,90,127,222,31,5,218,45,59,
110,140,228,196,231,253,167,21,49,199,77,178,103,143,209,66,48,86,239,127,135,
213,101,187,31,38,183,203,140,141,249,83,89,71,25,250,199,109,231,185,163,241,
33,92,250,35,146,218,43,65,100,239,140,243,216,223,52,222,148,158,3,131,124,
251,213,157,79,75,5,56,196,17,50,63,178,48,187,37,213,24,140,245,2,206,54,28,2,
191,79,65,12,6,237,23,60,74,225,71,73,13,36,34,58,118,6,183,167,172,247,174,147,
66,201,226,116,114,180,61,142,226,10,251,66,162,174,168,22,169,208,208,215,52,
190,22,23,227,129,27,158,223,136,85,125,215,74,220,40,164,112,141,156,243,71,64,
24,112,239,31,5,163,87,10,170,58,122,166,226,162,22,73,218,70,255,0,106,187,77,
95,53,62,77,55,28,10,95,87,134,65,85,155,133,143,16,178,220,209,201,11,246,102,
141,241,187,169,205,32,175,141,165,163,234,180,173,190,112,112,30,208,122,55,17,
236,41,177,250,2,220,231,100,136,15,125,59,74,102,220,109,191,185,158,41,67,249,
60,235,244,31,224,168,61,164,186,142,217,93,88,71,49,78,242,211,244,136,195,
125,165,94,180,186,34,223,1,4,22,140,127,103,27,90,158,41,108,84,20,196,22,192,
30,225,210,243,159,250,46,100,198,205,186,12,248,174,226,228,240,6,242,63,224,
62,252,149,79,166,244,20,213,47,107,234,135,59,142,32,110,96,239,60,74,180,109,
250,114,142,150,144,196,246,7,146,49,144,48,27,220,58,19,200,104,104,1,160,0,56,
0,189,74,39,169,146,115,121,13,211,202,106,72,169,155,179,19,108,171,109,87,
160,155,83,181,52,13,46,119,68,140,30,144,239,29,63,247,193,86,183,29,57,113,
163,115,177,23,60,193,211,31,31,103,21,164,210,90,187,125,45,95,255,0,17,3,30,
122,241,131,237,86,41,177,25,169,198,200,55,28,10,171,87,133,83,212,157,162,44,
120,133,151,94,31,27,139,100,105,107,135,67,134,10,249,218,90,50,175,72,219,234,
6,61,48,58,156,3,135,189,55,59,147,251,113,36,226,13,253,116,205,76,155,141,
182,221,38,120,165,46,228,243,175,209,127,130,161,1,201,220,156,168,108,215,10,
194,57,170,119,53,167,233,188,108,143,127,31,5,122,82,104,187,125,57,4,28,127,
118,192,196,241,73,102,161,165,32,199,3,75,190,179,247,149,28,152,219,136,180,
109,183,106,150,46,79,52,27,202,251,246,42,191,75,232,7,72,246,77,82,222,115,
167,105,227,12,29,195,165,89,17,105,250,38,81,152,28,210,231,30,50,112,32,246,
39,132,37,19,79,36,238,218,144,221,60,130,154,42,118,236,196,44,21,85,170,244,
6,219,159,61,56,195,184,243,145,141,199,237,55,241,10,188,175,176,220,40,220,
118,160,50,48,125,40,253,47,119,21,166,18,42,187,93,29,94,76,208,48,184,253,33,
184,251,149,170,124,78,104,6,206,163,173,82,170,194,41,234,14,213,182,79,87,201,
101,247,101,164,135,2,8,226,8,94,109,45,19,87,163,173,245,28,75,177,212,246,135,
36,63,209,253,187,57,197,62,126,236,212,197,184,219,109,155,60,82,183,114,121,
247,232,191,193,80,173,203,156,3,65,36,240,1,58,208,88,110,21,142,27,48,24,152,
126,148,158,143,187,138,188,233,52,125,190,14,5,216,234,99,67,83,197,37,174,142,
144,131,12,12,14,31,72,239,62,245,20,184,211,136,180,109,183,110,106,104,121,62,
192,111,43,239,217,151,205,86,250,87,64,108,57,147,212,52,151,113,231,36,24,3,
236,183,241,42,203,183,208,65,65,15,55,3,113,158,46,60,74,84,132,158,89,159,51,
182,164,55,41,228,48,71,3,118,35,22,8,66,16,163,83,33,8,66,16,132,33,8,66,16,
132,33,8,66,16,132,33,8,66,16,132,33,8,66,16,132,33,8,66,16,132,33,8,66,16,132,
33,8,66,16,132,33,8,66,16,132,33,8,66,16,132,33,8,66,16,132,33,8,66,16,132,33,
8,66,16,132,33,8,66,16,132,33,8,66,16,132,33,8,66,16,132,33,8,66,16,132,33,8,
66,16,132,33,8,66,16,132,33,8,66,16,132,33,8,66,16,132,33,8,66,16,132,33,8,66,
16,132,33,8,66,16,132,33,8,66,16,191,255,217};
static Fl_JPEG_Image image_Logo6("Logo6.jpg", idata_Logo6);

void AboutDlg::cb_8_i(Fl_Button*, void*) {
  mDonation();
}
void AboutDlg::cb_8(Fl_Button* o, void* v) {
  ((AboutDlg*)(o->parent()->user_data()))->cb_8_i(o,v);
}

static unsigned char idata_btn_donate_LG[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,
153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,
51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,
255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,
255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,
153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,
51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,
255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,
255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,
153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,
51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,
255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,
255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,
153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,
51,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,153,51,255,255,
194,101,255,255,220,167,255,255,242,221,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,253,248,255,255,
253,248,255,255,253,248,255,255,253,248,255,255,246,232,255,255,225,178,255,255,
198,111,255,255,153,51,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,153,51,255,255,196,106,255,
255,239,212,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,255,249,238,255,
255,249,238,255,255,249,238,255,255,243,223,255,255,205,127,255,255,153,51,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
153,51,255,255,224,174,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,246,229,255,255,
246,229,255,255,246,229,255,255,232,194,255,255,153,51,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,153,51,255,255,226,179,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,219,255,255,242,
219,255,255,242,219,255,255,234,199,255,255,153,51,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,255,153,51,255,255,207,131,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,255,255,239,210,
255,255,239,210,255,255,239,210,255,255,227,179,255,255,153,51,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,255,174,49,255,255,234,195,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,236,
200,255,255,236,200,255,255,236,200,255,255,236,200,255,255,186,79,255,0,0,0,0,
0,0,0,0,0,0,0,0,255,153,51,255,254,194,98,255,254,233,192,255,254,233,192,255,
254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,
254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,
254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,
254,233,192,255,254,233,192,255,158,164,158,255,0,51,102,255,0,51,102,255,0,51,
102,255,0,51,102,255,32,74,113,255,127,142,147,255,238,222,186,255,254,233,192,
255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,
255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,
255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,
255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,
255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,
255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,
255,238,222,186,255,158,164,158,255,254,233,192,255,254,233,192,255,254,233,192,
255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,
255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,
255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,
255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,255,254,233,192,
255,254,233,192,255,254,233,192,255,254,233,192,255,254,206,128,255,255,153,51,
255,0,0,0,0,0,0,0,0,255,172,45,255,254,195,100,255,254,231,186,255,254,231,186,
255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,
255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,
255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,
255,254,231,186,255,254,231,186,255,112,130,139,255,0,51,102,255,32,74,113,255,
64,96,123,255,64,96,123,255,16,62,107,255,0,51,102,255,80,107,128,255,254,231,
186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,
186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,
186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,
186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,
186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,
186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,255,206,197,
170,255,32,74,113,255,127,141,144,255,254,231,186,255,254,231,186,255,254,231,
186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,
186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,
186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,
186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,231,
186,255,254,231,186,255,254,231,186,255,254,231,186,255,254,205,125,255,255,172,
45,255,0,0,0,0,255,153,51,255,255,178,59,255,254,188,82,255,254,224,168,255,
254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,255,
254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,255,
254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,255,
254,230,180,255,254,230,180,255,254,230,180,255,64,96,122,255,0,51,102,255,190,
185,160,255,254,230,180,255,254,230,180,255,222,208,170,255,16,62,107,255,0,51,
102,255,206,196,165,255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,
180,255,190,185,160,255,190,185,160,255,238,219,175,255,254,230,180,255,254,230,
180,255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,
180,255,238,219,175,255,190,185,160,255,222,208,170,255,254,230,180,255,254,230,
180,255,254,230,180,255,254,230,180,255,254,230,180,255,190,185,160,255,190,185,
160,255,238,219,175,255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,
180,255,80,107,126,255,0,51,102,255,174,174,156,255,254,230,180,255,254,230,180,
255,254,230,180,255,238,219,175,255,190,185,160,255,190,185,160,255,254,230,180,
255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,
255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,
255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,
255,254,230,180,255,254,230,180,255,254,230,180,255,254,230,180,255,254,193,95,
255,254,179,61,255,255,153,51,255,255,153,51,255,254,181,67,255,254,186,77,255,
254,199,108,255,254,228,175,255,254,228,175,255,254,228,175,255,254,228,175,255,
254,228,175,255,254,228,175,255,254,228,175,255,254,228,175,255,254,228,175,255,
254,228,175,255,254,228,175,255,254,228,175,255,254,228,175,255,254,228,175,255,
254,228,175,255,254,228,175,255,254,228,175,255,254,228,175,255,0,51,102,255,0,
51,102,255,238,217,170,255,254,228,175,255,254,228,175,255,254,228,175,255,112,
129,134,255,0,51,102,255,142,150,143,255,254,228,175,255,254,228,175,255,158,
161,148,255,16,62,107,255,0,51,102,255,0,51,102,255,0,51,102,255,112,129,134,
255,254,228,175,255,254,228,175,255,254,228,175,255,0,51,102,255,0,51,102,255,
127,140,139,255,16,62,107,255,0,51,102,255,0,51,102,255,174,172,152,255,254,228,
175,255,254,228,175,255,158,161,148,255,16,62,107,255,0,51,102,255,0,51,102,255,
0,51,102,255,158,161,148,255,254,228,175,255,254,228,175,255,16,62,107,255,0,
51,102,255,0,51,102,255,0,51,102,255,96,118,129,255,254,228,175,255,127,140,
139,255,16,62,107,255,0,51,102,255,0,51,102,255,32,73,111,255,222,206,166,255,
254,228,175,255,254,228,175,255,254,228,175,255,254,228,175,255,254,228,175,255,
254,228,175,255,254,228,175,255,254,228,175,255,254,228,175,255,254,228,175,255,
254,228,175,255,254,228,175,255,254,228,175,255,254,228,175,255,254,228,175,255,
254,228,175,255,254,228,175,255,254,209,132,255,254,186,77,255,254,181,67,255,
255,153,51,255,255,153,51,255,254,183,72,255,254,183,72,255,254,183,72,255,254,
204,121,255,254,225,170,255,254,225,170,255,254,225,170,255,254,225,170,255,254,
225,170,255,254,225,170,255,254,225,170,255,254,225,170,255,254,225,170,255,254,
225,170,255,254,225,170,255,254,225,170,255,254,225,170,255,254,225,170,255,254,
225,170,255,254,225,170,255,206,192,157,255,0,51,102,255,32,73,111,255,254,225,
170,255,254,225,170,255,254,225,170,255,254,225,170,255,127,138,136,255,0,51,
102,255,127,138,136,255,254,225,170,255,158,159,144,255,0,51,102,255,16,62,106,
255,158,159,144,255,174,170,149,255,48,84,115,255,0,51,102,255,158,159,144,255,
254,225,170,255,206,192,157,255,0,51,102,255,0,51,102,255,48,84,115,255,174,170,
149,255,96,117,128,255,0,51,102,255,64,95,119,255,254,225,170,255,238,214,166,
255,0,51,102,255,16,62,106,255,174,170,149,255,142,149,140,255,0,51,102,255,16,
62,106,255,254,225,170,255,222,203,161,255,112,127,132,255,0,51,102,255,0,51,
102,255,127,138,136,255,206,192,157,255,142,149,140,255,0,51,102,255,48,84,115,
255,190,181,153,255,96,117,128,255,0,51,102,255,80,106,123,255,254,225,170,255,
254,225,170,255,254,225,170,255,254,225,170,255,254,225,170,255,254,225,170,255,
254,225,170,255,254,225,170,255,254,225,170,255,254,225,170,255,254,225,170,255,
254,225,170,255,254,225,170,255,254,225,170,255,254,225,170,255,254,225,170,255,
254,217,151,255,254,186,78,255,254,183,72,255,254,183,72,255,255,153,51,255,255,
153,51,255,254,181,66,255,254,181,66,255,254,181,66,255,254,181,66,255,254,194,
97,255,254,221,159,255,254,224,165,255,254,224,165,255,254,224,165,255,254,224,
165,255,254,224,165,255,254,224,165,255,254,224,165,255,254,224,165,255,254,224,
165,255,254,224,165,255,254,224,165,255,254,224,165,255,254,224,165,255,254,224,
165,255,142,148,137,255,0,51,102,255,96,116,126,255,254,224,165,255,254,224,165,
255,254,224,165,255,254,224,165,255,112,127,130,255,0,51,102,255,142,148,137,
255,254,224,165,255,32,73,110,255,0,51,102,255,190,181,149,255,254,224,165,255,
254,224,165,255,174,170,145,255,0,51,102,255,80,105,122,255,254,224,165,255,158,
159,141,255,0,51,102,255,32,73,110,255,238,213,161,255,254,224,165,255,158,159,
141,255,0,51,102,255,96,116,126,255,254,224,165,255,254,224,165,255,254,224,165,
255,254,224,165,255,254,224,165,255,206,191,153,255,0,51,102,255,0,51,102,255,
254,224,165,255,254,224,165,255,190,181,149,255,0,51,102,255,64,94,118,255,254,
224,165,255,254,224,165,255,16,62,106,255,0,51,102,255,222,202,157,255,254,224,
165,255,238,213,161,255,0,51,102,255,0,51,102,255,254,224,165,255,254,224,165,
255,254,224,165,255,254,224,165,255,254,224,165,255,254,224,165,255,254,224,165,
255,254,224,165,255,254,224,165,255,254,224,165,255,254,224,165,255,254,224,165,
255,254,224,165,255,254,224,165,255,254,224,165,255,254,205,122,255,254,181,66,
255,254,181,66,255,254,181,66,255,254,181,66,255,255,153,51,255,255,153,51,255,
255,179,61,255,255,179,61,255,255,179,61,255,255,179,61,255,255,179,61,255,255,
182,67,255,255,201,111,255,254,217,148,255,254,223,161,255,254,223,161,255,254,
223,161,255,254,223,161,255,254,223,161,255,254,223,161,255,254,223,161,255,254,
223,161,255,254,223,161,255,254,223,161,255,254,223,161,255,254,223,161,255,96,
116,124,255,0,51,102,255,142,147,135,255,254,223,161,255,254,223,161,255,254,
223,161,255,254,223,161,255,32,73,109,255,0,51,102,255,206,191,150,255,206,191,
150,255,0,51,102,255,32,73,109,255,254,223,161,255,254,223,161,255,254,223,161,
255,190,180,146,255,0,51,102,255,64,94,117,255,254,223,161,255,96,116,124,255,0,
51,102,255,127,137,132,255,254,223,161,255,254,223,161,255,96,116,124,255,0,51,
102,255,142,147,135,255,254,223,161,255,238,212,157,255,96,116,124,255,32,73,
109,255,0,51,102,255,0,51,102,255,0,51,102,255,64,94,117,255,254,223,161,255,
254,223,161,255,127,137,132,255,0,51,102,255,112,127,128,255,254,223,161,255,
206,191,150,255,0,51,102,255,0,51,102,255,64,94,117,255,64,94,117,255,64,94,117,
255,0,51,102,255,0,51,102,255,254,223,161,255,254,223,161,255,254,223,161,255,
254,223,161,255,254,223,161,255,254,223,161,255,254,223,161,255,254,223,161,255,
254,223,161,255,254,223,161,255,254,223,161,255,254,223,161,255,254,220,154,255,
254,206,123,255,255,184,74,255,255,179,61,255,255,179,61,255,255,179,61,255,255,
179,61,255,255,179,61,255,255,153,51,255,255,153,51,255,255,177,56,255,255,177,
56,255,255,177,56,255,255,177,56,255,255,177,56,255,255,177,56,255,255,177,56,
255,255,177,56,255,255,185,75,255,255,199,106,255,254,207,125,255,254,210,132,
255,254,210,132,255,254,210,132,255,254,210,132,255,254,210,132,255,254,210,132,
255,254,210,132,255,254,210,132,255,254,210,132,255,48,81,108,255,0,51,102,255,
190,170,124,255,254,210,132,255,254,210,132,255,254,210,132,255,142,140,119,255,
0,51,102,255,32,71,106,255,254,210,132,255,190,170,124,255,0,51,102,255,64,91,
110,255,254,210,132,255,254,210,132,255,254,210,132,255,142,140,119,255,0,51,
102,255,96,111,113,255,254,210,132,255,48,81,108,255,0,51,102,255,190,170,124,
255,254,210,132,255,254,210,132,255,48,81,108,255,0,51,102,255,190,170,124,255,
254,210,132,255,64,91,110,255,0,51,102,255,80,101,111,255,190,170,124,255,127,
131,117,255,0,51,102,255,112,121,115,255,254,210,132,255,254,210,132,255,96,111,
113,255,0,51,102,255,158,150,121,255,254,210,132,255,190,170,124,255,0,51,102,
255,32,71,106,255,127,131,117,255,127,131,117,255,127,131,117,255,127,131,117,
255,127,131,117,255,254,210,132,255,254,210,132,255,254,210,132,255,254,210,132,
255,254,210,132,255,254,210,132,255,254,210,132,255,254,210,132,255,254,210,132,
255,254,210,132,255,255,199,106,255,255,191,87,255,255,177,56,255,255,177,56,
255,255,177,56,255,255,177,56,255,255,177,56,255,255,177,56,255,255,177,56,255,
255,177,56,255,255,153,51,255,255,153,51,255,255,173,47,255,255,175,51,255,255,
175,51,255,255,175,51,255,255,175,51,255,255,175,51,255,255,175,51,255,255,175,
51,255,255,175,51,255,255,175,51,255,255,175,51,255,255,175,51,255,255,175,51,
255,255,175,51,255,255,175,51,255,255,175,51,255,255,175,51,255,255,175,51,255,
255,175,51,255,255,175,51,255,0,51,102,255,0,51,102,255,255,175,51,255,255,175,
51,255,239,167,54,255,143,121,73,255,0,51,102,255,0,51,102,255,191,144,64,255,
255,175,51,255,223,159,57,255,0,51,102,255,32,67,96,255,239,167,54,255,255,175,
51,255,239,167,54,255,16,59,99,255,0,51,102,255,191,144,64,255,255,175,51,255,
0,51,102,255,0,51,102,255,255,175,51,255,255,175,51,255,255,175,51,255,0,51,
102,255,0,51,102,255,255,175,51,255,255,175,51,255,0,51,102,255,0,51,102,255,
255,175,51,255,255,175,51,255,64,82,89,255,0,51,102,255,159,128,70,255,255,175,
51,255,255,175,51,255,32,67,96,255,0,51,102,255,207,152,61,255,255,175,51,255,
223,159,57,255,0,51,102,255,32,67,96,255,255,175,51,255,255,175,51,255,207,152,
61,255,175,136,67,255,255,175,51,255,255,175,51,255,255,175,51,255,255,175,51,
255,255,175,51,255,255,175,51,255,255,175,51,255,255,175,51,255,255,175,51,255,
255,175,51,255,255,175,51,255,255,175,51,255,255,175,51,255,255,175,51,255,255,
175,51,255,255,175,51,255,255,175,51,255,255,175,51,255,255,175,51,255,255,175,
51,255,255,173,47,255,255,153,51,255,255,153,51,255,255,170,40,255,255,172,45,
255,255,172,45,255,255,172,45,255,255,172,45,255,255,172,45,255,255,172,45,255,
255,172,45,255,255,172,45,255,255,172,45,255,255,172,45,255,255,172,45,255,255,
172,45,255,255,172,45,255,255,172,45,255,255,172,45,255,255,172,45,255,255,172,
45,255,255,172,45,255,191,142,59,255,0,51,102,255,0,51,102,255,0,51,102,255,0,
51,102,255,0,51,102,255,0,51,102,255,0,51,102,255,159,126,66,255,255,172,45,
255,255,172,45,255,255,172,45,255,64,81,88,255,0,51,102,255,48,74,91,255,128,
112,73,255,32,66,95,255,0,51,102,255,96,97,81,255,255,172,45,255,191,142,59,255,
0,51,102,255,48,74,91,255,255,172,45,255,255,172,45,255,191,142,59,255,0,51,
102,255,48,74,91,255,255,172,45,255,255,172,45,255,32,66,95,255,0,51,102,255,80,
89,84,255,80,89,84,255,0,51,102,255,0,51,102,255,191,142,59,255,255,172,45,255,
255,172,45,255,0,51,102,255,0,51,102,255,112,104,77,255,175,134,63,255,255,172,
45,255,80,89,84,255,0,51,102,255,64,81,88,255,112,104,77,255,16,59,98,255,0,51,
102,255,207,149,56,255,255,172,45,255,255,172,45,255,255,172,45,255,255,172,45,
255,255,172,45,255,255,172,45,255,255,172,45,255,255,172,45,255,255,172,45,255,
255,172,45,255,255,172,45,255,255,172,45,255,255,172,45,255,255,172,45,255,255,
172,45,255,255,172,45,255,255,172,45,255,255,172,45,255,255,172,45,255,255,170,
41,255,255,153,51,255,0,0,0,0,255,153,51,255,255,170,40,255,255,170,40,255,255,
170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,
40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,
255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,
175,133,59,255,64,81,86,255,64,81,86,255,64,81,86,255,64,81,86,255,64,81,86,255,
128,111,71,255,223,155,48,255,255,170,40,255,255,170,40,255,255,170,40,255,255,
170,40,255,239,163,44,255,112,103,75,255,16,58,98,255,0,51,102,255,32,66,94,255,
128,111,71,255,255,170,40,255,255,170,40,255,175,133,59,255,64,81,86,255,143,
118,67,255,255,170,40,255,255,170,40,255,175,133,59,255,64,81,86,255,143,118,67,
255,255,170,40,255,255,170,40,255,191,140,56,255,32,66,94,255,16,58,98,255,128,
111,71,255,128,111,71,255,64,81,86,255,207,148,52,255,255,170,40,255,255,170,40,
255,128,111,71,255,16,58,98,255,0,51,102,255,159,125,63,255,255,170,40,255,239,
163,44,255,96,96,79,255,16,58,98,255,0,51,102,255,64,81,86,255,207,148,52,255,
255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,
170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,
40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,
255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,153,51,255,
0,0,0,0,0,0,0,0,255,153,51,255,255,169,38,255,255,170,40,255,255,170,40,255,
255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,
170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,
40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,
255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,
255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,
170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,
40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,
255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,
255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,
170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,
40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,
255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,
255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,
170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,
40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,
255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,255,170,40,255,
255,169,38,255,255,153,51,255,0,0,0,0,0,0,0,0,0,0,0,0,255,153,51,255,255,181,66,
255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,
255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,
181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,
66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,
255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,
255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,
181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,
66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,
255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,
255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,
181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,
66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,
255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,
255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,
181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,
66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,255,255,181,66,
255,255,181,66,255,255,153,51,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,153,51,
255,255,180,65,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,
255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,
193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,
97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,
255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,
255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,
193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,
97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,
255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,
255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,
193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,
97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,
255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,
255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,
193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,
97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,255,255,193,97,
255,255,193,97,255,255,180,65,255,255,153,51,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,255,153,51,255,255,190,90,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,205,128,255,255,
190,90,255,255,153,51,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,255,153,51,255,255,194,101,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,255,255,217,158,
255,255,217,158,255,255,217,158,255,255,194,101,255,255,153,51,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,153,51,255,
255,182,71,255,255,220,168,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,255,229,189,255,
255,229,189,255,255,229,189,255,255,229,189,255,255,220,168,255,255,182,71,255,
255,153,51,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,153,51,255,255,189,90,255,255,212,147,255,
255,231,195,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,255,241,219,255,
255,241,219,255,255,231,195,255,255,212,147,255,255,189,90,255,255,153,51,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,153,51,255,255,153,51,255,
255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,
153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,
51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,
255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,
255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,
153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,
51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,
255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,
255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,
153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,
51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,
255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,
255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,255,
153,51,255,255,153,51,255,255,153,51,255,255,153,51,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_btn_donate_LG(idata_btn_donate_LG, 92, 26, 4, 0);

AboutDlg::AboutDlg() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(532, 472, "About");
    window->box(FL_PLASTIC_UP_BOX);
    window->color((Fl_Color)22);
    window->user_data((void*)(this));
    window->align(Fl_Align(FL_ALIGN_CENTER));
    { Ok = new Fl_Return_Button(395, 430, 130, 30, "Ok");
      Ok->box(FL_PLASTIC_UP_BOX);
      Ok->color(FL_SELECTION_COLOR);
      Ok->callback((Fl_Callback*)cb_Ok);
    } // Fl_Return_Button* Ok
    { Fl_Group* o = new Fl_Group(10, 7, 515, 131);
      o->box(FL_EMBOSSED_FRAME);
      o->color((Fl_Color)1);
      { Fl_Box* o = new Fl_Box(15, 14, 505, 121);
        o->box(FL_SHADOW_FRAME);
        o->color((Fl_Color)1);
        o->image(image_Logo6);
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { Help = new Fl_Help_View(10, 155, 515, 260);
      Help->box(FL_GTK_DOWN_BOX);
      Help->color((Fl_Color)19);
      Help->load("About.html");
      Help->link(OpenLink);
      Help->textsize(15);
    } // Fl_Help_View* Help
    { Fl_Button* o = new Fl_Button(10, 425, 105, 30);
      o->box(FL_NO_BOX);
      o->image(image_btn_donate_LG);
      o->callback((Fl_Callback*)cb_8);
    } // Fl_Button* o
    o->set_modal();
    window->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void AboutDlg::show() {
  /*
  Info->add("* FannTool is a GUI tool for ANN by using FANN library");
  Info->add("  FANN is a free open source neural network library");
  Info->add("  FANN Web Page : leenissen.dk/fann/");
  Info->add("  FannTool page : http://code.google.com/p/fanntool/");
  Info->add("* Programmed by BlueKid");
  Info->add("  http://derindelimavi.blogspot.com/");
  Info->add("* Please Send me any suggestion, modification or bugs.");
  Info->add(" Don't hesitate to contact me for any question");
  Info->add(" I will be very grateful with your feedbacks.");
  Info->add(" bluekid70@gmail.com");
  */
  window->show();
}

void AboutDlg::hide() {
  window->hide();
}

void SaveDlg::cb_Save1_i(Fl_Button*, void*) {
  char* file=NULL;
int i=-1;
if(Latest->value()){
  i=3;
}
else if(ANN0->value())
  i=0;
else if(ANN1->value())
  i=1;
else if(ANN2->value())
  i=2;

file = FileSelect("Save Selected ANN", Network,Save);
//file = fl_file_chooser("Save Selected ANN", "*.net", file);
if(file!=NULL){
   fann_save(MinANN[i], fNameBuf);
   fl_message("ANN Saved...");
};
}
void SaveDlg::cb_Save1(Fl_Button* o, void* v) {
  ((SaveDlg*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

SaveDlg::SaveDlg() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(573, 366, "Save ANN");
    window->box(FL_PLASTIC_UP_BOX);
    window->color((Fl_Color)22);
    window->user_data((void*)(this));
    window->align(Fl_Align(FL_ALIGN_CENTER));
    { Ok = new Fl_Return_Button(424, 315, 130, 30, "Exit");
      Ok->box(FL_PLASTIC_UP_BOX);
      Ok->color(FL_SELECTION_COLOR);
      Ok->callback((Fl_Callback*)cb_Ok);
    } // Fl_Return_Button* Ok
    { Fl_Group* o = new Fl_Group(20, 27, 535, 238);
      o->box(FL_EMBOSSED_FRAME);
      { Fl_Group* o = new Fl_Group(45, 82, 170, 140);
        { Latest = new Fl_Round_Button(45, 82, 170, 20, "Latest  ANN");
          Latest->type(102);
          Latest->down_box(FL_ROUND_DOWN_BOX);
          Latest->value(1);
        } // Fl_Round_Button* Latest
        { ANN0 = new Fl_Round_Button(45, 115, 170, 24, "Minimum Training MSE");
          ANN0->type(102);
          ANN0->down_box(FL_ROUND_DOWN_BOX);
        } // Fl_Round_Button* ANN0
        { ANN1 = new Fl_Round_Button(45, 163, 170, 19, "Minimum Testing MSE");
          ANN1->type(102);
          ANN1->down_box(FL_ROUND_DOWN_BOX);
          ANN1->deactivate();
        } // Fl_Round_Button* ANN1
        { ANN2 = new Fl_Round_Button(45, 202, 170, 20, "Minimum  OCS MSE");
          ANN2->type(102);
          ANN2->down_box(FL_ROUND_DOWN_BOX);
          ANN2->deactivate();
        } // Fl_Round_Button* ANN2
        o->end();
      } // Fl_Group* o
      { Fl_Value_Output* o = new Fl_Value_Output(295, 78, 100, 24, "Training MSE ");
        o->align(Fl_Align(FL_ALIGN_TOP));
        o->value(MinTrainingMSE[3]);
      } // Fl_Value_Output* o
      { Fl_Group* o = new Fl_Group(295, 78, 230, 145);
        { OCS1 = new Fl_Group(420, 78, 105, 61);
          OCS1->deactivate();
          { Fl_Value_Output* o = new Fl_Value_Output(420, 78, 105, 24, "Testing MSE ");
            o->align(Fl_Align(FL_ALIGN_TOP));
            if(ft.TestData && ft.overtraining) o->value(MinTestingMSE[3]);
          } // Fl_Value_Output* o
          { Fl_Value_Output* o = new Fl_Value_Output(420, 115, 105, 24);
            o->align(Fl_Align(FL_ALIGN_TOP));
            if(ft.TestData && ft.overtraining)o->value(MinTestingMSE[0]);
          } // Fl_Value_Output* o
          OCS1->end();
        } // Fl_Group* OCS1
        { OCS2 = new Fl_Group(295, 159, 230, 64);
          OCS2->deactivate();
          { Fl_Value_Output* o = new Fl_Value_Output(295, 159, 100, 24);
            o->align(Fl_Align(FL_ALIGN_TOP));
            if(ft.TestData && ft.overtraining) o->value(MinTrainingMSE[1]);
          } // Fl_Value_Output* o
          { Fl_Value_Output* o = new Fl_Value_Output(420, 159, 105, 24);
            o->align(Fl_Align(FL_ALIGN_TOP));
            if(ft.TestData && ft.overtraining)o->value(MinTestingMSE[1]);
          } // Fl_Value_Output* o
          { Fl_Value_Output* o = new Fl_Value_Output(295, 198, 100, 24);
            o->align(Fl_Align(FL_ALIGN_TOP));
            if(ft.TestData && ft.overtraining) o->value(MinTrainingMSE[2]);
          } // Fl_Value_Output* o
          { Fl_Value_Output* o = new Fl_Value_Output(420, 198, 105, 24);
            o->align(Fl_Align(FL_ALIGN_TOP));
            if(ft.TestData && ft.overtraining)o->value(MinTestingMSE[2]);
          } // Fl_Value_Output* o
          OCS2->end();
        } // Fl_Group* OCS2
        o->end();
      } // Fl_Group* o
      { Fl_Value_Output* o = new Fl_Value_Output(295, 115, 100, 24);
        o->align(Fl_Align(FL_ALIGN_TOP));
        o->value(MinTrainingMSE[0]);
      } // Fl_Value_Output* o
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(250, 315, 130, 30, "&Save ANN");
      o->box(FL_PLASTIC_UP_BOX);
      o->shortcut(0x40073);
      o->color((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Save1);
    } // Fl_Button* o
    o->set_modal();
    window->set_modal();
    window->end();
    window->resizable(window);
  } // Fl_Double_Window* window
}

void SaveDlg::show() {
  if(ft.TestData && ft.overtraining){
    ANN1->activate();
    ANN2->activate();
    OCS1->activate();
    OCS2->activate();

  }
  window->show();
}

void SaveDlg::hide() {
  window->hide();
}

SaveDlg::~SaveDlg() {
  fl_alert("Save dialog Closing");
}

void NDPDlg::cb_Ok_i(Fl_Return_Button* o, void*) {
  // cb_Ok
delete rdp;
((Fl_Window *)(o->parent()))->hide();
}
void NDPDlg::cb_Ok(Fl_Return_Button* o, void* v) {
  ((NDPDlg*)(o->parent()->user_data()))->cb_Ok_i(o,v);
}

void NDPDlg::cb_nOutput_i(Fl_Counter*, void*) {
  nInput->value(rdp->GetNItem()-nOutput->value());
}
void NDPDlg::cb_nOutput(Fl_Counter* o, void* v) {
  ((NDPDlg*)(o->parent()->user_data()))->cb_nOutput_i(o,v);
}

void NDPDlg::cb_Wbt_i(Fl_Button* o, void*) {
  bool result;
if(shuffle->value())
        rdp->Shuffle();
  if(Scale_D->value()){
     result=rdp->WriteScaleParameters((char*)fName->value());
     rdp->ScaleAll();
     if(result)
       fl_message("Scaling Parameters saved successfully ");
     else
       fl_alert("Error occured during Scaling Parameters saving ");


   }

  result=rdp->WriteData((char*)fName->value(),nOutput->value(),rTrain->value());

  if(result)
    fl_message("Data Files saved successfully ");
  else
    fl_alert("Error occured during Data Files saving ");

delete rdp;
((Fl_Window *)(o->parent()))->hide();
}
void NDPDlg::cb_Wbt(Fl_Button* o, void* v) {
  ((NDPDlg*)(o->parent()->user_data()))->cb_Wbt_i(o,v);
}

void NDPDlg::cb_rTrain_i(Fl_Value_Slider*, void*) {
  rTest->value(1.0-rTrain->value());
}
void NDPDlg::cb_rTrain(Fl_Value_Slider* o, void* v) {
  ((NDPDlg*)(o->parent()->user_data()))->cb_rTrain_i(o,v);
}

void NDPDlg::cb_rTest_i(Fl_Value_Slider*, void*) {
  rTrain->value(1.0-rTest->value());
}
void NDPDlg::cb_rTest(Fl_Value_Slider* o, void* v) {
  ((NDPDlg*)(o->parent()->user_data()))->cb_rTest_i(o,v);
}

void NDPDlg::cb_Item_i(Fl_Counter*, void*) {
  GetItemData();
}
void NDPDlg::cb_Item(Fl_Counter* o, void* v) {
  ((NDPDlg*)(o->parent()->parent()->user_data()))->cb_Item_i(o,v);
}

void NDPDlg::cb_MinV_i(Fl_Value_Slider*, void*) {
  itmp=rdp->GetItem(Item->value());
  itmp->SetMinV(MinV->value());
}
void NDPDlg::cb_MinV(Fl_Value_Slider* o, void* v) {
  ((NDPDlg*)(o->parent()->parent()->user_data()))->cb_MinV_i(o,v);
}

void NDPDlg::cb_MaxV_i(Fl_Value_Slider*, void*) {
  itmp=rdp->GetItem(Item->value());
  itmp->SetMaxV(MaxV->value());
}
void NDPDlg::cb_MaxV(Fl_Value_Slider* o, void* v) {
  ((NDPDlg*)(o->parent()->parent()->user_data()))->cb_MaxV_i(o,v);
}

void NDPDlg::cb_Scale_I_i(Fl_Check_Button*, void*) {
  itmp=rdp->GetItem(Item->value());
  itmp->scale=Scale_I->value();
}
void NDPDlg::cb_Scale_I(Fl_Check_Button* o, void* v) {
  ((NDPDlg*)(o->parent()->parent()->user_data()))->cb_Scale_I_i(o,v);
}

void NDPDlg::cb_Min_i(Fl_Value_Input*, void*) {
  itmp=rdp->GetItem(Item->value());
if(itmp->GetMin() > Min->value()){
  itmp->SetMin(Min->value());
}
else{
   fl_alert("Value must be less than %f",itmp->GetMin());
   Min->value(itmp->GetMin());
};
}
void NDPDlg::cb_Min(Fl_Value_Input* o, void* v) {
  ((NDPDlg*)(o->parent()->parent()->user_data()))->cb_Min_i(o,v);
}

void NDPDlg::cb_Max_i(Fl_Value_Input*, void*) {
  itmp=rdp->GetItem(Item->value());
if(itmp->GetMax() < Max->value()){
  itmp->SetMax(Max->value());
}
else{
   fl_alert("Value must be greater than %f",itmp->GetMax());
   Max->value(itmp->GetMax());
};
}
void NDPDlg::cb_Max(Fl_Value_Input* o, void* v) {
  ((NDPDlg*)(o->parent()->parent()->user_data()))->cb_Max_i(o,v);
}

NDPDlg::NDPDlg(char * FileName) {
  { Fl_Double_Window* o = window = new Fl_Double_Window(755, 533, "Raw Data Processing ");
    window->box(FL_PLASTIC_UP_BOX);
    window->color((Fl_Color)19);
    window->user_data((void*)(this));
    window->align(Fl_Align(FL_ALIGN_CENTER));
    { Ok = new Fl_Return_Button(619, 497, 130, 30, "Exit");
      Ok->box(FL_PLASTIC_UP_BOX);
      Ok->color(FL_SELECTION_COLOR);
      Ok->callback((Fl_Callback*)cb_Ok);
    } // Fl_Return_Button* Ok
    { RawFile = new Fl_Output(110, 14, 367, 24, "Raw Data File:");
      RawFile->value(FileName);
    } // Fl_Output* RawFile
    { nDataPoint = new Fl_Value_Output(599, 15, 80, 24, "Number of Data:");
    } // Fl_Value_Output* nDataPoint
    { nInput = new Fl_Value_Output(158, 50, 44, 24, "Number of Input dim.:");
    } // Fl_Value_Output* nInput
    { nOutput = new Fl_Counter(360, 48, 75, 26, "Number of Output dim.:");
      nOutput->type(1);
      nOutput->box(FL_GTK_UP_BOX);
      nOutput->color((Fl_Color)33);
      nOutput->minimum(1);
      nOutput->step(1);
      nOutput->value(1);
      nOutput->callback((Fl_Callback*)cb_nOutput);
      nOutput->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Counter* nOutput
    { Wbt = new Fl_Button(472, 499, 130, 30, "Write Data Files");
      Wbt->box(FL_PLASTIC_UP_BOX);
      Wbt->color((Fl_Color)10);
      Wbt->callback((Fl_Callback*)cb_Wbt);
    } // Fl_Button* Wbt
    { rTrain = new Fl_Value_Slider(20, 100, 175, 20, "Fraction of Data for Training");
      rTrain->type(1);
      rTrain->box(FL_EMBOSSED_BOX);
      rTrain->color((Fl_Color)22);
      rTrain->selection_color((Fl_Color)1);
      rTrain->minimum(0.5);
      rTrain->step(0.1);
      rTrain->value(0.6);
      rTrain->textsize(14);
      rTrain->callback((Fl_Callback*)cb_rTrain);
      rTrain->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Value_Slider* rTrain
    { rTest = new Fl_Value_Slider(210, 100, 175, 20, "Fraction of Data for Testing");
      rTest->type(1);
      rTest->box(FL_EMBOSSED_BOX);
      rTest->color((Fl_Color)22);
      rTest->selection_color((Fl_Color)1);
      rTest->maximum(0.5);
      rTest->step(0.1);
      rTest->value(0.4);
      rTest->textsize(14);
      rTest->callback((Fl_Callback*)cb_rTest);
      rTest->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Value_Slider* rTest
    { shuffle = new Fl_Check_Button(440, 54, 85, 20, "Shuffle Data");
      shuffle->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* shuffle
    { fName = new Fl_Input(560, 96, 136, 24, "Data File Name Stem:");
      fName->value(fl_filename_setext(FileName,"_out"));
    } // Fl_Input* fName
    { Scale_D = new Fl_Check_Button(570, 50, 120, 24, "Scale Data");
      Scale_D->down_box(FL_DOWN_BOX);
      Scale_D->value(1);
    } // Fl_Check_Button* Scale_D
    { Fl_Group* o = new Fl_Group(15, 130, 735, 365);
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)19);
      { Item = new Fl_Counter(100, 154, 56, 20, "Item No");
        Item->type(1);
        Item->labelcolor((Fl_Color)4);
        Item->minimum(0);
        Item->step(1);
        Item->callback((Fl_Callback*)cb_Item);
        Item->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Counter* Item
      { Chart = new Fl_Chart(40, 179, 695, 268);
        Chart->tooltip("Histogram");
        Chart->box(FL_EMBOSSED_BOX);
        Chart->color((Fl_Color)34);
        Chart->selection_color(FL_BACKGROUND_COLOR);
        Chart->labeltype(FL_NORMAL_LABEL);
        Chart->labelfont(0);
        Chart->labelsize(14);
        Chart->labelcolor(FL_FOREGROUND_COLOR);
        Chart->align(Fl_Align(FL_ALIGN_CENTER));
        Chart->when(FL_WHEN_RELEASE);
        Chart->type(FL_BAR_CHART);
        Chart->bounds(-0.05,1);
      } // Fl_Chart* Chart
      { MinV = new Fl_Value_Slider(174, 154, 142, 20, "Minimum Output Value");
        MinV->type(1);
        MinV->box(FL_EMBOSSED_BOX);
        MinV->color((Fl_Color)22);
        MinV->selection_color((Fl_Color)1);
        MinV->minimum(-1);
        MinV->maximum(0.3);
        MinV->step(0.1);
        MinV->textsize(14);
        MinV->callback((Fl_Callback*)cb_MinV);
        MinV->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Slider* MinV
      { MaxV = new Fl_Value_Slider(329, 154, 146, 20, "Maximum Output Value");
        MaxV->type(1);
        MaxV->box(FL_EMBOSSED_BOX);
        MaxV->color((Fl_Color)22);
        MaxV->selection_color((Fl_Color)1);
        MaxV->minimum(0.5);
        MaxV->step(0.1);
        MaxV->value(1);
        MaxV->textsize(14);
        MaxV->callback((Fl_Callback*)cb_MaxV);
        MaxV->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Slider* MaxV
      { Scale_I = new Fl_Check_Button(514, 154, 64, 15, "Scale Item ");
        Scale_I->down_box(FL_DOWN_BOX);
        Scale_I->value(1);
        Scale_I->callback((Fl_Callback*)cb_Scale_I);
      } // Fl_Check_Button* Scale_I
      { Min = new Fl_Value_Input(40, 453, 80, 25);
        Min->callback((Fl_Callback*)cb_Min);
        Min->when(FL_WHEN_RELEASE);
      } // Fl_Value_Input* Min
      { Max = new Fl_Value_Input(655, 453, 80, 24);
        Max->callback((Fl_Callback*)cb_Max);
        Max->when(FL_WHEN_RELEASE);
      } // Fl_Value_Input* Max
      o->end();
    } // Fl_Group* o
    o->set_modal();
    window->set_modal();
    window->end();
    window->resizable(window);
  } // Fl_Double_Window* window
}

void NDPDlg::show() {
  nDataPoint->value(rdp->GetNData());
    nInput->value(rdp->GetNItem()-1);
    nOutput->maximum(rdp->GetNItem()-1);
    Item->maximum(rdp->GetNItem()-1);
    GetItemData();
    window->show();
}

void NDPDlg::hide() {
  window->hide();
}

void NDPDlg::GetItemData() {
  //  Item k?m?
    itmp=rdp->GetItem(Item->value());
    Min->value(itmp->GetMin());
    MinV->value(itmp->GetMinV());
    Max->value(itmp->GetMax());
    MaxV->value(itmp->GetMaxV());
    Chart->clear();
    double *hst=itmp->Histogram(10);
    for(int i=0; i<10;i++){
      char buf[50];
      sprintf(buf,"%.1f",100*hst[i]);
      Chart->add(hst[i],buf,19);
    }
    Scale_I->value(itmp->scale);
}

void TDPDlg::cb_Ok1_i(Fl_Return_Button* o, void*) {
  // cb_Ok
delete rdp;
((Fl_Window *)(o->parent()))->hide();
}
void TDPDlg::cb_Ok1(Fl_Return_Button* o, void* v) {
  ((TDPDlg*)(o->parent()->user_data()))->cb_Ok1_i(o,v);
}

void TDPDlg::cb_nInput_i(Fl_Counter*, void*) {
  tdp->nInput=nInput->value();
}
void TDPDlg::cb_nInput(Fl_Counter* o, void* v) {
  ((TDPDlg*)(o->parent()->user_data()))->cb_nInput_i(o,v);
}

void TDPDlg::cb_Wbt1_i(Fl_Button* o, void*) {
  bool result;
// if(shuffle->value()) tdp->Shuffle();
  if(Scale_D->value()){
     result=tdp->WriteScaleParameters((char*)fName->value());
     if(tdp->scale) tdp->Scale();
     if(result)
       fl_message("Scaling Parameters saved successfully ");
     else
       fl_alert("Error occured during Scaling Parameters saving ");


   }

  result=tdp->WriteData((char*)fName->value(),rTrain->value());

  if(result)
    fl_message("Data Files saved successfully ");
  else
    fl_alert("Error occured during Data Files saving ");


((Fl_Window *)(o->parent()))->hide();
}
void TDPDlg::cb_Wbt1(Fl_Button* o, void* v) {
  ((TDPDlg*)(o->parent()->user_data()))->cb_Wbt1_i(o,v);
}

void TDPDlg::cb_rTrain1_i(Fl_Value_Slider*, void*) {
  rTest->value(1.0-rTrain->value());
}
void TDPDlg::cb_rTrain1(Fl_Value_Slider* o, void* v) {
  ((TDPDlg*)(o->parent()->user_data()))->cb_rTrain1_i(o,v);
}

void TDPDlg::cb_rTest1_i(Fl_Value_Slider*, void*) {
  rTrain->value(1.0-rTest->value());
}
void TDPDlg::cb_rTest1(Fl_Value_Slider* o, void* v) {
  ((TDPDlg*)(o->parent()->user_data()))->cb_rTest1_i(o,v);
}

void TDPDlg::cb_Shuffle_i(Fl_Check_Button*, void*) {
  tdp->shuffle=Shuffle->value();
}
void TDPDlg::cb_Shuffle(Fl_Check_Button* o, void* v) {
  ((TDPDlg*)(o->parent()->user_data()))->cb_Shuffle_i(o,v);
}

void TDPDlg::cb_Scale_D_i(Fl_Check_Button*, void*) {
  tdp->scale=Scale_D->value();
}
void TDPDlg::cb_Scale_D(Fl_Check_Button* o, void* v) {
  ((TDPDlg*)(o->parent()->user_data()))->cb_Scale_D_i(o,v);
}

void TDPDlg::cb_Min1_i(Fl_Value_Input*, void*) {
  if(tdp->GetMin() > Min->value()){
  tdp->SetMin(Min->value());
}
else{
   fl_alert("Value must be less than %f",tdp->GetMin());
   Min->value(tdp->GetMin());
};
}
void TDPDlg::cb_Min1(Fl_Value_Input* o, void* v) {
  ((TDPDlg*)(o->parent()->parent()->user_data()))->cb_Min1_i(o,v);
}

void TDPDlg::cb_Max1_i(Fl_Value_Input*, void*) {
  if(tdp->GetMax() < Max->value()){
  tdp->SetMax(Max->value());
}
else{
   fl_alert("Value must be greater than %f",tdp->GetMax());
   Max->value(tdp->GetMax());
};
}
void TDPDlg::cb_Max1(Fl_Value_Input* o, void* v) {
  ((TDPDlg*)(o->parent()->parent()->user_data()))->cb_Max1_i(o,v);
}

void TDPDlg::cb_MinV1_i(Fl_Value_Slider*, void*) {
  tdp->SetMinV(MinV->value());
}
void TDPDlg::cb_MinV1(Fl_Value_Slider* o, void* v) {
  ((TDPDlg*)(o->parent()->parent()->user_data()))->cb_MinV1_i(o,v);
}

void TDPDlg::cb_MaxV1_i(Fl_Value_Slider*, void*) {
  tdp->SetMaxV(MaxV->value());
}
void TDPDlg::cb_MaxV1(Fl_Value_Slider* o, void* v) {
  ((TDPDlg*)(o->parent()->parent()->user_data()))->cb_MaxV1_i(o,v);
}

void TDPDlg::cb_Hist_i(Fl_Light_Button*, void*) {
  DrawGraph();
}
void TDPDlg::cb_Hist(Fl_Light_Button* o, void* v) {
  ((TDPDlg*)(o->parent()->parent()->parent()->user_data()))->cb_Hist_i(o,v);
}

void TDPDlg::cb_Time_i(Fl_Light_Button*, void*) {
  DrawGraph();
}
void TDPDlg::cb_Time(Fl_Light_Button* o, void* v) {
  ((TDPDlg*)(o->parent()->parent()->parent()->user_data()))->cb_Time_i(o,v);
}

TDPDlg::TDPDlg(char * FileName) {
  { Fl_Double_Window* o = window = new Fl_Double_Window(784, 530, "Time Series  Data Processing ");
    window->box(FL_PLASTIC_UP_BOX);
    window->color((Fl_Color)19);
    window->user_data((void*)(this));
    window->align(Fl_Align(FL_ALIGN_CENTER));
    { Ok = new Fl_Return_Button(657, 495, 130, 30, "Exit");
      Ok->box(FL_PLASTIC_UP_BOX);
      Ok->color(FL_SELECTION_COLOR);
      Ok->callback((Fl_Callback*)cb_Ok1);
    } // Fl_Return_Button* Ok
    { RawFile = new Fl_Output(115, 16, 395, 24, "Raw Data File :");
      RawFile->value(FileName);
    } // Fl_Output* RawFile
    { nDataPoint = new Fl_Value_Output(665, 16, 80, 24, "Number of Data:");
    } // Fl_Value_Output* nDataPoint
    { nInput = new Fl_Counter(155, 48, 75, 26, "Number of Input dim.:");
      nInput->type(1);
      nInput->box(FL_GTK_UP_BOX);
      nInput->color((Fl_Color)33);
      nInput->minimum(1);
      nInput->step(1);
      nInput->value(1);
      nInput->callback((Fl_Callback*)cb_nInput);
      nInput->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Counter* nInput
    { Wbt = new Fl_Button(505, 495, 130, 30, "Write Data Files");
      Wbt->box(FL_PLASTIC_UP_BOX);
      Wbt->color((Fl_Color)10);
      Wbt->callback((Fl_Callback*)cb_Wbt1);
    } // Fl_Button* Wbt
    { rTrain = new Fl_Value_Slider(20, 100, 175, 20, "Fraction of Data for Training");
      rTrain->type(1);
      rTrain->box(FL_EMBOSSED_BOX);
      rTrain->color((Fl_Color)22);
      rTrain->selection_color((Fl_Color)1);
      rTrain->minimum(0.5);
      rTrain->step(0.1);
      rTrain->value(0.6);
      rTrain->textsize(14);
      rTrain->callback((Fl_Callback*)cb_rTrain1);
      rTrain->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Value_Slider* rTrain
    { rTest = new Fl_Value_Slider(230, 100, 175, 20, "Fraction of Data for Testing");
      rTest->type(1);
      rTest->box(FL_EMBOSSED_BOX);
      rTest->color((Fl_Color)22);
      rTest->selection_color((Fl_Color)1);
      rTest->maximum(0.5);
      rTest->step(0.1);
      rTest->value(0.4);
      rTest->textsize(14);
      rTest->callback((Fl_Callback*)cb_rTest1);
      rTest->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Value_Slider* rTest
    { Shuffle = new Fl_Check_Button(460, 54, 85, 20, "Shuffle Data");
      Shuffle->down_box(FL_DOWN_BOX);
      Shuffle->callback((Fl_Callback*)cb_Shuffle);
    } // Fl_Check_Button* Shuffle
    { fName = new Fl_Input(560, 96, 136, 24, "Data File Name Stem:");
      fName->value(fl_filename_setext(FileName,"_out"));
    } // Fl_Input* fName
    { Scale_D = new Fl_Check_Button(590, 50, 120, 24, "Scale Data");
      Scale_D->down_box(FL_DOWN_BOX);
      Scale_D->value(1);
      Scale_D->callback((Fl_Callback*)cb_Scale_D);
    } // Fl_Check_Button* Scale_D
    { Gr = new Fl_Group(15, 130, 767, 355);
      Gr->box(FL_PLASTIC_UP_BOX);
      Gr->color((Fl_Color)19);
      { Min = new Fl_Value_Input(40, 451, 75, 24);
        Min->callback((Fl_Callback*)cb_Min1);
        Min->when(FL_WHEN_RELEASE);
      } // Fl_Value_Input* Min
      { Max = new Fl_Value_Input(692, 451, 80, 24);
        Max->callback((Fl_Callback*)cb_Max1);
        Max->when(FL_WHEN_RELEASE);
      } // Fl_Value_Input* Max
      { Chart = new Fl_Chart(40, 179, 710, 268);
        Chart->box(FL_EMBOSSED_BOX);
        Chart->color((Fl_Color)34);
        Chart->selection_color(FL_BACKGROUND_COLOR);
        Chart->labeltype(FL_NORMAL_LABEL);
        Chart->labelfont(0);
        Chart->labelsize(14);
        Chart->labelcolor(FL_FOREGROUND_COLOR);
        Chart->align(Fl_Align(FL_ALIGN_CENTER));
        Chart->when(FL_WHEN_RELEASE);
        Chart->type(FL_BAR_CHART);
        Chart->bounds(-0.05,1);
      } // Fl_Chart* Chart
      { MinV = new Fl_Value_Slider(55, 149, 142, 20, "Minimum Output Value");
        MinV->type(1);
        MinV->box(FL_EMBOSSED_BOX);
        MinV->color((Fl_Color)22);
        MinV->selection_color((Fl_Color)1);
        MinV->minimum(-1);
        MinV->maximum(0.3);
        MinV->step(0.1);
        MinV->textsize(14);
        MinV->callback((Fl_Callback*)cb_MinV1);
        MinV->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Slider* MinV
      { MaxV = new Fl_Value_Slider(225, 151, 146, 18, "Maximum Output Value");
        MaxV->type(1);
        MaxV->box(FL_EMBOSSED_BOX);
        MaxV->color((Fl_Color)22);
        MaxV->selection_color((Fl_Color)1);
        MaxV->minimum(0.5);
        MaxV->step(0.1);
        MaxV->value(1);
        MaxV->textsize(14);
        MaxV->callback((Fl_Callback*)cb_MaxV1);
        MaxV->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Slider* MaxV
      { Fl_Group* o = new Fl_Group(395, 140, 355, 29);
        o->color((Fl_Color)23);
        { Hist = new Fl_Light_Button(425, 145, 115, 20, "Histogram");
          Hist->type(102);
          Hist->box(FL_NO_BOX);
          Hist->value(1);
          Hist->selection_color((Fl_Color)1);
          Hist->callback((Fl_Callback*)cb_Hist);
        } // Fl_Light_Button* Hist
        { Fl_Light_Button* o = new Fl_Light_Button(590, 145, 115, 20, "Time Series");
          o->type(102);
          o->box(FL_NO_BOX);
          o->selection_color((Fl_Color)1);
          o->callback((Fl_Callback*)cb_Time);
        } // Fl_Light_Button* o
        o->end();
      } // Fl_Group* o
      Gr->end();
    } // Fl_Group* Gr
    { Fl_Value_Output* o = new Fl_Value_Output(395, 50, 25, 24, "Number of Output dim.:");
      o->value(1);
    } // Fl_Value_Output* o
    o->set_modal();
    window->set_modal();
    window->end();
    window->resizable(window);
  } // Fl_Double_Window* window
}

void TDPDlg::show() {
  nDataPoint->value(tdp->GetNData());
    nInput->value(tdp->nInput);
  //  nOutput->maximum(tdp->nOutput);

  //  itmp=rdp->GetItem(Item->value());
    Min->value(tdp->GetMin());
    MinV->value(tdp->GetMinV());
    Max->value(tdp->GetMax());
    MaxV->value(tdp->GetMaxV());
    DrawGraph();
    Scale_D->value(tdp->scale);


    window->show();
}

void TDPDlg::hide() {
  window->hide();
}

void TDPDlg::DrawGraph() {
  if(Hist->value()){
      Chart->clear();
      Chart->type(FL_BAR_CHART);
      Chart->bounds(-0.05,1);
      Chart->resize(40,179,710,268);
      Max->position(692,451);
      double *hst=tdp->Histogram(10);
      for(int i=0; i<10;i++){
        char buf[50];
        sprintf(buf,"%.1f",100*hst[i]);
        Chart->add(hst[i],buf,19);
      }
    }
    else{
      Chart->clear();
      Chart->type(FL_LINE_CHART);
      Chart->bounds(Min->value(),Max->value());
      Chart->resize(115,179,635,268);
      Max->position(30,183);
      for(long i=0; i<tdp->count;i++){
         Chart->add(tdp->GetData(i));
      }

    }

  Gr->redraw();
}

const char * OpenLink(Fl_Widget *w, const char *uri) {
  fl_open_uri(uri, "Deneme");
  return NULL;
}

void Exit_CB(Fl_Widget*o, void*w) {
  if(ft.working ){
   if(fl_choice("Are you sure you want to exit? \n Training Continue!","Return to Program" ,"Exit" ,NULL)){

      ft.StopProcess();
      Fl::wait(10);
      exit(0);
    }

  }


  if(fl_choice("Do you want to exit","Return to Program" ,"Exit" ,NULL)){

    exit(0);
  }
}

Fl_Double_Window *splash=(Fl_Double_Window *)0;

Fl_Slider *wait=(Fl_Slider *)0;

static void cb_9(Fl_Button*, void*) {
  mDonation();
}

Fl_Return_Button *Ok=(Fl_Return_Button *)0;

static void cb_Ok2(Fl_Return_Button*, void*) {
  nowait->value(1);
}

Fl_Check_Button *nowait=(Fl_Check_Button *)0;

Fl_Browser *DMesg=(Fl_Browser *)0;

void splashScreen(int sec) {
  { splash = new Fl_Double_Window(522, 378);
    splash->box(FL_UP_BOX);
    splash->color((Fl_Color)31);
    splash->hotspot(splash);
    { wait = new Fl_Slider(15, 140, 500, 10);
      wait->type(3);
      wait->box(FL_ENGRAVED_BOX);
      wait->color((Fl_Color)23);
      wait->selection_color((Fl_Color)1);
      wait->maximum(sec);
      wait->clear_visible_focus();
    } // Fl_Slider* wait
    { Fl_Box* o = new Fl_Box(15, 12, 500, 114);
      o->image(image_Logo6);
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(15, 325, 100, 35);
      o->box(FL_NO_BOX);
      o->image(image_btn_donate_LG);
      o->callback((Fl_Callback*)cb_9);
    } // Fl_Button* o
    { Ok = new Fl_Return_Button(400, 335, 115, 30, "Ok");
      Ok->callback((Fl_Callback*)cb_Ok2);
    } // Fl_Return_Button* Ok
    { nowait = new Fl_Check_Button(185, 430, 64, 15, "button");
      nowait->down_box(FL_DOWN_BOX);
      nowait->hide();
      nowait->deactivate();
    } // Fl_Check_Button* nowait
    { DMesg = new Fl_Browser(15, 160, 500, 155);
      DMesg->box(FL_GTK_UP_FRAME);
      DMesg->textsize(16);
    } // Fl_Browser* DMesg
    splash->set_modal();
    splash->end();
  } // Fl_Double_Window* splash
  int x,y,w,h;
  fl_center(splash);
  splash->clear_border();
   char *Text[]={"",
            "FANNTool is an Open Source project ",
    	      "And so the users and the community are important factor.",
    	      "@bWe appreciate every feedback, question, bug report, patches",
    	      "@bAnd of course donations.",
    	      "@bBy donating money to FANNTool,",
    	      "@bYou help us to continue to development of new versions ",
    	      "",
    	      };
    for(int i=0;i<8;i++)
       DMesg->add(Text[i]);splash->show();

  do {
         Fl::check();

  } while (!splash->visible());


  //  time_t start,end;

    clock_t start,end;

    double dif;
  //  time (&start);
  start= clock();


    do{
  //    time (&end);
      end = clock();
  //    dif = difftime (end,start);
      dif = 100*((double)(end-start))/CLK_TCK;
      wait->value(dif);
      wait->redraw();
      Fl::check();
    }while(dif<sec && nowait->value()==0);

  // Ok->activate();
   splash->hide();


  // return splash;
}

void fl_center(Fl_Double_Window*win) {
  int x,y,w,h;
      Fl::screen_xywh(x,y,w,h);
      int sx,sy;

      sx=(w-win->w())/2;
      sy=(h-win->h())/2;
      win->position(sx,sy);
}
static bool FSIn=false;
/**
   // gloabal olmayınca tekrar tekrar çalışıyor
*/
static Fl_Native_File_Chooser fnfc;

char * FileSelect(char *Msg,FileType f,SelectType s) {
  if(FSIn) return NULL;
        FSIn=true;
      char *filterTexts[]={
          "Data File \t*.dat",
          "Log File \t*.log",
          "Raw Data File \t*.txt",
          "Neural Network File \t*.net"
      };
     //     Fl_Native_File_Chooser *fnfc=new Fl_Native_File_Chooser();;
          fnfc.title(Msg);
          if(s== Open)
            fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
          else
            fnfc.type(Fl_Native_File_Chooser::BROWSE_SAVE_FILE);

          fnfc.filter(filterTexts[f]);
          switch ( fnfc.show() ) {
            case -1:
                fl_alert("ERROR: %s\n", fnfc.errmsg());
                FSIn=false;
                return NULL;
            break; // ERROR
            case 1:
                 FSIn=false;
                 return NULL;
            break; // CANCEL
            default:
                FSIn=false;
                fl_utf8to_mb (fnfc.filename(),strlen(fnfc.filename()),fNameBuf,2048 );
                return (char *) fnfc.filename();
            break; // FILE CHOSEN
          }
}

void mDonation() {
  char errmsg[512];
  char url[]="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=Z4LJTTPXCLYN6l";
  if ( !fl_open_uri(url, errmsg, sizeof(errmsg)) ) {
  char warnmsg[768];
  sprintf(warnmsg, "Error: %s", errmsg);
  fl_alert(warnmsg);
  }
}
